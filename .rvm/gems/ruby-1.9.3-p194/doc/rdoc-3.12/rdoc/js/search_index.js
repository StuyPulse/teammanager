var search_data = {"index":{"searchIndex":["rdoc","alias","anonclass","anymethod","attr","classmodule","codeobject","comment","constant","context","section","crossreference","erbio","encoding","error","gauntlet","generator","darkfish","jsonindex","markup","ri","ghostmethod","include","markup","attrchanger","attrspan","attribute","attributemanager","blankline","document","formatter","formattertestcase","heading","include","indentedparagraph","list","listitem","paragraph","parser","error","parseerror","preprocess","raw","rule","special","textformattertestcase","toansi","tobs","tohtml","tohtmlcrossref","tohtmlsnippet","tolabel","tordoc","totableofcontents","totest","tottonly","verbatim","metamethod","methodattr","normalclass","normalmodule","options","parser","c","rd","ruby","rubytools","simple","text","rd","inline","rdoc","ri","driver","error","notfounderror","error","paths","store","require","rubylex","error","rubytoken","tkerror","tkid","tkkw","tknode","tkopasgn","tkop","tksymbol","tkunknownchar","tkval","token","rubygemshook","singleclass","stats","normal","quiet","verbose","task","testcase","text","tokenstream","tomdoc","toplevel","rake","<<()","<<()","<<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","[]()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept_blank_line()","accept_blank_line()","accept_blank_line()","accept_document()","accept_heading()","accept_heading()","accept_heading()","accept_heading()","accept_heading()","accept_heading()","accept_indented_paragraph()","accept_list_end()","accept_list_end()","accept_list_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_start()","accept_list_start()","accept_list_start()","accept_list_start()","accept_paragraph()","accept_paragraph()","accept_paragraph()","accept_paragraph()","accept_raw()","accept_raw()","accept_raw()","accept_rule()","accept_rule()","accept_rule()","accept_verbatim()","accept_verbatim()","accept_verbatim()","accept_verbatim()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_also_in()","add_attribute()","add_attribute()","add_class()","add_class()","add_class()","add_class_or_module()","add_comment()","add_constant()","add_constant()","add_constant()","add_file()","add_from()","add_generator()","add_html()","add_html()","add_include()","add_include()","add_includes()","add_line_numbers()","add_method()","add_method()","add_method()","add_method_list()","add_module()","add_module()","add_module_alias()","add_paragraph()","add_require()","add_section()","add_special()","add_special()","add_tag()","add_text_tests()","add_to()","add_to_classes_or_modules()","add_token()","add_token_listener()","add_tokens()","add_visitor_tests()","add_word_pair()","add_word_pair()","alias_extension()","all_classes()","all_classes_and_modules()","all_classes_hash()","all_files()","all_files_hash()","all_modules()","all_modules_hash()","ancestors()","ancestors()","ancestors()","ancestors()","ancestors_of()","annotate()","annotate()","any_content()","append()","aref()","aref()","aref()","aref()","aref_prefix()","aref_prefix()","aref_prefix()","aref_to()","arglists()","as_href()","as_string()","assemble_template()","attribute()","attributes()","attributes()","base_name()","before_running_rdoc()","begin_adding()","begin_adding()","binary?()","bitmap_for()","block_params=()","build_heading()","build_heading()","build_list()","build_paragraph()","build_paragraph()","build_verbatim()","build_verbatim()","cache_path()","calculate()","can_parse()","change_attribute()","changed_attribute_by_name()","check_files()","check_generator()","check_names()","child_name()","class_attributes()","class_dir()","class_dir()","class_document()","class_file()","class_method_list()","class_methods()","class_path()","classes()","classes()","classes()","classes_and_includes_for()","classes_and_modules()","classes_hash()","classes_hash()","clear_comment()","clobber_task_description()","collect_first_comment()","collect_tokens()","comment()","comment=()","comment=()","comment=()","complete()","complete()","complete()","convert()","convert()","convert()","convert()","convert_attrs()","convert_flow()","convert_flow()","convert_html()","convert_special()","convert_special()","convert_specials()","convert_string()","convert_string()","convert_string()","copy_static()","copy_string()","coverage_level=()","cross_reference()","current()","current=()","current_section()","cvs_url()","cvs_url()","debug_msg()","debug_msg()","default_options()","default_title=()","defaults()","define()","defined_in?()","definition()","definition()","definition()","definition()","delete_legacy_args()","description()","description()","display()","display?()","display?()","display_attributes()","display_class()","display_method()","display_name()","display_names()","do_aliases()","do_attrs()","do_classes()","do_constants()","do_includes()","do_methods()","do_nothing()","doc_stats()","document()","document()","document_children=()","document_self=()","document_self_or_methods()","documented?()","documented?()","documented?()","done_adding()","done_adding()","done_documenting=()","dump()","each()","each_ancestor()","each_attribute()","each_classmodule()","each_constant()","each_include()","each_method()","each_name_of()","each_parent()","each_section()","empty?()","empty?()","empty?()","empty?()","encode_fallback()","end_accepting()","end_accepting()","end_accepting()","end_accepting()","eql?()","error()","error()","expand_class()","expand_name()","expand_tabs()","extract_call_seq()","extract_comment()","file=()","file_dir()","file_dir()","file_name()","files()","files_hash()","filter_methods()","find_alias_comment()","find_ancestor_local_symbol()","find_attr_comment()","find_attribute()","find_attribute_named()","find_body()","find_class()","find_class_comment()","find_class_method_named()","find_class_named()","find_class_named()","find_class_named_from()","find_class_or_module()","find_class_or_module()","find_const_comment()","find_constant_named()","find_enclosing_module_named()","find_external_alias()","find_external_alias_named()","find_file_named()","find_file_named()","find_include_file()","find_instance_method_named()","find_local_symbol()","find_local_symbol()","find_method()","find_method_named()","find_methods()","find_modifiers()","find_module_named()","find_module_named()","find_module_named()","find_override_comment()","find_symbol()","find_symbol_module()","find_unique()","finish()","fix_basic_object_inheritance()","flow()","flush_left()","for()","force_documentation=()","force_encoding()","format=()","formatter()","formatter()","friendly_path()","from_module()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name=()","full_old_name()","fully_documented?()","fully_documented?()","gather_files()","gemdirs()","gen_relative_url()","gen_sub_directories()","gen_url()","gen_url()","gen_url()","generate()","generate()","generate()","generate()","generate()","generate_class_files()","generate_file_files()","generate_index()","generate_table_of_contents()","generation_hook()","generator_descriptions()","get()","get_bool()","get_class_or_module()","get_class_specification()","get_constant()","get_constant_with_optional_parens()","get_sorted_module_list()","get_svninfo()","get_symbol_or_name()","get_tk()","get_tk_until()","get_tkread()","great_job()","handle()","handle_attr()","handle_class_module()","handle_constants()","handle_directive()","handle_ifdefs_in()","handle_method()","handle_pipe()","handle_singleton()","handle_special_crossref()","handle_special_crossref()","handle_special_crossref()","handle_special_hyperlink()","handle_special_hyperlink()","handle_special_rdoclink()","handle_special_rdoclink()","handle_special_suppressed_crossref()","handle_special_tidylink()","handle_special_tidylink()","handle_tab_width()","hash()","html_list_name()","html_list_name()","html_name()","html_name()","http_url()","http_url()","ignore()","ignore()","ignored?()","in_path?()","in_tt?()","include_file()","index_classes()","index_methods()","index_pages()","init_tags()","init_tags()","init_tags()","init_tags()","initialize_methods_etc()","install_siginfo_handler()","install_siginfo_handler()","instance_attributes()","instance_method_list()","instance_methods()","interactive()","last()","last_modified()","length()","link()","list_end_for()","list_files_in_directory()","list_item_start()","list_item_start()","list_known_classes()","list_methods_matching()","load_cache()","load_class()","load_method()","load_method()","load_methods_matching()","load_options()","load_rdoc()","load_yaml()","look_for_directives_in()","look_for_directives_in()","make_message()","markup()","markup_code()","marshal_dump()","marshal_dump()","marshal_load()","marshal_load()","mask_protected_sequences()","merge()","merge()","merge()","merged?()","method_document()","method_file()","method_type()","methods_by_type()","methods_matching()","module()","module?()","module?()","modules()","modules()","modules()","modules_hash()","modules_hash()","name()","name()","name=()","name_for_path()","name_for_path()","name_prefix()","name_prefix()","name_regexp()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_comment()","nodoc()","non_aliases()","normalize()","normalize()","normalize_comment()","normalized_file_list()","object_class()","off_tags()","off_tags()","on_tags()","on_tags()","ongoing_visibility=()","option_list()","output_flag_file()","output_name()","page()","page()","page_name()","paging?()","param_list()","param_seq()","parent_file_name()","parent_name()","parent_name()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse_alias()","parse_attr()","parse_attr_accessor()","parse_call_parameters()","parse_class()","parse_comment()","parse_comment_tomdoc()","parse_constant()","parse_dot_doc_file()","parse_file()","parse_files()","parse_files_matching()","parse_include()","parse_meta_attr()","parse_meta_method()","parse_method()","parse_method_or_yield_parameters()","parse_method_parameters()","parse_module()","parse_name()","parse_require()","parse_statements()","parse_symbol_arg()","parse_symbol_in_arg()","parse_top_level_statements()","parse_visibility()","parse_yield()","parseable?()","path()","path()","path()","path()","path()","peek_read()","peek_tk()","peek_token()","percent_doc()","plain_html()","plain_html()","pop_token()","post_process()","post_processors()","pretty_name()","pretty_name()","pretty_new_name()","pretty_old_name()","print_alias()","print_attribute()","print_class()","print_constant()","print_file()","print_file()","print_method()","print_module()","process_args()","process_directive()","push()","push()","push()","push()","quiet()","quiet=()","raw_path()","rb_scan_args()","rdoc_installed?()","rdoc_task_description()","read_directive()","read_documentation_modifiers()","read_file()","record_location()","record_location()","register()","registered()","remove()","remove_coding_comment()","remove_commented_out_lines()","remove_from_documentation?()","remove_invisible()","remove_nodoc()","remove_nodoc_children()","remove_private()","remove_private_comment()","remove_private_comments()","remove_siginfo_handler()","remove_siginfo_handler()","remove_token_listener()","remove_unparseable()","render()","render_template()","report()","report_attributes()","report_class_module()","report_constants()","report_methods()","rerdoc_task_description()","reset()","reset()","reset()","reset()","reset()","resolve()","resolve_aliases()","ri_installed?()","ruby?()","run()","run()","run()","run_the_gauntlet()","sanitize_path()","save_cache()","save_class()","save_method()","scan()","scan()","scan()","scan()","search_record()","search_record()","search_record()","search_string()","section_contents()","sections()","see()","sequence()","set_attrs()","set_current_section()","set_encoding()","set_eoutvar()","set_visibility_for()","setup()","setup()","setup()","setup_generator()","setup_output_dir()","setup_pager()","signature()","skip()","skip_for_variable()","skip_method()","skip_optional_do_after_expression()","skip_tkspace()","skip_tkspace_comment()","snippet()","sort_sections()","split_into_flow()","start_accepting()","start_accepting()","start_accepting()","start_accepting()","start_accepting()","start_accepting()","start_collecting_tokens()","start_doc()","stop_doc()","strip_hashes()","strip_newlines()","strip_stars()","summary()","superclass()","superclass()","superclass=()","table_of_contents()","temp_dir()","template_dir_for()","template_for()","template_result()","test_accept_blank_line()","test_accept_document()","test_accept_heading()","test_accept_heading_1()","test_accept_heading_2()","test_accept_heading_3()","test_accept_heading_4()","test_accept_heading_b()","test_accept_heading_indent()","test_accept_heading_suppressed_crossref()","test_accept_list_end_bullet()","test_accept_list_end_label()","test_accept_list_end_lalpha()","test_accept_list_end_note()","test_accept_list_end_number()","test_accept_list_end_ualpha()","test_accept_list_item_end_bullet()","test_accept_list_item_end_label()","test_accept_list_item_end_lalpha()","test_accept_list_item_end_note()","test_accept_list_item_end_number()","test_accept_list_item_end_ualpha()","test_accept_list_item_start_bullet()","test_accept_list_item_start_label()","test_accept_list_item_start_lalpha()","test_accept_list_item_start_note()","test_accept_list_item_start_note_2()","test_accept_list_item_start_number()","test_accept_list_item_start_ualpha()","test_accept_list_start_bullet()","test_accept_list_start_label()","test_accept_list_start_lalpha()","test_accept_list_start_note()","test_accept_list_start_number()","test_accept_list_start_ualpha()","test_accept_paragraph()","test_accept_paragraph_b()","test_accept_paragraph_i()","test_accept_paragraph_indent()","test_accept_paragraph_plus()","test_accept_paragraph_star()","test_accept_paragraph_underscore()","test_accept_paragraph_wrap()","test_accept_raw()","test_accept_rule()","test_accept_rule_indent()","test_accept_verbatim()","test_accept_verbatim_big_indent()","test_accept_verbatim_indent()","test_attributes()","test_end_accepting()","test_list_nested()","test_list_verbatim()","test_start_accepting()","text()","text()","text=()","text?()","time_delta_string()","to_html()","to_html()","to_html()","to_html()","to_label()","to_toc()","token_listener()","token_pos()","token_stream()","tokenize()","tokenize()","tokenize()","tokenize()","tokens_to_s()","tomdoc?()","top_level()","top_level()","truncate()","tt?()","tt_sections()","type()","type()","undoc_params()","unget()","unget_tk()","unique_classes()","unique_classes_and_modules()","unique_modules()","unmask_protected_sequences()","update_aliases()","update_includes()","update_output_dir()","upgrade_to_class()","use_markup()","use_prefix()","warn()","warn()","wrap()","wrap()","write_options()","write_style_sheet()","zip?()","developers","history","legal","license","manifest","readme","ri","rakefile","todo"],"longSearchIndex":["rdoc","rdoc::alias","rdoc::anonclass","rdoc::anymethod","rdoc::attr","rdoc::classmodule","rdoc::codeobject","rdoc::comment","rdoc::constant","rdoc::context","rdoc::context::section","rdoc::crossreference","rdoc::erbio","rdoc::encoding","rdoc::error","rdoc::gauntlet","rdoc::generator","rdoc::generator::darkfish","rdoc::generator::jsonindex","rdoc::generator::markup","rdoc::generator::ri","rdoc::ghostmethod","rdoc::include","rdoc::markup","rdoc::markup::attrchanger","rdoc::markup::attrspan","rdoc::markup::attribute","rdoc::markup::attributemanager","rdoc::markup::blankline","rdoc::markup::document","rdoc::markup::formatter","rdoc::markup::formattertestcase","rdoc::markup::heading","rdoc::markup::include","rdoc::markup::indentedparagraph","rdoc::markup::list","rdoc::markup::listitem","rdoc::markup::paragraph","rdoc::markup::parser","rdoc::markup::parser::error","rdoc::markup::parser::parseerror","rdoc::markup::preprocess","rdoc::markup::raw","rdoc::markup::rule","rdoc::markup::special","rdoc::markup::textformattertestcase","rdoc::markup::toansi","rdoc::markup::tobs","rdoc::markup::tohtml","rdoc::markup::tohtmlcrossref","rdoc::markup::tohtmlsnippet","rdoc::markup::tolabel","rdoc::markup::tordoc","rdoc::markup::totableofcontents","rdoc::markup::totest","rdoc::markup::tottonly","rdoc::markup::verbatim","rdoc::metamethod","rdoc::methodattr","rdoc::normalclass","rdoc::normalmodule","rdoc::options","rdoc::parser","rdoc::parser::c","rdoc::parser::rd","rdoc::parser::ruby","rdoc::parser::rubytools","rdoc::parser::simple","rdoc::parser::text","rdoc::rd","rdoc::rd::inline","rdoc::rdoc","rdoc::ri","rdoc::ri::driver","rdoc::ri::driver::error","rdoc::ri::driver::notfounderror","rdoc::ri::error","rdoc::ri::paths","rdoc::ri::store","rdoc::require","rdoc::rubylex","rdoc::rubylex::error","rdoc::rubytoken","rdoc::rubytoken::tkerror","rdoc::rubytoken::tkid","rdoc::rubytoken::tkkw","rdoc::rubytoken::tknode","rdoc::rubytoken::tkopasgn","rdoc::rubytoken::tkop","rdoc::rubytoken::tksymbol","rdoc::rubytoken::tkunknownchar","rdoc::rubytoken::tkval","rdoc::rubytoken::token","rdoc::rubygemshook","rdoc::singleclass","rdoc::stats","rdoc::stats::normal","rdoc::stats::quiet","rdoc::stats::verbose","rdoc::task","rdoc::testcase","rdoc::text","rdoc::tokenstream","rdoc::tomdoc","rdoc::toplevel","rake","rdoc::markup::document#<<()","rdoc::markup::list#<<()","rdoc::markup::listitem#<<()","rdoc::markup::raw#<<()","rdoc::alias#<=>()","rdoc::constant#<=>()","rdoc::context#<=>()","rdoc::include#<=>()","rdoc::methodattr#<=>()","rdoc::attr#==()","rdoc::constant#==()","rdoc::context::section#==()","rdoc::markup::special#==()","rdoc::toplevel#==()","rdoc::markup::attrspan#[]()","rdoc::markup::blankline#accept()","rdoc::markup::document#accept()","rdoc::markup::heading#accept()","rdoc::markup::indentedparagraph#accept()","rdoc::markup::list#accept()","rdoc::markup::listitem#accept()","rdoc::markup::paragraph#accept()","rdoc::markup::raw#accept()","rdoc::markup::rule#accept()","rdoc::markup::verbatim#accept()","rdoc::markup::tohtml#accept_blank_line()","rdoc::markup::tordoc#accept_blank_line()","rdoc::markup::tottonly#accept_blank_line()","rdoc::markup::formatter#accept_document()","rdoc::markup::tobs#accept_heading()","rdoc::markup::tohtml#accept_heading()","rdoc::markup::tohtmlsnippet#accept_heading()","rdoc::markup::tordoc#accept_heading()","rdoc::markup::totableofcontents#accept_heading()","rdoc::markup::tottonly#accept_heading()","rdoc::markup::tordoc#accept_indented_paragraph()","rdoc::markup::tohtml#accept_list_end()","rdoc::markup::tordoc#accept_list_end()","rdoc::markup::tottonly#accept_list_end()","rdoc::markup::toansi#accept_list_item_end()","rdoc::markup::tohtml#accept_list_item_end()","rdoc::markup::tohtmlsnippet#accept_list_item_end()","rdoc::markup::tordoc#accept_list_item_end()","rdoc::markup::tottonly#accept_list_item_end()","rdoc::markup::toansi#accept_list_item_start()","rdoc::markup::tohtml#accept_list_item_start()","rdoc::markup::tohtmlsnippet#accept_list_item_start()","rdoc::markup::tordoc#accept_list_item_start()","rdoc::markup::tottonly#accept_list_item_start()","rdoc::markup::tohtml#accept_list_start()","rdoc::markup::tohtmlsnippet#accept_list_start()","rdoc::markup::tordoc#accept_list_start()","rdoc::markup::tottonly#accept_list_start()","rdoc::markup::tohtml#accept_paragraph()","rdoc::markup::tohtmlsnippet#accept_paragraph()","rdoc::markup::tordoc#accept_paragraph()","rdoc::markup::tottonly#accept_paragraph()","rdoc::markup::tohtml#accept_raw()","rdoc::markup::tordoc#accept_raw()","rdoc::markup::tottonly#accept_raw()","rdoc::markup::tohtml#accept_rule()","rdoc::markup::tordoc#accept_rule()","rdoc::markup::tottonly#accept_rule()","rdoc::markup::tohtml#accept_verbatim()","rdoc::markup::tohtmlsnippet#accept_verbatim()","rdoc::markup::tordoc#accept_verbatim()","rdoc::markup::tottonly#accept_verbatim()","rdoc::anymethod#add_alias()","rdoc::attr#add_alias()","rdoc::context#add_alias()","rdoc::methodattr#add_alias()","rdoc::stats#add_alias()","rdoc::toplevel#add_alias()","rdoc::ri::driver#add_also_in()","rdoc::context#add_attribute()","rdoc::stats#add_attribute()","rdoc::context#add_class()","rdoc::ri::driver#add_class()","rdoc::stats#add_class()","rdoc::context#add_class_or_module()","rdoc::classmodule#add_comment()","rdoc::context#add_constant()","rdoc::stats#add_constant()","rdoc::toplevel#add_constant()","rdoc::stats#add_file()","rdoc::ri::driver#add_from()","rdoc::rdoc::add_generator()","rdoc::markup#add_html()","rdoc::markup::attributemanager#add_html()","rdoc::context#add_include()","rdoc::toplevel#add_include()","rdoc::ri::driver#add_includes()","rdoc::anymethod#add_line_numbers()","rdoc::context#add_method()","rdoc::stats#add_method()","rdoc::toplevel#add_method()","rdoc::ri::driver#add_method_list()","rdoc::context#add_module()","rdoc::stats#add_module()","rdoc::context#add_module_alias()","rdoc::markup::tohtmlsnippet#add_paragraph()","rdoc::context#add_require()","rdoc::context#add_section()","rdoc::markup#add_special()","rdoc::markup::attributemanager#add_special()","rdoc::markup::formatter#add_tag()","rdoc::markup::textformattertestcase::add_text_tests()","rdoc::context#add_to()","rdoc::toplevel#add_to_classes_or_modules()","rdoc::tokenstream#add_token()","rdoc::parser::rubytools#add_token_listener()","rdoc::tokenstream#add_tokens()","rdoc::markup::formattertestcase::add_visitor_tests()","rdoc::markup#add_word_pair()","rdoc::markup::attributemanager#add_word_pair()","rdoc::parser::alias_extension()","rdoc::toplevel::all_classes()","rdoc::toplevel::all_classes_and_modules()","rdoc::toplevel::all_classes_hash()","rdoc::toplevel::all_files()","rdoc::toplevel::all_files_hash()","rdoc::toplevel::all_modules()","rdoc::toplevel::all_modules_hash()","rdoc::classmodule#ancestors()","rdoc::normalclass#ancestors()","rdoc::ri::store#ancestors()","rdoc::singleclass#ancestors()","rdoc::ri::driver#ancestors_of()","rdoc::markup::formatter#annotate()","rdoc::markup::tobs#annotate()","rdoc::context#any_content()","rdoc::rd::inline#append()","rdoc::alias#aref()","rdoc::context::section#aref()","rdoc::markup::heading#aref()","rdoc::methodattr#aref()","rdoc::anymethod#aref_prefix()","rdoc::attr#aref_prefix()","rdoc::methodattr#aref_prefix()","rdoc::generator::markup#aref_to()","rdoc::anymethod#arglists()","rdoc::generator::markup#as_href()","rdoc::markup::attribute::as_string()","rdoc::generator::darkfish#assemble_template()","rdoc::markup::attributemanager#attribute()","rdoc::markup::tordoc#attributes()","rdoc::ri::store#attributes()","rdoc::toplevel#base_name()","rdoc::task#before_running_rdoc()","rdoc::stats#begin_adding()","rdoc::stats::quiet#begin_adding()","rdoc::parser::binary?()","rdoc::markup::attribute::bitmap_for()","rdoc::methodattr#block_params=()","rdoc::markup::parser#build_heading()","rdoc::tomdoc#build_heading()","rdoc::markup::parser#build_list()","rdoc::markup::parser#build_paragraph()","rdoc::tomdoc#build_paragraph()","rdoc::markup::parser#build_verbatim()","rdoc::tomdoc#build_verbatim()","rdoc::ri::store#cache_path()","rdoc::stats#calculate()","rdoc::parser::can_parse()","rdoc::markup::attributemanager#change_attribute()","rdoc::markup::attributemanager#changed_attribute_by_name()","rdoc::options#check_files()","rdoc::options#check_generator()","rdoc::task#check_names()","rdoc::context#child_name()","rdoc::context#class_attributes()","rdoc::generator::darkfish#class_dir()","rdoc::generator::jsonindex#class_dir()","rdoc::ri::driver#class_document()","rdoc::ri::store#class_file()","rdoc::context#class_method_list()","rdoc::ri::store#class_methods()","rdoc::ri::store#class_path()","rdoc::context#classes()","rdoc::ri::driver#classes()","rdoc::toplevel::classes()","rdoc::ri::driver#classes_and_includes_for()","rdoc::context#classes_and_modules()","rdoc::context#classes_hash()","rdoc::toplevel::classes_hash()","rdoc::classmodule#clear_comment()","rdoc::task#clobber_task_description()","rdoc::parser::ruby#collect_first_comment()","rdoc::tokenstream#collect_tokens()","rdoc::testcase#comment()","rdoc::classmodule#comment=()","rdoc::codeobject#comment=()","rdoc::context::section#comment=()","rdoc::classmodule#complete()","rdoc::ri::driver#complete()","rdoc::toplevel::complete()","rdoc::markup#convert()","rdoc::markup::formatter#convert()","rdoc::markup::tohtmlsnippet#convert()","rdoc::markup::tolabel#convert()","rdoc::markup::attributemanager#convert_attrs()","rdoc::markup::formatter#convert_flow()","rdoc::markup::tohtmlsnippet#convert_flow()","rdoc::markup::attributemanager#convert_html()","rdoc::markup::formatter#convert_special()","rdoc::markup::tobs#convert_special()","rdoc::markup::attributemanager#convert_specials()","rdoc::markup::formatter#convert_string()","rdoc::markup::tobs#convert_string()","rdoc::markup::tohtml#convert_string()","rdoc::generator::darkfish#copy_static()","rdoc::markup::attributemanager#copy_string()","rdoc::stats#coverage_level=()","rdoc::markup::tohtmlcrossref#cross_reference()","rdoc::rdoc::current()","rdoc::rdoc::current=()","rdoc::context#current_section()","rdoc::generator::markup#cvs_url()","rdoc::toplevel#cvs_url()","rdoc::generator::darkfish#debug_msg()","rdoc::generator::jsonindex#debug_msg()","rdoc::ri::driver::default_options()","rdoc::options#default_title=()","rdoc::task#defaults()","rdoc::task#define()","rdoc::context#defined_in?()","rdoc::attr#definition()","rdoc::normalclass#definition()","rdoc::normalmodule#definition()","rdoc::singleclass#definition()","rdoc::rubygemshook#delete_legacy_args()","rdoc::classmodule#description()","rdoc::generator::markup#description()","rdoc::ri::driver#display()","rdoc::codeobject#display?()","rdoc::toplevel#display?()","rdoc::markup::attributemanager#display_attributes()","rdoc::ri::driver#display_class()","rdoc::ri::driver#display_method()","rdoc::ri::driver#display_name()","rdoc::ri::driver#display_names()","rdoc::parser::c#do_aliases()","rdoc::parser::c#do_attrs()","rdoc::parser::c#do_classes()","rdoc::parser::c#do_constants()","rdoc::parser::c#do_includes()","rdoc::parser::c#do_methods()","rdoc::markup::tottonly#do_nothing()","rdoc::stats#doc_stats()","rdoc::rdoc#document()","rdoc::rubygemshook#document()","rdoc::codeobject#document_children=()","rdoc::codeobject#document_self=()","rdoc::classmodule#document_self_or_methods()","rdoc::codeobject#documented?()","rdoc::constant#documented?()","rdoc::methodattr#documented?()","rdoc::stats#done_adding()","rdoc::stats::quiet#done_adding()","rdoc::codeobject#done_documenting=()","rdoc::ri::driver::dump()","rdoc::ri::paths::each()","rdoc::classmodule#each_ancestor()","rdoc::context#each_attribute()","rdoc::context#each_classmodule()","rdoc::context#each_constant()","rdoc::context#each_include()","rdoc::context#each_method()","rdoc::markup::attribute::each_name_of()","rdoc::codeobject#each_parent()","rdoc::context#each_section()","rdoc::comment#empty?()","rdoc::markup::document#empty?()","rdoc::markup::list#empty?()","rdoc::markup::listitem#empty?()","rdoc::text::encode_fallback()","rdoc::markup::tohtml#end_accepting()","rdoc::markup::tordoc#end_accepting()","rdoc::markup::totableofcontents#end_accepting()","rdoc::markup::tottonly#end_accepting()","rdoc::toplevel#eql?()","rdoc::parser::ruby#error()","rdoc::rdoc#error()","rdoc::ri::driver#expand_class()","rdoc::ri::driver#expand_name()","rdoc::text#expand_tabs()","rdoc::comment#extract_call_seq()","rdoc::context::section#extract_comment()","rdoc::markup::document#file=()","rdoc::generator::darkfish#file_dir()","rdoc::generator::jsonindex#file_dir()","rdoc::codeobject#file_name()","rdoc::toplevel::files()","rdoc::toplevel::files_hash()","rdoc::ri::driver#filter_methods()","rdoc::parser::c#find_alias_comment()","rdoc::classmodule#find_ancestor_local_symbol()","rdoc::parser::c#find_attr_comment()","rdoc::context#find_attribute()","rdoc::context#find_attribute_named()","rdoc::parser::c#find_body()","rdoc::parser::c#find_class()","rdoc::parser::c#find_class_comment()","rdoc::context#find_class_method_named()","rdoc::classmodule#find_class_named()","rdoc::toplevel::find_class_named()","rdoc::toplevel::find_class_named_from()","rdoc::toplevel#find_class_or_module()","rdoc::toplevel::find_class_or_module()","rdoc::parser::c#find_const_comment()","rdoc::context#find_constant_named()","rdoc::context#find_enclosing_module_named()","rdoc::context#find_external_alias()","rdoc::context#find_external_alias_named()","rdoc::context#find_file_named()","rdoc::toplevel::find_file_named()","rdoc::markup::preprocess#find_include_file()","rdoc::context#find_instance_method_named()","rdoc::context#find_local_symbol()","rdoc::toplevel#find_local_symbol()","rdoc::context#find_method()","rdoc::context#find_method_named()","rdoc::ri::driver#find_methods()","rdoc::parser::c#find_modifiers()","rdoc::context#find_module_named()","rdoc::toplevel::find_module_named()","rdoc::toplevel#find_module_named()","rdoc::parser::c#find_override_comment()","rdoc::context#find_symbol()","rdoc::context#find_symbol_module()","rdoc::toplevel::find_unique()","rdoc::options#finish()","rdoc::toplevel::fix_basic_object_inheritance()","rdoc::markup::attributemanager#flow()","rdoc::text#flush_left()","rdoc::parser::for()","rdoc::codeobject#force_documentation=()","rdoc::comment#force_encoding()","rdoc::comment#format=()","rdoc::generator::markup#formatter()","rdoc::ri::driver#formatter()","rdoc::ri::store#friendly_path()","rdoc::classmodule::from_module()","rdoc::classmodule#full_name()","rdoc::context#full_name()","rdoc::include#full_name()","rdoc::methodattr#full_name()","rdoc::toplevel#full_name()","rdoc::codeobject#full_name=()","rdoc::alias#full_old_name()","rdoc::context#fully_documented?()","rdoc::stats#fully_documented?()","rdoc::rdoc#gather_files()","rdoc::ri::paths::gemdirs()","rdoc::markup::tohtml::gen_relative_url()","rdoc::generator::darkfish#gen_sub_directories()","rdoc::markup::tohtml#gen_url()","rdoc::markup::tohtmlcrossref#gen_url()","rdoc::markup::tohtmlsnippet#gen_url()","rdoc::generator::darkfish#generate()","rdoc::generator::jsonindex#generate()","rdoc::generator::ri#generate()","rdoc::rdoc#generate()","rdoc::rubygemshook#generate()","rdoc::generator::darkfish#generate_class_files()","rdoc::generator::darkfish#generate_file_files()","rdoc::generator::darkfish#generate_index()","rdoc::generator::darkfish#generate_table_of_contents()","rdoc::rubygemshook::generation_hook()","rdoc::options#generator_descriptions()","rdoc::markup::parser#get()","rdoc::parser::ruby#get_bool()","rdoc::parser::ruby#get_class_or_module()","rdoc::parser::ruby#get_class_specification()","rdoc::parser::ruby#get_constant()","rdoc::parser::ruby#get_constant_with_optional_parens()","rdoc::generator::darkfish#get_sorted_module_list()","rdoc::generator::darkfish#get_svninfo()","rdoc::parser::ruby#get_symbol_or_name()","rdoc::parser::rubytools#get_tk()","rdoc::parser::rubytools#get_tk_until()","rdoc::parser::rubytools#get_tkread()","rdoc::stats#great_job()","rdoc::markup::preprocess#handle()","rdoc::parser::c#handle_attr()","rdoc::parser::c#handle_class_module()","rdoc::parser::c#handle_constants()","rdoc::markup::preprocess#handle_directive()","rdoc::parser::c#handle_ifdefs_in()","rdoc::parser::c#handle_method()","rdoc::rdoc#handle_pipe()","rdoc::parser::c#handle_singleton()","rdoc::markup::tohtmlcrossref#handle_special_crossref()","rdoc::markup::tohtmlsnippet#handle_special_crossref()","rdoc::markup::tolabel#handle_special_crossref()","rdoc::markup::tohtml#handle_special_hyperlink()","rdoc::markup::tohtmlcrossref#handle_special_hyperlink()","rdoc::markup::tohtml#handle_special_rdoclink()","rdoc::markup::tohtmlcrossref#handle_special_rdoclink()","rdoc::markup::tordoc#handle_special_suppressed_crossref()","rdoc::markup::tohtml#handle_special_tidylink()","rdoc::markup::tolabel#handle_special_tidylink()","rdoc::parser::c#handle_tab_width()","rdoc::toplevel#hash()","rdoc::markup::tohtml#html_list_name()","rdoc::markup::tohtmlsnippet#html_list_name()","rdoc::alias#html_name()","rdoc::methodattr#html_name()","rdoc::context#http_url()","rdoc::toplevel#http_url()","rdoc::codeobject#ignore()","rdoc::markup::formatter#ignore()","rdoc::codeobject#ignored?()","rdoc::ri::driver#in_path?()","rdoc::markup::formatter#in_tt?()","rdoc::markup::preprocess#include_file()","rdoc::generator::jsonindex#index_classes()","rdoc::generator::jsonindex#index_methods()","rdoc::generator::jsonindex#index_pages()","rdoc::markup::toansi#init_tags()","rdoc::markup::tobs#init_tags()","rdoc::markup::tohtml#init_tags()","rdoc::markup::tordoc#init_tags()","rdoc::context#initialize_methods_etc()","rdoc::generator::ri#install_siginfo_handler()","rdoc::rdoc#install_siginfo_handler()","rdoc::context#instance_attributes()","rdoc::context#instance_method_list()","rdoc::ri::store#instance_methods()","rdoc::ri::driver#interactive()","rdoc::markup::list#last()","rdoc::toplevel#last_modified()","rdoc::markup::listitem#length()","rdoc::markup::tohtmlcrossref#link()","rdoc::markup::tohtml#list_end_for()","rdoc::rdoc#list_files_in_directory()","rdoc::markup::tohtml#list_item_start()","rdoc::markup::tohtmlsnippet#list_item_start()","rdoc::ri::driver#list_known_classes()","rdoc::ri::driver#list_methods_matching()","rdoc::ri::store#load_cache()","rdoc::ri::store#load_class()","rdoc::ri::driver#load_method()","rdoc::ri::store#load_method()","rdoc::ri::driver#load_methods_matching()","rdoc::rdoc#load_options()","rdoc::rubygemshook::load_rdoc()","rdoc::load_yaml()","rdoc::parser::c#look_for_directives_in()","rdoc::parser::ruby#look_for_directives_in()","rdoc::parser::ruby#make_message()","rdoc::text#markup()","rdoc::anymethod#markup_code()","rdoc::anymethod#marshal_dump()","rdoc::attr#marshal_dump()","rdoc::anymethod#marshal_load()","rdoc::attr#marshal_load()","rdoc::markup::attributemanager#mask_protected_sequences()","rdoc::classmodule#merge()","rdoc::markup::document#merge()","rdoc::markup::raw#merge()","rdoc::markup::document#merged?()","rdoc::ri::driver#method_document()","rdoc::ri::store#method_file()","rdoc::ri::driver#method_type()","rdoc::context#methods_by_type()","rdoc::context#methods_matching()","rdoc::include#module()","rdoc::classmodule#module?()","rdoc::normalmodule#module?()","rdoc::context#modules()","rdoc::ri::store#modules()","rdoc::toplevel::modules()","rdoc::context#modules_hash()","rdoc::toplevel::modules_hash()","rdoc::anymethod#name()","rdoc::toplevel#name()","rdoc::classmodule#name=()","rdoc::classmodule#name_for_path()","rdoc::context#name_for_path()","rdoc::alias#name_prefix()","rdoc::methodattr#name_prefix()","rdoc::ri::driver#name_regexp()","rdoc::alias::new()","rdoc::anymethod::new()","rdoc::attr::new()","rdoc::classmodule::new()","rdoc::codeobject::new()","rdoc::comment::new()","rdoc::constant::new()","rdoc::context::new()","rdoc::context::section::new()","rdoc::crossreference::new()","rdoc::erbio::new()","rdoc::generator::darkfish::new()","rdoc::generator::jsonindex::new()","rdoc::generator::ri::new()","rdoc::include::new()","rdoc::markup::new()","rdoc::markup::attrspan::new()","rdoc::markup::attributemanager::new()","rdoc::markup::blankline::new()","rdoc::markup::document::new()","rdoc::markup::formatter::new()","rdoc::markup::include::new()","rdoc::markup::indentedparagraph::new()","rdoc::markup::list::new()","rdoc::markup::listitem::new()","rdoc::markup::parser::new()","rdoc::markup::preprocess::new()","rdoc::markup::raw::new()","rdoc::markup::special::new()","rdoc::markup::toansi::new()","rdoc::markup::tobs::new()","rdoc::markup::tohtml::new()","rdoc::markup::tohtmlcrossref::new()","rdoc::markup::tohtmlsnippet::new()","rdoc::markup::tolabel::new()","rdoc::markup::tordoc::new()","rdoc::markup::tottonly::new()","rdoc::methodattr::new()","rdoc::parser::new()","rdoc::parser::c::new()","rdoc::parser::ruby::new()","rdoc::parser::simple::new()","rdoc::rd::inline::new()","rdoc::rd::inline::new()","rdoc::rdoc::new()","rdoc::ri::driver::new()","rdoc::ri::store::new()","rdoc::require::new()","rdoc::rubylex::new()","rdoc::rubygemshook::new()","rdoc::stats::new()","rdoc::stats::quiet::new()","rdoc::task::new()","rdoc::tomdoc::new()","rdoc::toplevel::new()","rdoc::toplevel::new()","rdoc::parser::ruby#new_comment()","rdoc::stats::verbose#nodoc()","rdoc::classmodule#non_aliases()","rdoc::comment#normalize()","rdoc::markup::verbatim#normalize()","rdoc::text#normalize_comment()","rdoc::rdoc#normalized_file_list()","rdoc::toplevel#object_class()","rdoc::markup::formatter#off_tags()","rdoc::markup::tohtmlsnippet#off_tags()","rdoc::markup::formatter#on_tags()","rdoc::markup::tohtmlsnippet#on_tags()","rdoc::context#ongoing_visibility=()","rdoc::task#option_list()","rdoc::rdoc#output_flag_file()","rdoc::methodattr#output_name()","rdoc::ri::driver#page()","rdoc::toplevel::page()","rdoc::toplevel#page_name()","rdoc::ri::driver#paging?()","rdoc::anymethod#param_list()","rdoc::anymethod#param_seq()","rdoc::codeobject#parent_file_name()","rdoc::codeobject#parent_name()","rdoc::methodattr#parent_name()","rdoc::classmodule#parse()","rdoc::comment#parse()","rdoc::markup::parse()","rdoc::markup::parser#parse()","rdoc::markup::parser::parse()","rdoc::options#parse()","rdoc::rd::parse()","rdoc::text#parse()","rdoc::tomdoc::parse()","rdoc::parser::ruby#parse_alias()","rdoc::parser::ruby#parse_attr()","rdoc::parser::ruby#parse_attr_accessor()","rdoc::parser::ruby#parse_call_parameters()","rdoc::parser::ruby#parse_class()","rdoc::parser::ruby#parse_comment()","rdoc::parser::ruby#parse_comment_tomdoc()","rdoc::parser::ruby#parse_constant()","rdoc::rdoc#parse_dot_doc_file()","rdoc::rdoc#parse_file()","rdoc::rdoc#parse_files()","rdoc::parser::parse_files_matching()","rdoc::parser::ruby#parse_include()","rdoc::parser::ruby#parse_meta_attr()","rdoc::parser::ruby#parse_meta_method()","rdoc::parser::ruby#parse_method()","rdoc::parser::ruby#parse_method_or_yield_parameters()","rdoc::parser::ruby#parse_method_parameters()","rdoc::parser::ruby#parse_module()","rdoc::ri::driver#parse_name()","rdoc::parser::ruby#parse_require()","rdoc::parser::ruby#parse_statements()","rdoc::parser::ruby#parse_symbol_arg()","rdoc::parser::ruby#parse_symbol_in_arg()","rdoc::parser::ruby#parse_top_level_statements()","rdoc::parser::ruby#parse_visibility()","rdoc::parser::ruby#parse_yield()","rdoc::markup::tohtml#parseable?()","rdoc::classmodule#path()","rdoc::constant#path()","rdoc::methodattr#path()","rdoc::ri::paths::path()","rdoc::toplevel#path()","rdoc::parser::rubytools#peek_read()","rdoc::parser::rubytools#peek_tk()","rdoc::markup::parser#peek_token()","rdoc::stats#percent_doc()","rdoc::context::section#plain_html()","rdoc::markup::heading#plain_html()","rdoc::tokenstream#pop_token()","rdoc::markup::preprocess::post_process()","rdoc::markup::preprocess::post_processors()","rdoc::alias#pretty_name()","rdoc::methodattr#pretty_name()","rdoc::alias#pretty_new_name()","rdoc::alias#pretty_old_name()","rdoc::stats::quiet#print_alias()","rdoc::stats::quiet#print_attribute()","rdoc::stats::quiet#print_class()","rdoc::stats::quiet#print_constant()","rdoc::stats::normal#print_file()","rdoc::stats::quiet#print_file()","rdoc::stats::quiet#print_method()","rdoc::stats::quiet#print_module()","rdoc::ri::driver::process_args()","rdoc::parser::process_directive()","rdoc::markup::document#push()","rdoc::markup::list#push()","rdoc::markup::listitem#push()","rdoc::markup::raw#push()","rdoc::options#quiet()","rdoc::options#quiet=()","rdoc::ri::paths::raw_path()","rdoc::parser::c#rb_scan_args()","rdoc::rubygemshook#rdoc_installed?()","rdoc::task#rdoc_task_description()","rdoc::parser::ruby#read_directive()","rdoc::parser::ruby#read_documentation_modifiers()","rdoc::encoding::read_file()","rdoc::codeobject#record_location()","rdoc::context#record_location()","rdoc::markup::preprocess::register()","rdoc::markup::preprocess::registered()","rdoc::rubygemshook#remove()","rdoc::parser::simple#remove_coding_comment()","rdoc::parser::c#remove_commented_out_lines()","rdoc::context#remove_from_documentation?()","rdoc::context#remove_invisible()","rdoc::toplevel::remove_nodoc()","rdoc::classmodule#remove_nodoc_children()","rdoc::comment#remove_private()","rdoc::parser::simple#remove_private_comment()","rdoc::parser::ruby#remove_private_comments()","rdoc::generator::ri#remove_siginfo_handler()","rdoc::rdoc#remove_siginfo_handler()","rdoc::parser::rubytools#remove_token_listener()","rdoc::rdoc#remove_unparseable()","rdoc::generator::darkfish#render()","rdoc::generator::darkfish#render_template()","rdoc::stats#report()","rdoc::stats#report_attributes()","rdoc::stats#report_class_module()","rdoc::stats#report_constants()","rdoc::stats#report_methods()","rdoc::task#rerdoc_task_description()","rdoc::markup::preprocess::reset()","rdoc::parser::c::reset()","rdoc::parser::rubytools#reset()","rdoc::rdoc::reset()","rdoc::toplevel::reset()","rdoc::crossreference#resolve()","rdoc::context#resolve_aliases()","rdoc::rubygemshook#ri_installed?()","rdoc::markup::verbatim#ruby?()","rdoc::gauntlet#run()","rdoc::ri::driver#run()","rdoc::ri::driver::run()","rdoc::gauntlet#run_the_gauntlet()","rdoc::options#sanitize_path()","rdoc::ri::store#save_cache()","rdoc::ri::store#save_class()","rdoc::ri::store#save_method()","rdoc::parser::c#scan()","rdoc::parser::rd#scan()","rdoc::parser::ruby#scan()","rdoc::parser::simple#scan()","rdoc::classmodule#search_record()","rdoc::methodattr#search_record()","rdoc::toplevel#search_record()","rdoc::generator::jsonindex#search_string()","rdoc::context#section_contents()","rdoc::context#sections()","rdoc::methodattr#see()","rdoc::context::section#sequence()","rdoc::markup::attrspan#set_attrs()","rdoc::context#set_current_section()","rdoc::encoding::set_encoding()","rdoc::erbio#set_eoutvar()","rdoc::context#set_visibility_for()","rdoc::markup::formattertestcase#setup()","rdoc::rubygemshook#setup()","rdoc::testcase#setup()","rdoc::options#setup_generator()","rdoc::rdoc#setup_output_dir()","rdoc::ri::driver#setup_pager()","rdoc::tomdoc::signature()","rdoc::markup::parser#skip()","rdoc::parser::ruby#skip_for_variable()","rdoc::parser::ruby#skip_method()","rdoc::parser::ruby#skip_optional_do_after_expression()","rdoc::parser::rubytools#skip_tkspace()","rdoc::parser::ruby#skip_tkspace_comment()","rdoc::text#snippet()","rdoc::context#sort_sections()","rdoc::markup::attributemanager#split_into_flow()","rdoc::markup::toansi#start_accepting()","rdoc::markup::tohtml#start_accepting()","rdoc::markup::tohtmlsnippet#start_accepting()","rdoc::markup::tordoc#start_accepting()","rdoc::markup::totableofcontents#start_accepting()","rdoc::markup::tottonly#start_accepting()","rdoc::tokenstream#start_collecting_tokens()","rdoc::codeobject#start_doc()","rdoc::codeobject#stop_doc()","rdoc::text#strip_hashes()","rdoc::text#strip_newlines()","rdoc::text#strip_stars()","rdoc::stats#summary()","rdoc::classmodule#superclass()","rdoc::normalmodule#superclass()","rdoc::classmodule#superclass=()","rdoc::markup::document#table_of_contents()","rdoc::testcase#temp_dir()","rdoc::options#template_dir_for()","rdoc::generator::darkfish#template_for()","rdoc::generator::darkfish#template_result()","rdoc::markup::formattertestcase#test_accept_blank_line()","rdoc::markup::formattertestcase#test_accept_document()","rdoc::markup::formattertestcase#test_accept_heading()","rdoc::markup::formattertestcase#test_accept_heading_1()","rdoc::markup::formattertestcase#test_accept_heading_2()","rdoc::markup::formattertestcase#test_accept_heading_3()","rdoc::markup::formattertestcase#test_accept_heading_4()","rdoc::markup::formattertestcase#test_accept_heading_b()","rdoc::markup::textformattertestcase#test_accept_heading_indent()","rdoc::markup::formattertestcase#test_accept_heading_suppressed_crossref()","rdoc::markup::formattertestcase#test_accept_list_end_bullet()","rdoc::markup::formattertestcase#test_accept_list_end_label()","rdoc::markup::formattertestcase#test_accept_list_end_lalpha()","rdoc::markup::formattertestcase#test_accept_list_end_note()","rdoc::markup::formattertestcase#test_accept_list_end_number()","rdoc::markup::formattertestcase#test_accept_list_end_ualpha()","rdoc::markup::formattertestcase#test_accept_list_item_end_bullet()","rdoc::markup::formattertestcase#test_accept_list_item_end_label()","rdoc::markup::formattertestcase#test_accept_list_item_end_lalpha()","rdoc::markup::formattertestcase#test_accept_list_item_end_note()","rdoc::markup::formattertestcase#test_accept_list_item_end_number()","rdoc::markup::formattertestcase#test_accept_list_item_end_ualpha()","rdoc::markup::formattertestcase#test_accept_list_item_start_bullet()","rdoc::markup::formattertestcase#test_accept_list_item_start_label()","rdoc::markup::formattertestcase#test_accept_list_item_start_lalpha()","rdoc::markup::formattertestcase#test_accept_list_item_start_note()","rdoc::markup::formattertestcase#test_accept_list_item_start_note_2()","rdoc::markup::formattertestcase#test_accept_list_item_start_number()","rdoc::markup::formattertestcase#test_accept_list_item_start_ualpha()","rdoc::markup::formattertestcase#test_accept_list_start_bullet()","rdoc::markup::formattertestcase#test_accept_list_start_label()","rdoc::markup::formattertestcase#test_accept_list_start_lalpha()","rdoc::markup::formattertestcase#test_accept_list_start_note()","rdoc::markup::formattertestcase#test_accept_list_start_number()","rdoc::markup::formattertestcase#test_accept_list_start_ualpha()","rdoc::markup::formattertestcase#test_accept_paragraph()","rdoc::markup::formattertestcase#test_accept_paragraph_b()","rdoc::markup::formattertestcase#test_accept_paragraph_i()","rdoc::markup::textformattertestcase#test_accept_paragraph_indent()","rdoc::markup::formattertestcase#test_accept_paragraph_plus()","rdoc::markup::formattertestcase#test_accept_paragraph_star()","rdoc::markup::formattertestcase#test_accept_paragraph_underscore()","rdoc::markup::textformattertestcase#test_accept_paragraph_wrap()","rdoc::markup::formattertestcase#test_accept_raw()","rdoc::markup::formattertestcase#test_accept_rule()","rdoc::markup::textformattertestcase#test_accept_rule_indent()","rdoc::markup::formattertestcase#test_accept_verbatim()","rdoc::markup::textformattertestcase#test_accept_verbatim_big_indent()","rdoc::markup::textformattertestcase#test_accept_verbatim_indent()","rdoc::markup::textformattertestcase#test_attributes()","rdoc::markup::formattertestcase#test_end_accepting()","rdoc::markup::formattertestcase#test_list_nested()","rdoc::markup::formattertestcase#test_list_verbatim()","rdoc::markup::formattertestcase#test_start_accepting()","rdoc::markup::raw#text()","rdoc::markup::verbatim#text()","rdoc::comment#text=()","rdoc::toplevel#text?()","rdoc::generator::darkfish#time_delta_string()","rdoc::markup::heading::to_html()","rdoc::markup::tohtml#to_html()","rdoc::text#to_html()","rdoc::tokenstream::to_html()","rdoc::markup::heading::to_label()","rdoc::markup::totableofcontents::to_toc()","rdoc::parser::rubytools#token_listener()","rdoc::markup::parser#token_pos()","rdoc::tokenstream#token_stream()","rdoc::markup::parser::tokenize()","rdoc::markup::parser#tokenize()","rdoc::rubylex::tokenize()","rdoc::tomdoc#tokenize()","rdoc::tokenstream#tokens_to_s()","rdoc::comment#tomdoc?()","rdoc::context#top_level()","rdoc::require#top_level()","rdoc::markup::tohtmlsnippet#truncate()","rdoc::markup::formatter#tt?()","rdoc::markup::tottonly#tt_sections()","rdoc::classmodule#type()","rdoc::methodattr#type()","rdoc::stats#undoc_params()","rdoc::markup::parser#unget()","rdoc::parser::rubytools#unget_tk()","rdoc::toplevel::unique_classes()","rdoc::toplevel::unique_classes_and_modules()","rdoc::toplevel::unique_modules()","rdoc::markup::attributemanager#unmask_protected_sequences()","rdoc::classmodule#update_aliases()","rdoc::classmodule#update_includes()","rdoc::rdoc#update_output_dir()","rdoc::context#upgrade_to_class()","rdoc::parser::use_markup()","rdoc::markup::tordoc#use_prefix()","rdoc::options#warn()","rdoc::parser::ruby#warn()","rdoc::markup::tordoc#wrap()","rdoc::text#wrap()","rdoc::options#write_options()","rdoc::generator::darkfish#write_style_sheet()","rdoc::parser::zip?()","","","","","","","","",""],"info":[["RDoc","","RDoc.html","","<p>RDoc is a Ruby documentation system which contains RDoc::RDoc for\ngenerating documentation, RDoc::RI …\n"],["RDoc::Alias","","RDoc/Alias.html","","<p>Represent an alias, which is an old_name/new_name pair associated with a\nparticular context\n"],["RDoc::AnonClass","","RDoc/AnonClass.html","","<p>An anonymous class like:\n\n<pre>c = Class.new do end</pre>\n<p>AnonClass is currently not used.\n"],["RDoc::AnyMethod","","RDoc/AnyMethod.html","","<p>AnyMethod is the base class for objects representing methods\n"],["RDoc::Attr","","RDoc/Attr.html","","<p>An attribute created by #attr, #attr_reader, #attr_writer or #attr_accessor\n"],["RDoc::ClassModule","","RDoc/ClassModule.html","","<p>ClassModule is the base class for objects representing either a class or a\nmodule.\n"],["RDoc::CodeObject","","RDoc/CodeObject.html","","<p>Base class for the RDoc code tree.\n<p>We contain the common stuff for contexts (which are containers) and …\n"],["RDoc::Comment","","RDoc/Comment.html","","<p>A comment holds the text comment for a RDoc::CodeObject and provides a\nunified way of cleaning it up …\n"],["RDoc::Constant","","RDoc/Constant.html","","<p>A constant\n"],["RDoc::Context","","RDoc/Context.html","","<p>A Context is something that can hold modules, classes, methods, attributes,\naliases, requires, and includes. …\n"],["RDoc::Context::Section","","RDoc/Context/Section.html","","<p>A section of documentation like:\n\n<pre># :section: The title\n# The body</pre>\n<p>Sections can be referenced multiple times …\n"],["RDoc::CrossReference","","RDoc/CrossReference.html","","<p>RDoc::CrossReference is a reusable way to create cross references for\nnames.\n"],["RDoc::ERBIO","","RDoc/ERBIO.html","","<p>A subclass of ERB that writes directly to an IO.  Credit to Aaron Patterson\nand Masatoshi SEKI.\n<p>To use: …\n"],["RDoc::Encoding","","RDoc/Encoding.html","","<p>This class is a wrapper around File IO and Encoding that helps RDoc load\nfiles and convert them to the …\n"],["RDoc::Error","","RDoc/Error.html","","<p>Exception thrown by any rdoc error.\n"],["RDoc::Gauntlet","","RDoc/Gauntlet.html","","<p>Allows for testing of RDoc against every gem\n"],["RDoc::Generator","","RDoc/Generator.html","","<p>RDoc uses generators to turn parsed source code in the form of an\nRDoc::CodeObject tree into some form …\n"],["RDoc::Generator::Darkfish","","RDoc/Generator/Darkfish.html","","<p>Darkfish RDoc HTML Generator\n<p>$Id: darkfish.rb 52 2009-01-07 02:08:11Z deveiant $\n<p>Author/s\n"],["RDoc::Generator::JsonIndex","","RDoc/Generator/JsonIndex.html","","<p>The JsonIndex generator is designed to complement an HTML generator and\nproduces a JSON search index. …\n"],["RDoc::Generator::Markup","","RDoc/Generator/Markup.html","","<p>Handle common RDoc::Markup tasks for various CodeObjects\n<p>This module is loaded by generators.  It allows …\n"],["RDoc::Generator::RI","","RDoc/Generator/RI.html","","<p>Generates ri data files\n"],["RDoc::GhostMethod","","RDoc/GhostMethod.html","","<p>GhostMethod represents a method referenced only by a comment\n"],["RDoc::Include","","RDoc/Include.html","","<p>A Module include in a class with #include\n"],["RDoc::Markup","","RDoc/Markup.html","","<p>RDoc::Markup parses plain text documents and attempts to decompose them\ninto their constituent parts. …\n"],["RDoc::Markup::AttrChanger","","RDoc/Markup/AttrChanger.html","","<p>An AttrChanger records a change in attributes. It contains a bitmap of the\nattributes to turn on, and …\n"],["RDoc::Markup::AttrSpan","","RDoc/Markup/AttrSpan.html","","<p>An array of attributes which parallels the characters in a string.\n"],["RDoc::Markup::Attribute","","RDoc/Markup/Attribute.html","","<p>We manage a set of attributes. Each attribute has a symbol name and a bit\nvalue.\n"],["RDoc::Markup::AttributeManager","","RDoc/Markup/AttributeManager.html","","<p>Manages changes of attributes in a block of text\n"],["RDoc::Markup::BlankLine","","RDoc/Markup/BlankLine.html","","<p>An empty line.  This class is a singleton.\n"],["RDoc::Markup::Document","","RDoc/Markup/Document.html","","<p>A Document containing lists, headings, paragraphs, etc.\n"],["RDoc::Markup::Formatter","","RDoc/Markup/Formatter.html","","<p>Base class for RDoc markup formatters\n<p>Formatters are a visitor that converts an RDoc::Markup tree (from …\n"],["RDoc::Markup::FormatterTestCase","","RDoc/Markup/FormatterTestCase.html","","<p>Test case for creating new RDoc::Markup formatters.  See\ntest/test_rdoc_markup_to_*.rb for examples. …\n"],["RDoc::Markup::Heading","","RDoc/Markup/Heading.html","","<p>A heading with a level (1-6) and text\n"],["RDoc::Markup::Include","","RDoc/Markup/Include.html","","<p>A file included at generation time.  Objects of this class are created by\nRDoc::RD for an extension-less …\n"],["RDoc::Markup::IndentedParagraph","","RDoc/Markup/IndentedParagraph.html","","<p>An Indented Paragraph of text\n"],["RDoc::Markup::List","","RDoc/Markup/List.html","","<p>A List of ListItems\n"],["RDoc::Markup::ListItem","","RDoc/Markup/ListItem.html","","<p>An item within a List that contains paragraphs, headings, etc.\n"],["RDoc::Markup::Paragraph","","RDoc/Markup/Paragraph.html","","<p>A Paragraph of text\n"],["RDoc::Markup::Parser","","RDoc/Markup/Parser.html","","<p>A recursive-descent parser for RDoc markup.\n<p>The parser tokenizes an input string then parses the tokens …\n"],["RDoc::Markup::Parser::Error","","RDoc/Markup/Parser/Error.html","","<p>Parser error subclass\n"],["RDoc::Markup::Parser::ParseError","","RDoc/Markup/Parser/ParseError.html","","<p>Raised when the parser is unable to handle the given markup\n"],["RDoc::Markup::PreProcess","","RDoc/Markup/PreProcess.html","","<p>Handle common directives that can occur in a block of text:\n\n<pre>:include: filename</pre>\n<p>Directives can be escaped …\n"],["RDoc::Markup::Raw","","RDoc/Markup/Raw.html","","<p>A section of text that is added to the output document as-is\n"],["RDoc::Markup::Rule","","RDoc/Markup/Rule.html","","<p>A horizontal rule with a weight\n"],["RDoc::Markup::Special","","RDoc/Markup/Special.html","","<p>Hold details of a special sequence\n"],["RDoc::Markup::TextFormatterTestCase","","RDoc/Markup/TextFormatterTestCase.html","","<p>Test case for creating new plain-text RDoc::Markup formatters.  See also\nRDoc::Markup::FormatterTestCase …\n"],["RDoc::Markup::ToAnsi","","RDoc/Markup/ToAnsi.html","","<p>Outputs RDoc markup with vibrant ANSI color!\n"],["RDoc::Markup::ToBs","","RDoc/Markup/ToBs.html","","<p>Outputs RDoc markup with hot backspace action!  You will probably need a\npager to use this output format. …\n"],["RDoc::Markup::ToHtml","","RDoc/Markup/ToHtml.html","","<p>Outputs RDoc markup as HTML.\n"],["RDoc::Markup::ToHtmlCrossref","","RDoc/Markup/ToHtmlCrossref.html","","<p>Subclass of the RDoc::Markup::ToHtml class that supports looking up method\nnames, classes, etc to create …\n"],["RDoc::Markup::ToHtmlSnippet","","RDoc/Markup/ToHtmlSnippet.html","","<p>Outputs RDoc markup as paragraphs with inline markup only.\n"],["RDoc::Markup::ToLabel","","RDoc/Markup/ToLabel.html","","<p>Creates HTML-safe labels suitable for use in id attributes.  Tidylinks are\nconverted to their link part …\n"],["RDoc::Markup::ToRdoc","","RDoc/Markup/ToRdoc.html","","<p>Outputs RDoc markup as RDoc markup! (mostly)\n"],["RDoc::Markup::ToTableOfContents","","RDoc/Markup/ToTableOfContents.html","","<p>Extracts just the RDoc::Markup::Heading elements from a\nRDoc::Markup::Document to help build a table …\n"],["RDoc::Markup::ToTest","","RDoc/Markup/ToTest.html","","<p>This Markup outputter is used for testing purposes.\n"],["RDoc::Markup::ToTtOnly","","RDoc/Markup/ToTtOnly.html","","<p>Extracts sections of text enclosed in plus, tt or code.  Used to discover\nundocumented parameters.\n"],["RDoc::Markup::Verbatim","","RDoc/Markup/Verbatim.html","","<p>A section of verbatim text\n"],["RDoc::MetaMethod","","RDoc/MetaMethod.html","","<p>MetaMethod represents a meta-programmed method\n"],["RDoc::MethodAttr","","RDoc/MethodAttr.html","","<p>Abstract class representing either a method or an attribute.\n"],["RDoc::NormalClass","","RDoc/NormalClass.html","","<p>A normal class, neither singleton nor anonymous\n"],["RDoc::NormalModule","","RDoc/NormalModule.html","","<p>A normal module, like NormalClass\n"],["RDoc::Options","","RDoc/Options.html","","<p>RDoc::Options handles the parsing and storage of options\n<p>Saved Options\n<p>You can save some options like the …\n"],["RDoc::Parser","","RDoc/Parser.html","","<p>A parser is simple a class that subclasses RDoc::Parser and implements\n#scan to fill in an RDoc::TopLevel …\n"],["RDoc::Parser::C","","RDoc/Parser/C.html","","<p>RDoc::Parser::C attempts to parse C extension files.  It looks for the\nstandard patterns that you find …\n"],["RDoc::Parser::RD","","RDoc/Parser/RD.html","","<p>Parse a RD format file.  The parsed RDoc::Markup::Document is attached as a\nfile comment.\n"],["RDoc::Parser::Ruby","","RDoc/Parser/Ruby.html","","<p>Extracts code elements from a source file returning a TopLevel object\ncontaining the constituent file …\n"],["RDoc::Parser::RubyTools","","RDoc/Parser/RubyTools.html","","<p>Collection of methods for writing parsers against RDoc::RubyLex and\nRDoc::RubyToken\n"],["RDoc::Parser::Simple","","RDoc/Parser/Simple.html","","<p>Parse a non-source file. We basically take the whole thing as one big\ncomment.\n"],["RDoc::Parser::Text","","RDoc/Parser/Text.html","","<p>Indicates this parser is text and doesn’t contain code constructs.\n<p>Include this module in a RDoc::Parser …\n"],["RDoc::RD","","RDoc/RD.html","","<p>RDoc::RD implements the RD format from the rdtool gem.\n<p>LICENSE\n<p>The grammar that produces RDoc::RD::BlockParser …\n"],["RDoc::RD::Inline","","RDoc/RD/Inline.html","","<p>Inline keeps track of markup and labels to create proper links.\n"],["RDoc::RDoc","","RDoc/RDoc.html","","<p>This is the driver for generating RDoc output.  It file parsing and\ngeneration of output.\n<p>To use this …\n"],["RDoc::RI","","RDoc/RI.html","","<p>Namespace for the ri command line tool’s implementation.\n<p>See <code>ri --help</code> for details.\n"],["RDoc::RI::Driver","","RDoc/RI/Driver.html","","<p>The RI driver implements the command-line ri tool.\n<p>The driver supports:\n<p>loading RI data from:\n"],["RDoc::RI::Driver::Error","","RDoc/RI/Driver/Error.html","","<p>Base Driver error class\n"],["RDoc::RI::Driver::NotFoundError","","RDoc/RI/Driver/NotFoundError.html","","<p>Raised when a name isn’t found in the ri data stores\n"],["RDoc::RI::Error","","RDoc/RI/Error.html","","<p>Base RI error class\n"],["RDoc::RI::Paths","","RDoc/RI/Paths.html","","<p>The directories where ri data lives.\n"],["RDoc::RI::Store","","RDoc/RI/Store.html","","<p>A set of ri data.\n<p>The store manages reading and writing ri data for a project (gem, path,\netc.) and maintains …\n"],["RDoc::Require","","RDoc/Require.html","","<p>A file loaded by #require\n"],["RDoc::RubyLex","","RDoc/RubyLex.html","","<p>Ruby lexer adapted from irb.\n<p>The internals are not documented because they are scary.\n"],["RDoc::RubyLex::Error","","RDoc/RubyLex/Error.html","","<p>Raised upon invalid input\n"],["RDoc::RubyToken","","RDoc/RubyToken.html","","<p>Definitions of all tokens involved in the lexical analysis.\n<p>This class is not documented because it is …\n"],["RDoc::RubyToken::TkError","","RDoc/RubyToken/TkError.html","",""],["RDoc::RubyToken::TkId","","RDoc/RubyToken/TkId.html","",""],["RDoc::RubyToken::TkKW","","RDoc/RubyToken/TkKW.html","",""],["RDoc::RubyToken::TkNode","","RDoc/RubyToken/TkNode.html","",""],["RDoc::RubyToken::TkOPASGN","","RDoc/RubyToken/TkOPASGN.html","",""],["RDoc::RubyToken::TkOp","","RDoc/RubyToken/TkOp.html","",""],["RDoc::RubyToken::TkSYMBOL","","RDoc/RubyToken/TkSYMBOL.html","",""],["RDoc::RubyToken::TkUnknownChar","","RDoc/RubyToken/TkUnknownChar.html","",""],["RDoc::RubyToken::TkVal","","RDoc/RubyToken/TkVal.html","",""],["RDoc::RubyToken::Token","","RDoc/RubyToken/Token.html","",""],["RDoc::RubygemsHook","","RDoc/RubygemsHook.html","","<p>Gem::RDoc provides methods to generate RDoc and ri data for installed gems\nupon gem installation.\n<p>This …\n"],["RDoc::SingleClass","","RDoc/SingleClass.html","","<p>A singleton class\n"],["RDoc::Stats","","RDoc/Stats.html","","<p>RDoc statistics collector which prints a summary and report of a project’s\ndocumentation totals.\n"],["RDoc::Stats::Normal","","RDoc/Stats/Normal.html","","<p>Stats printer that prints just the files being documented with a progress\nbar\n"],["RDoc::Stats::Quiet","","RDoc/Stats/Quiet.html","","<p>Stats printer that prints nothing\n"],["RDoc::Stats::Verbose","","RDoc/Stats/Verbose.html","","<p>Stats printer that prints everything documented, including the documented\nstatus\n"],["RDoc::Task","","RDoc/Task.html","","<p>RDoc::Task creates the following rake tasks to generate and clean up RDoc\noutput:\n<p>rdoc &mdash; Main task for this …\n"],["RDoc::TestCase","","RDoc/TestCase.html","","<p>RDoc::TestCase is an abstract TestCase to provide common setup and teardown\nacross all RDoc tests.   …\n"],["RDoc::Text","","RDoc/Text.html","","<p>Methods for manipulating comment text\n"],["RDoc::TokenStream","","RDoc/TokenStream.html","","<p>A TokenStream is a list of tokens, gathered during the parse of some entity\n(say a method). Entities …\n"],["RDoc::TomDoc","","RDoc/TomDoc.html","","<p>A parser for TomDoc based on TomDoc 1.0.0-rc1 (02adef9b5a)\n<p>The TomDoc specification can be found at:\n<p>tomdoc.org …\n"],["RDoc::TopLevel","","RDoc/TopLevel.html","","<p>A TopLevel context is a representation of the contents of a single file\n"],["Rake","","Rake.html","",""],["<<","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-3C-3C","(part)","<p>Appends <code>part</code> to the document\n"],["<<","RDoc::Markup::List","RDoc/Markup/List.html#method-i-3C-3C","(item)","<p>Appends <code>item</code> to the list\n"],["<<","RDoc::Markup::ListItem","RDoc/Markup/ListItem.html#method-i-3C-3C","(part)","<p>Appends <code>part</code> to the ListItem\n"],["<<","RDoc::Markup::Raw","RDoc/Markup/Raw.html#method-i-3C-3C","(text)","<p>Appends <code>text</code>\n"],["<=>","RDoc::Alias","RDoc/Alias.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #new_name\n"],["<=>","RDoc::Constant","RDoc/Constant.html#method-i-3C-3D-3E","(other)","<p>Constants are ordered by name\n"],["<=>","RDoc::Context","RDoc/Context.html#method-i-3C-3D-3E","(other)","<p>Contexts are sorted by full_name\n"],["<=>","RDoc::Include","RDoc/Include.html#method-i-3C-3D-3E","(other)","<p>Includes are sorted by name\n"],["<=>","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #name\n"],["==","RDoc::Attr","RDoc/Attr.html#method-i-3D-3D","(other)","<p>Attributes are equal when their names, singleton and rw are identical\n"],["==","RDoc::Constant","RDoc/Constant.html#method-i-3D-3D","(other)","<p>Constants are equal when their #parent and #name is the same\n"],["==","RDoc::Context::Section","RDoc/Context/Section.html#method-i-3D-3D","(other)","<p>Sections are equal when they have the same #title\n"],["==","RDoc::Markup::Special","RDoc/Markup/Special.html#method-i-3D-3D","(o)","<p>Specials are equal when the have the same text and type\n"],["==","RDoc::TopLevel","RDoc/TopLevel.html#method-i-3D-3D","(other)","<p>An RDoc::TopLevel is equal to another with the same absolute_name\n"],["[]","RDoc::Markup::AttrSpan","RDoc/Markup/AttrSpan.html#method-i-5B-5D","(n)","<p>Accesses flags for character <code>n</code>\n"],["accept","RDoc::Markup::BlankLine","RDoc/Markup/BlankLine.html#method-i-accept","(visitor)","<p>Calls #accept_blank_line on <code>visitor</code>\n"],["accept","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-accept","(visitor)","<p>Runs this document and all its #items through <code>visitor</code>\n"],["accept","RDoc::Markup::Heading","RDoc/Markup/Heading.html#method-i-accept","(visitor)","<p>Calls #accept_heading on <code>visitor</code>\n"],["accept","RDoc::Markup::IndentedParagraph","RDoc/Markup/IndentedParagraph.html#method-i-accept","(visitor)","<p>Calls #accept_indented_paragraph on <code>visitor</code>\n"],["accept","RDoc::Markup::List","RDoc/Markup/List.html#method-i-accept","(visitor)","<p>Runs this list and all its #items through <code>visitor</code>\n"],["accept","RDoc::Markup::ListItem","RDoc/Markup/ListItem.html#method-i-accept","(visitor)","<p>Runs this list item and all its #parts through <code>visitor</code>\n"],["accept","RDoc::Markup::Paragraph","RDoc/Markup/Paragraph.html#method-i-accept","(visitor)","<p>Calls #accept_paragraph on <code>visitor</code>\n"],["accept","RDoc::Markup::Raw","RDoc/Markup/Raw.html#method-i-accept","(visitor)","<p>Calls #accept_raw+ on <code>visitor</code>\n"],["accept","RDoc::Markup::Rule","RDoc/Markup/Rule.html#method-i-accept","(visitor)","<p>Calls #accept_rule on <code>visitor</code>\n"],["accept","RDoc::Markup::Verbatim","RDoc/Markup/Verbatim.html#method-i-accept","(visitor)","<p>Calls #accept_verbatim on <code>visitor</code>\n"],["accept_blank_line","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_blank_line","(blank_line)","<p>Adds <code>blank_line</code> to the output\n"],["accept_blank_line","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_blank_line","(blank_line)","<p>Adds <code>blank_line</code> to the output\n"],["accept_blank_line","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_blank_line","(markup_item)",""],["accept_document","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-accept_document","(document)","<p>Adds <code>document</code> to the output\n"],["accept_heading","RDoc::Markup::ToBs","RDoc/Markup/ToBs.html#method-i-accept_heading","(heading)","<p>Makes heading text bold.\n"],["accept_heading","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the output.  The headings greater than 6 are\ntrimmed to level 6.\n"],["accept_heading","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the output as a paragraph\n"],["accept_heading","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the output\n"],["accept_heading","RDoc::Markup::ToTableOfContents","RDoc/Markup/ToTableOfContents.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the table of contents\n"],["accept_heading","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_heading","(markup_item)",""],["accept_indented_paragraph","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_indented_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_list_end","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_list_end","(list)","<p>Finishes consumption of <code>list</code>\n"],["accept_list_end","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_list_end","(list)","<p>Finishes consumption of <code>list</code>\n"],["accept_list_end","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_list_end","(list)","<p>Pops the list type for <code>list</code> from #list_type\n"],["accept_list_item_end","RDoc::Markup::ToAnsi","RDoc/Markup/ToAnsi.html#method-i-accept_list_item_end","(list_item)","<p>Overrides indent width to ensure output lines up correctly.\n"],["accept_list_item_end","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_list_item_end","(markup_item)",""],["accept_list_item_start","RDoc::Markup::ToAnsi","RDoc/Markup/ToAnsi.html#method-i-accept_list_item_start","(list_item)","<p>Adds coloring to note and label list items\n"],["accept_list_item_start","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_start","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_list_start","(list)","<p>Pushes the list type for <code>list</code> onto #list_type\n"],["accept_paragraph","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_paragraph","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-accept_paragraph","(paragraph)",""],["accept_paragraph","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_paragraph","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_raw","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_raw","(raw)","<p>Adds <code>raw</code> to the output\n"],["accept_raw","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_raw","(raw)","<p>Adds <code>raw</code> to the output\n"],["accept_raw","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_raw","(markup_item)",""],["accept_rule","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_rule","(rule)","<p>Adds <code>rule</code> to the output\n"],["accept_rule","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_rule","(rule)","<p>Adds <code>rule</code> to the output\n"],["accept_rule","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_rule","(markup_item)",""],["accept_verbatim","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_verbatim","(verbatim)","<p>Adds <code>verbatim</code> to the output\n"],["accept_verbatim","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-accept_verbatim","(verbatim)","<p>Adds <code>verbatim</code> to the output\n"],["accept_verbatim","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_verbatim","(verbatim)","<p>Outputs <code>verbatim</code> indented 2 columns\n"],["accept_verbatim","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_verbatim","(markup_item)",""],["add_alias","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-add_alias","(an_alias, context = nil)","<p>Adds <code>an_alias</code> as an alias for this method in\n<code>context</code>.\n"],["add_alias","RDoc::Attr","RDoc/Attr.html#method-i-add_alias","(an_alias, context)","<p>Add <code>an_alias</code> as an attribute in <code>context</code>.\n"],["add_alias","RDoc::Context","RDoc/Context.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> that is automatically resolved\n"],["add_alias","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-add_alias","(an_alias, context)","<p>Abstract method. Contexts in their building phase call this to register a\nnew alias for this known method/attribute. …\n"],["add_alias","RDoc::Stats","RDoc/Stats.html#method-i-add_alias","(as)","<p>Records the parsing of an alias <code>as</code>.\n"],["add_alias","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_also_in","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_also_in","(out, also_in)","<p>Adds paths for undocumented classes <code>also_in</code> to\n<code>out</code>\n"],["add_attribute","RDoc::Context","RDoc/Context.html#method-i-add_attribute","(attribute)","<p>Adds <code>attribute</code> if not already there. If it is (as method(s) or\nattribute), updates the comment if it …\n"],["add_attribute","RDoc::Stats","RDoc/Stats.html#method-i-add_attribute","(attribute)","<p>Records the parsing of an attribute <code>attribute</code>\n"],["add_class","RDoc::Context","RDoc/Context.html#method-i-add_class","(class_type, given_name, superclass = '::Object')","<p>Adds a class named <code>given_name</code> with <code>superclass</code>.\n<p>Both <code>given_name</code> and <code>superclass</code> may contain ‘::’,\nand are …\n"],["add_class","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_class","(out, name, classes)","<p>Adds a class header to <code>out</code> for class <code>name</code> which\nis described in <code>classes</code>.\n"],["add_class","RDoc::Stats","RDoc/Stats.html#method-i-add_class","(klass)","<p>Records the parsing of a class <code>klass</code>\n"],["add_class_or_module","RDoc::Context","RDoc/Context.html#method-i-add_class_or_module","(mod, self_hash, all_hash)","<p>Adds the class or module <code>mod</code> to the modules or classes Hash\n<code>self_hash</code>, and to <code>all_hash</code> (either\n<code>TopLevel::modules_hash</code> …\n"],["add_comment","RDoc::ClassModule","RDoc/ClassModule.html#method-i-add_comment","(comment, location)","<p>Adds <code>comment</code> to this ClassModule’s list of comments at\n<code>location</code>.  This method is preferred over #comment= …\n"],["add_constant","RDoc::Context","RDoc/Context.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> if not already there. If it is, updates the\ncomment, value and/or is_alias_for of the known …\n"],["add_constant","RDoc::Stats","RDoc/Stats.html#method-i-add_constant","(constant)","<p>Records the parsing of <code>constant</code>\n"],["add_constant","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_file","RDoc::Stats","RDoc/Stats.html#method-i-add_file","(file)","<p>Records the parsing of <code>file</code>\n"],["add_from","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_from","(out, store)","<p>Adds “(from …)” to <code>out</code> for <code>store</code>\n"],["add_generator","RDoc::RDoc","RDoc/RDoc.html#method-c-add_generator","(klass)","<p>Add <code>klass</code> that can generate output after parsing\n"],["add_html","RDoc::Markup","RDoc/Markup.html#method-i-add_html","(tag, name)","<p>Add to the sequences recognized as general markup.\n"],["add_html","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-add_html","(tag, name)","<p>Adds a markup class with <code>name</code> for words surrounded by HTML tag\n<code>tag</code>. To process emphasis tags:\n\n<pre>am.add_html ...</pre>\n"],["add_include","RDoc::Context","RDoc/Context.html#method-i-add_include","(include)","<p>Adds included module <code>include</code> which should be an RDoc::Include\n"],["add_include","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_include","(include)","<p>Adds <code>include</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_includes","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_includes","(out, includes)","<p>Adds <code>includes</code> to <code>out</code>\n"],["add_line_numbers","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-add_line_numbers","(src)","<p>Prepend <code>src</code> with line numbers.  Relies on the first line of a\nsource code listing having:\n\n<pre># File xxxxx, ...</pre>\n"],["add_method","RDoc::Context","RDoc/Context.html#method-i-add_method","(method)","<p>Adds <code>method</code> if not already there. If it is (as method or\nattribute), updates the comment if it was empty. …\n"],["add_method","RDoc::Stats","RDoc/Stats.html#method-i-add_method","(method)","<p>Records the parsing of <code>method</code>\n"],["add_method","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_method","(method)","<p>Adds <code>method</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_method_list","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_method_list","(out, methods, name)","<p>Adds a list of <code>methods</code> to <code>out</code> with a heading of\n<code>name</code>\n"],["add_module","RDoc::Context","RDoc/Context.html#method-i-add_module","(class_type, name)","<p>Adds a module named <code>name</code>.  If RDoc already knows\n<code>name</code> is a class then that class is returned instead. …\n"],["add_module","RDoc::Stats","RDoc/Stats.html#method-i-add_module","(mod)","<p>Records the parsing of a module <code>mod</code>\n"],["add_module_alias","RDoc::Context","RDoc/Context.html#method-i-add_module_alias","(from, name, file)","<p>Adds an alias from <code>from</code> (a class or module) to\n<code>name</code> which was defined in <code>file</code>.\n"],["add_paragraph","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-add_paragraph","()","<p>Throws <code>:done</code> when paragraph_limit paragraphs have been\nencountered\n"],["add_require","RDoc::Context","RDoc/Context.html#method-i-add_require","(require)","<p>Adds <code>require</code> to this context’s top level\n"],["add_section","RDoc::Context","RDoc/Context.html#method-i-add_section","(title, comment = nil)","<p>Returns a section with <code>title</code>, creating it if it doesn’t\nalready exist. <code>comment</code> will be appended to the …\n"],["add_special","RDoc::Markup","RDoc/Markup.html#method-i-add_special","(pattern, name)","<p>Add to other inline sequences.  For example, we could add WikiWords using\nsomething like:\n\n<pre>parser.add_special(/\\b([A-Z][a-z]+[A-Z]\\w+)/, ...</pre>\n"],["add_special","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-add_special","(pattern, name)","<p>Adds a special handler for <code>pattern</code> with <code>name</code>.  A\nsimple URL handler would be:\n\n<pre>@am.add_special(/((https?:)\\S+\\w)/, ...</pre>\n"],["add_tag","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-add_tag","(name, start, stop)","<p>Add a new set of tags for an attribute. We allow separate start and end\ntags for flexibility\n"],["add_text_tests","RDoc::Markup::TextFormatterTestCase","RDoc/Markup/TextFormatterTestCase.html#method-c-add_text_tests","()","<p>Adds test cases to the calling TestCase.\n"],["add_to","RDoc::Context","RDoc/Context.html#method-i-add_to","(array, thing)","<p>Adds <code>thing</code> to the collection <code>array</code>\n"],["add_to_classes_or_modules","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_to_classes_or_modules","(mod)","<p>Adds class or module <code>mod</code>. Used in the building phase by the\nruby parser.\n"],["add_token","RDoc::TokenStream","RDoc/TokenStream.html#method-i-add_token","(*tokens)",""],["add_token_listener","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-add_token_listener","(obj)","<p>Adds a token listener <code>obj</code>, but you should probably use\ntoken_listener\n"],["add_tokens","RDoc::TokenStream","RDoc/TokenStream.html#method-i-add_tokens","(*tokens)","<p>Adds <code>tokens</code> to the collected tokens\n"],["add_visitor_tests","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-c-add_visitor_tests","()","<p>Call to add the visitor tests to your test case\n"],["add_word_pair","RDoc::Markup","RDoc/Markup.html#method-i-add_word_pair","(start, stop, name)","<p>Add to the sequences used to add formatting to an individual word (such as\n<strong>bold</strong>).  Matching entries will …\n"],["add_word_pair","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-add_word_pair","(start, stop, name)","<p>Adds a markup class with <code>name</code> for words wrapped in the\n<code>start</code> and <code>stop</code> character.  To make words wrapped\n…\n"],["alias_extension","RDoc::Parser","RDoc/Parser.html#method-c-alias_extension","(old_ext, new_ext)","<p>Alias an extension to another extension. After this call, files ending\n“new_ext” will be parsed …\n"],["all_classes","RDoc::TopLevel","RDoc/TopLevel.html#method-c-all_classes","()","<p>Returns all classes discovered by RDoc\n"],["all_classes_and_modules","RDoc::TopLevel","RDoc/TopLevel.html#method-c-all_classes_and_modules","()","<p>Returns all classes and modules discovered by RDoc\n"],["all_classes_hash","RDoc::TopLevel","RDoc/TopLevel.html#method-c-all_classes_hash","()","<p>Hash of all classes known to RDoc\n"],["all_files","RDoc::TopLevel","RDoc/TopLevel.html#method-c-all_files","()","<p>All TopLevels known to RDoc\n"],["all_files_hash","RDoc::TopLevel","RDoc/TopLevel.html#method-c-all_files_hash","()","<p>Hash of all files known to RDoc\n"],["all_modules","RDoc::TopLevel","RDoc/TopLevel.html#method-c-all_modules","()","<p>Returns all modules discovered by RDoc\n"],["all_modules_hash","RDoc::TopLevel","RDoc/TopLevel.html#method-c-all_modules_hash","()","<p>Hash of all modules known to RDoc\n"],["ancestors","RDoc::ClassModule","RDoc/ClassModule.html#method-i-ancestors","()","<p>Ancestors list for this ClassModule: the list of included modules (classes\nwill add their superclass …\n"],["ancestors","RDoc::NormalClass","RDoc/NormalClass.html#method-i-ancestors","()","<p>Appends the superclass, if any, to the included modules.\n"],["ancestors","RDoc::RI::Store","RDoc/RI/Store.html#method-i-ancestors","()","<p>Ancestors cache accessor.  Maps a klass name to an Array of its ancestors\nin this store.  If Foo in this …\n"],["ancestors","RDoc::SingleClass","RDoc/SingleClass.html#method-i-ancestors","()","<p>Adds the superclass to the included modules.\n"],["ancestors_of","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-ancestors_of","(klass)","<p>Returns ancestor classes of <code>klass</code>\n"],["annotate","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-annotate","(tag)","<p>Allows <code>tag</code> to be decorated with additional information.\n"],["annotate","RDoc::Markup::ToBs","RDoc/Markup/ToBs.html#method-i-annotate","(tag)","<p>Turns on or off special handling for <code>convert_string</code>\n"],["any_content","RDoc::Context","RDoc/Context.html#method-i-any_content","(includes = true)","<p>Is there any content?\n<p>This means any of: comment, aliases, methods, attributes, external aliases,\nrequire, …\n"],["append","RDoc::RD::Inline","RDoc/RD/Inline.html#method-i-append","(more)","<p>Appends <code>more</code> to this inline.  <code>more</code> may be a\nString or another Inline.\n"],["aref","RDoc::Alias","RDoc/Alias.html#method-i-aref","()","<p>HTML fragment reference for this alias\n"],["aref","RDoc::Context::Section","RDoc/Context/Section.html#method-i-aref","()","<p>Anchor reference for linking to this section\n"],["aref","RDoc::Markup::Heading","RDoc/Markup/Heading.html#method-i-aref","()","<p>An HTML-safe anchor reference for this header.\n"],["aref","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-aref","()","<p>HTML fragment reference for this method\n"],["aref_prefix","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code> is ‘method’.\n"],["aref_prefix","RDoc::Attr","RDoc/Attr.html#method-i-aref_prefix","()","<p>The #aref prefix for attributes\n"],["aref_prefix","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code>, defined by subclasses.\n"],["aref_to","RDoc::Generator::Markup","RDoc/Generator/Markup.html#method-i-aref_to","(target_path)","<p>Generates a relative URL from this object’s path to\n<code>target_path</code>\n"],["arglists","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-arglists","()","<p>The call_seq or the param_seq with method name, if there is no call_seq.\n<p>Use this for displaying a method’s …\n"],["as_href","RDoc::Generator::Markup","RDoc/Generator/Markup.html#method-i-as_href","(from_path)","<p>Generates a relative URL from <code>from_path</code> to this object’s path\n"],["as_string","RDoc::Markup::Attribute","RDoc/Markup/Attribute.html#method-c-as_string","(bitmap)","<p>Returns a string representation of <code>bitmap</code>\n"],["assemble_template","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-assemble_template","(body_file)","<p>Creates a template from its components and the <code>body_file</code>.\n<p>For backwards compatibility, if <code>body_file</code> contains …\n"],["attribute","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-attribute","(turn_on, turn_off)","<p>Return an attribute object with the given turn_on and turn_off bits set\n"],["attributes","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-attributes","(text)","<p>Applies attribute-specific markup to <code>text</code> using\nRDoc::AttributeManager\n"],["attributes","RDoc::RI::Store","RDoc/RI/Store.html#method-i-attributes","()","<p>Attributes cache accessor.  Maps a class to an Array of its attributes.\n"],["base_name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-base_name","()","<p>Base name of this file\n"],["before_running_rdoc","RDoc::Task","RDoc/Task.html#method-i-before_running_rdoc","(&block)","<p>The block passed to this method will be called just before running the RDoc\ngenerator. It is allowed …\n"],["begin_adding","RDoc::Stats","RDoc/Stats.html#method-i-begin_adding","()","<p>Call this to mark the beginning of parsing for display purposes\n"],["begin_adding","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-begin_adding","(*)","<p>Prints a message at the beginning of parsing\n"],["binary?","RDoc::Parser","RDoc/Parser.html#method-c-binary-3F","(file)","<p>Determines if the file is a “binary” file which basically means it has\ncontent that an RDoc …\n"],["bitmap_for","RDoc::Markup::Attribute","RDoc/Markup/Attribute.html#method-c-bitmap_for","(name)","<p>Returns a unique bit for <code>name</code>\n"],["block_params=","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-block_params-3D","(value)","<p>Attempts to sanitize the content passed by the ruby parser: remove outer\nparentheses, etc.\n"],["build_heading","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-build_heading","(level)","<p>Builds a Heading of <code>level</code>\n"],["build_heading","RDoc::TomDoc","RDoc/TomDoc.html#method-i-build_heading","(level)","<p>Builds a heading from the token stream\n<p>level &mdash; The level of heading to create\n\n<p>Returns an RDoc::Markup::Heading …\n"],["build_list","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-build_list","(margin)","<p>Builds a List flush to <code>margin</code>\n"],["build_paragraph","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-build_paragraph","(margin)","<p>Builds a Paragraph that is flush to <code>margin</code>\n"],["build_paragraph","RDoc::TomDoc","RDoc/TomDoc.html#method-i-build_paragraph","(margin)","<p>Builds a paragraph from the token stream\n<p>margin &mdash; Unused\n\n<p>Returns an RDoc::Markup::Paragraph.\n"],["build_verbatim","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-build_verbatim","(margin)","<p>Builds a Verbatim that is indented from <code>margin</code>.\n<p>The verbatim block is shifted left (the least indented …\n"],["build_verbatim","RDoc::TomDoc","RDoc/TomDoc.html#method-i-build_verbatim","(margin)","<p>Builds a verbatim from the token stream.  A verbatim in the Examples\nsection will be marked as in ruby …\n"],["cache_path","RDoc::RI::Store","RDoc/RI/Store.html#method-i-cache_path","()","<p>Path to the cache file\n"],["calculate","RDoc::Stats","RDoc/Stats.html#method-i-calculate","()","<p>Calculates documentation totals and percentages for classes, modules,\nconstants, attributes and methods. …\n"],["can_parse","RDoc::Parser","RDoc/Parser.html#method-c-can_parse","(file_name)","<p>Return a parser that can handle a particular extension\n"],["change_attribute","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-change_attribute","(current, new)","<p>Changes the current attribute from <code>current</code> to <code>new</code>\n"],["changed_attribute_by_name","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-changed_attribute_by_name","(current_set, new_set)","<p>Used by the tests to change attributes by name from\n<code>current_set</code> to <code>new_set</code>\n"],["check_files","RDoc::Options","RDoc/Options.html#method-i-check_files","()","<p>Check that the files on the command line exist\n"],["check_generator","RDoc::Options","RDoc/Options.html#method-i-check_generator","()","<p>Ensure only one generator is loaded\n"],["check_names","RDoc::Task","RDoc/Task.html#method-i-check_names","(names)","<p>Ensures that <code>names</code> only includes names for the :rdoc,\n:clobber_rdoc and :rerdoc.  If other names are …\n"],["child_name","RDoc::Context","RDoc/Context.html#method-i-child_name","(name)","<p>Creates the full name for a child with <code>name</code>\n"],["class_attributes","RDoc::Context","RDoc/Context.html#method-i-class_attributes","()","<p>Class attributes\n"],["class_dir","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-class_dir","()","<p>Directory where generated class HTML files live relative to the output dir.\n"],["class_dir","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-class_dir","()","<p>The directory classes are written to\n"],["class_document","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-class_document","(name, found, klasses, includes)","<p>Builds a RDoc::Markup::Document from <code>found</code>,\n<code>klasess</code> and <code>includes</code>\n"],["class_file","RDoc::RI::Store","RDoc/RI/Store.html#method-i-class_file","(klass_name)","<p>Path to the ri data for <code>klass_name</code>\n"],["class_method_list","RDoc::Context","RDoc/Context.html#method-i-class_method_list","()","<p>Class methods\n"],["class_methods","RDoc::RI::Store","RDoc/RI/Store.html#method-i-class_methods","()","<p>Class methods cache accessor.  Maps a class to an Array of its class\nmethods (not full name).\n"],["class_path","RDoc::RI::Store","RDoc/RI/Store.html#method-i-class_path","(klass_name)","<p>Path where data for <code>klass_name</code> will be stored (methods or\nclass data)\n"],["classes","RDoc::Context","RDoc/Context.html#method-i-classes","()","<p>Array of classes in this context\n"],["classes","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-classes","()","<p>Hash mapping a known class or module to the stores it can be loaded from\n"],["classes","RDoc::TopLevel","RDoc/TopLevel.html#method-c-classes","()",""],["classes_and_includes_for","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-classes_and_includes_for","(name)","<p>Returns the stores wherin <code>name</code> is found along with the classes\nand includes that match it\n"],["classes_and_modules","RDoc::Context","RDoc/Context.html#method-i-classes_and_modules","()","<p>All classes and modules in this namespace\n"],["classes_hash","RDoc::Context","RDoc/Context.html#method-i-classes_hash","()","<p>Hash of classes keyed by class name\n"],["classes_hash","RDoc::TopLevel","RDoc/TopLevel.html#method-c-classes_hash","()",""],["clear_comment","RDoc::ClassModule","RDoc/ClassModule.html#method-i-clear_comment","()","<p>Clears the comment. Used by the ruby parser.\n"],["clobber_task_description","RDoc::Task","RDoc/Task.html#method-i-clobber_task_description","()","<p>Task description for the clobber rdoc task or its renamed equivalent\n"],["collect_first_comment","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-collect_first_comment","()","<p>Look for the first comment in a file that isn’t a shebang line.\n"],["collect_tokens","RDoc::TokenStream","RDoc/TokenStream.html#method-i-collect_tokens","()","<p>Starts collecting tokens\n"],["comment","RDoc::TestCase","RDoc/TestCase.html#method-i-comment","(text, top_level = @top_level)","<p>Creates an RDoc::Comment with <code>text</code> which was defined on\n<code>top_level</code>. By default the comment has the ‘rdoc’ …\n"],["comment=","RDoc::ClassModule","RDoc/ClassModule.html#method-i-comment-3D","(comment)","<p>This method is deprecated, use #add_comment instead.\n<p>Appends <code>comment</code> to the current comment, but separated …\n"],["comment=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-comment-3D","(comment)","<p>Replaces our comment with <code>comment</code>, unless it is empty.\n"],["comment=","RDoc::Context::Section","RDoc/Context/Section.html#method-i-comment-3D","(comment)","<p>Appends <code>comment</code> to the current comment separated by a rule.\n"],["complete","RDoc::ClassModule","RDoc/ClassModule.html#method-i-complete","(min_visibility)","<p>Prepares this ClassModule for use by a generator.\n<p>See RDoc::TopLevel::complete\n"],["complete","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-complete","(name)","<p>Completes <code>name</code> based on the caches.  For Readline\n"],["complete","RDoc::TopLevel","RDoc/TopLevel.html#method-c-complete","(min_visibility)","<p>Prepares the RDoc code object tree for use by a generator.\n<p>It finds unique classes/modules defined, and …\n"],["convert","RDoc::Markup","RDoc/Markup.html#method-i-convert","(input, formatter)","<p>We take <code>input</code>, parse it if necessary, then invoke the output\n<code>formatter</code> using a Visitor to render the …\n"],["convert","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-convert","(content)","<p>Marks up <code>content</code>\n"],["convert","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-convert","(content)","<p>Marks up <code>content</code>\n"],["convert","RDoc::Markup::ToLabel","RDoc/Markup/ToLabel.html#method-i-convert","(text)","<p>Converts <code>text</code> to an HTML-safe label\n"],["convert_attrs","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-convert_attrs","(str, attrs)","<p>Map attributes like <strong>text</strong>to the sequence\n001002&lt;char&gt;001003&lt;char&gt;, where &lt;char&gt; is a …\n"],["convert_flow","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-convert_flow","(flow)","<p>Converts flow items <code>flow</code>\n"],["convert_flow","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-convert_flow","(flow)","<p>Converts flow items <code>flow</code>\n"],["convert_html","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-convert_html","(str, attrs)","<p>Converts HTML tags to RDoc attributes\n"],["convert_special","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-convert_special","(special)","<p>Converts added specials.  See RDoc::Markup#add_special\n"],["convert_special","RDoc::Markup::ToBs","RDoc/Markup/ToBs.html#method-i-convert_special","(special)","<p>Calls convert_string on the result of convert_special\n"],["convert_specials","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-convert_specials","(str, attrs)","<p>Converts special sequences to RDoc attributes\n"],["convert_string","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-convert_string","(string)","<p>Converts a string to be fancier if desired\n"],["convert_string","RDoc::Markup::ToBs","RDoc/Markup/ToBs.html#method-i-convert_string","(string)","<p>Adds bold or underline mixed with backspaces\n"],["convert_string","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-convert_string","(text)","<p>CGI escapes <code>text</code>\n"],["copy_static","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-copy_static","()","<p>Copies static files from the static_path into the output directory\n"],["copy_string","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-copy_string","(start_pos, end_pos)","<p>Copies <code>start_pos</code> to <code>end_pos</code> from the current\nstring\n"],["coverage_level=","RDoc::Stats","RDoc/Stats.html#method-i-coverage_level-3D","(level)","<p>Sets coverage report level.  Accepted values are:\n<p>false or nil &mdash; No report\n<p>0 &mdash; Classes, modules, constants, …\n"],["cross_reference","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-cross_reference","(name, text = nil)","<p>Creates a link to the reference <code>name</code> if the name exists.  If\n<code>text</code> is given it is used as the link text, …\n"],["current","RDoc::RDoc","RDoc/RDoc.html#method-c-current","()","<p>Active RDoc::RDoc instance\n"],["current=","RDoc::RDoc","RDoc/RDoc.html#method-c-current-3D","(rdoc)","<p>Sets the active RDoc::RDoc instance\n"],["current_section","RDoc::Context","RDoc/Context.html#method-i-current_section","()","<p>The current documentation section that new items will be added to.  If\ntemporary_section is available …\n"],["cvs_url","RDoc::Generator::Markup","RDoc/Generator/Markup.html#method-i-cvs_url","(url, full_path)","<p>Build a webcvs URL starting for the given <code>url</code> with\n<code>full_path</code> appended as the destination path.  If\n<code>url</code> …\n"],["cvs_url","RDoc::TopLevel","RDoc/TopLevel.html#method-i-cvs_url","()","<p>Returns a URL for this source file on some web repository.  Use the -W\ncommand line option to set.\n"],["debug_msg","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-debug_msg","(*msg)","<p>Output progress information if debugging is enabled\n"],["debug_msg","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-debug_msg","(*msg)","<p>Output progress information if debugging is enabled\n"],["default_options","RDoc::RI::Driver","RDoc/RI/Driver.html#method-c-default_options","()","<p>Default options for ri\n"],["default_title=","RDoc::Options","RDoc/Options.html#method-i-default_title-3D","(string)","<p>Set the title, but only if not already set. Used to set the title from a\nsource file, so that a title …\n"],["defaults","RDoc::Task","RDoc/Task.html#method-i-defaults","()","<p>Sets default task values\n"],["define","RDoc::Task","RDoc/Task.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["defined_in?","RDoc::Context","RDoc/Context.html#method-i-defined_in-3F","(file)","<p>Is part of this thing was defined in <code>file</code>?\n"],["definition","RDoc::Attr","RDoc/Attr.html#method-i-definition","()","<p>Returns attr_reader, attr_writer or attr_accessor as appropriate.\n"],["definition","RDoc::NormalClass","RDoc/NormalClass.html#method-i-definition","()","<p>The definition of this class, <code>class MyClassName</code>\n"],["definition","RDoc::NormalModule","RDoc/NormalModule.html#method-i-definition","()","<p>The definition of this module, <code>module MyModuleName</code>\n"],["definition","RDoc::SingleClass","RDoc/SingleClass.html#method-i-definition","()","<p>The definition of this singleton class, <code>class &lt;&lt;\nMyClassName</code>\n"],["delete_legacy_args","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-delete_legacy_args","(args)","<p>Removes legacy rdoc arguments from <code>args</code>\n"],["description","RDoc::ClassModule","RDoc/ClassModule.html#method-i-description","()","<p>Handy wrapper for marking up this class or module’s comment\n"],["description","RDoc::Generator::Markup","RDoc/Generator/Markup.html#method-i-description","()","<p>Handy wrapper for marking up this object’s comment\n"],["display","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-display","(document)","<p>Converts <code>document</code> to text and writes it to the pager\n"],["display?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-display-3F","()","<p>Should this CodeObject be shown in documentation?\n"],["display?","RDoc::TopLevel","RDoc/TopLevel.html#method-i-display-3F","()","<p>Only a TopLevel that contains text file) will be displayed.  See also\nRDoc::CodeObject#display?\n"],["display_attributes","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-display_attributes","()","<p>Debug method that prints a string along with its attributes\n"],["display_class","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-display_class","(name)","<p>Outputs formatted RI data for class <code>name</code>.  Groups undocumented\nclasses\n"],["display_method","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-display_method","(name)","<p>Outputs formatted RI data for method <code>name</code>\n"],["display_name","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-display_name","(name)","<p>Outputs formatted RI data for the class or method <code>name</code>.\n<p>Returns true if <code>name</code> was found, false if it was …\n"],["display_names","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-display_names","(names)","<p>Displays each name in <code>name</code>\n"],["do_aliases","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_aliases","()","<p>Scans #content for rb_define_alias\n"],["do_attrs","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_attrs","()","<p>Scans #content for rb_attr and rb_define_attr\n"],["do_classes","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_classes","()","<p>Scans #content for rb_define_module, rb_define_class, boot_defclass,\nrb_define_module_under, rb_define_class_under …\n"],["do_constants","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_constants","()","<p>Scans #content for rb_define_variable, rb_define_readonly_variable,\nrb_define_const and rb_define_global_const …\n"],["do_includes","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_includes","()","<p>Scans #content for rb_include_module\n"],["do_methods","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_methods","()","<p>Scans #content for rb_define_method, rb_define_singleton_method,\nrb_define_module_function, rb_define_private_method …\n"],["do_nothing","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-do_nothing","(markup_item)","<p>Does nothing to <code>markup_item</code> because it doesn’t have any\nuser-built content\n"],["doc_stats","RDoc::Stats","RDoc/Stats.html#method-i-doc_stats","(collection)","<p>Returns the length and number of undocumented items in\n<code>collection</code>.\n"],["document","RDoc::RDoc","RDoc/RDoc.html#method-i-document","(options)","<p>Generates documentation or a coverage report depending upon the settings in\n<code>options</code>.\n<p><code>options</code> can be either ...\n"],["document","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-document","(generator, options, destination)","<p>Generates documentation using the named <code>generator</code> (“darkfish”\nor “ri”) and following …\n"],["document_children=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-document_children-3D","(document_children)","<p>Enables or disables documentation of this CodeObject’s children unless it\nhas been turned off by :enddoc: …\n"],["document_self=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-document_self-3D","(document_self)","<p>Enables or disables documentation of this CodeObject unless it has been\nturned off by :enddoc:.  If the …\n"],["document_self_or_methods","RDoc::ClassModule","RDoc/ClassModule.html#method-i-document_self_or_methods","()","<p>Does this ClassModule or any of its methods have document_self set?\n"],["documented?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-documented-3F","()","<p>Does this object have a comment with content or is #received_nodoc true?\n"],["documented?","RDoc::Constant","RDoc/Constant.html#method-i-documented-3F","()","<p>A constant is documented if it has a comment, or is an alias for a\ndocumented class or module.\n"],["documented?","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-documented-3F","()","<p>A method/attribute is documented if any of the following is true:\n<p>it was marked with :nodoc:;\n<p>it has a …\n"],["done_adding","RDoc::Stats","RDoc/Stats.html#method-i-done_adding","()","<p>Call this to mark the end of parsing for display purposes\n"],["done_adding","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-done_adding","(*)","<p>Prints when RDoc is done\n"],["done_documenting=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-done_documenting-3D","(value)","<p>Turns documentation on/off, and turns on/off #document_self and\n#document_children.\n<p>Once documentation …\n"],["dump","RDoc::RI::Driver","RDoc/RI/Driver.html#method-c-dump","(data_path)","<p>Dump <code>data_path</code> using pp\n"],["each","RDoc::RI::Paths","RDoc/RI/Paths.html#method-c-each","(system, site, home, gems, *extra_dirs)","<p>Iterates over each selected path yielding the directory and type.\n<p>Yielded types:\n<p>:system &mdash; Where Ruby’s ri …\n"],["each_ancestor","RDoc::ClassModule","RDoc/ClassModule.html#method-i-each_ancestor","()","<p>Iterates the ancestors of this class or module for which an\nRDoc::ClassModule exists.\n"],["each_attribute","RDoc::Context","RDoc/Context.html#method-i-each_attribute","()","<p>Iterator for attributes\n"],["each_classmodule","RDoc::Context","RDoc/Context.html#method-i-each_classmodule","()","<p>Iterator for classes and modules\n"],["each_constant","RDoc::Context","RDoc/Context.html#method-i-each_constant","()","<p>Iterator for constants\n"],["each_include","RDoc::Context","RDoc/Context.html#method-i-each_include","()","<p>Iterator for included modules\n"],["each_method","RDoc::Context","RDoc/Context.html#method-i-each_method","()","<p>Iterator for methods\n"],["each_name_of","RDoc::Markup::Attribute","RDoc/Markup/Attribute.html#method-c-each_name_of","(bitmap)","<p>yields each attribute name in <code>bitmap</code>\n"],["each_parent","RDoc::CodeObject","RDoc/CodeObject.html#method-i-each_parent","()","<p>Yields each parent of this CodeObject.  See also\nRDoc::ClassModule#each_ancestor\n"],["each_section","RDoc::Context","RDoc/Context.html#method-i-each_section","()","<p>Iterator for each section’s contents sorted by title.  The\n<code>section</code>, the section’s <code>constants</code> and the sections\n…\n"],["empty?","RDoc::Comment","RDoc/Comment.html#method-i-empty-3F","()","<p>A comment is empty if its text String is empty.\n"],["empty?","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-empty-3F","()","<p>Does this document have no parts?\n"],["empty?","RDoc::Markup::List","RDoc/Markup/List.html#method-i-empty-3F","()","<p>Is the list empty?\n"],["empty?","RDoc::Markup::ListItem","RDoc/Markup/ListItem.html#method-i-empty-3F","()","<p>Is the ListItem empty?\n"],["encode_fallback","RDoc::Text","RDoc/Text.html#method-c-encode_fallback","(character, encoding, fallback)","<p>Transcodes <code>character</code> to <code>encoding</code> with a\n<code>fallback</code> character.\n"],["end_accepting","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-end_accepting","()","<p>Returns the generated output\n"],["end_accepting","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-end_accepting","()","<p>Returns the generated output\n"],["end_accepting","RDoc::Markup::ToTableOfContents","RDoc/Markup/ToTableOfContents.html#method-i-end_accepting","()","<p>Returns the table of contents\n"],["end_accepting","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-end_accepting","()","<p>Returns an Array of items that were wrapped in plus, tt or code.\n"],["eql?","RDoc::TopLevel","RDoc/TopLevel.html#method-i-eql-3F","(other)",""],["error","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-error","(msg)","<p>Aborts with <code>msg</code>\n"],["error","RDoc::RDoc","RDoc/RDoc.html#method-i-error","(msg)","<p>Report an error message and exit\n"],["expand_class","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-expand_class","(klass)","<p>Expands abbreviated klass <code>klass</code> into a fully-qualified class. \n“Zl::Da” will be expanded to …\n"],["expand_name","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-expand_name","(name)","<p>Expands the class portion of <code>name</code> into a fully-qualified\nclass.  See #expand_class.\n"],["expand_tabs","RDoc::Text","RDoc/Text.html#method-i-expand_tabs","(text)","<p>Expands tab characters in <code>text</code> to eight spaces\n"],["extract_call_seq","RDoc::Comment","RDoc/Comment.html#method-i-extract_call_seq","(method)","<p>Look for a ‘call-seq’ in the comment to override the normal parameter\nhandling.  The :call-seq: is indented …\n"],["extract_comment","RDoc::Context::Section","RDoc/Context/Section.html#method-i-extract_comment","(comment)","<p>Extracts the comment for this section from the original comment block. If\nthe first line contains :section:, …\n"],["file=","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-file-3D","(location)","<p>The file this Document was created from.\n"],["file_dir","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-file_dir","()","<p>Directory where generated class HTML files live relative to the output dir.\n"],["file_dir","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-file_dir","()","<p>The directory files are written to\n"],["file_name","RDoc::CodeObject","RDoc/CodeObject.html#method-i-file_name","()","<p>File name where this CodeObject was found.\n<p>See also RDoc::Context#in_files\n"],["files","RDoc::TopLevel","RDoc/TopLevel.html#method-c-files","()",""],["files_hash","RDoc::TopLevel","RDoc/TopLevel.html#method-c-files_hash","()",""],["filter_methods","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-filter_methods","(found, name)","<p>Filters the methods in <code>found</code> trying to find a match for\n<code>name</code>.\n"],["find_alias_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_alias_comment","(class_name, new_name, old_name)","<p>Finds the comment for an alias on <code>class_name</code> from\n<code>new_name</code> to <code>old_name</code>\n"],["find_ancestor_local_symbol","RDoc::ClassModule","RDoc/ClassModule.html#method-i-find_ancestor_local_symbol","(symbol)","<p>Looks for a symbol in the #ancestors. See Context#find_local_symbol.\n"],["find_attr_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_attr_comment","(var_name, attr_name, read = nil, write = nil)","<p>Finds a comment for rb_define_attr, rb_attr or Document-attr.\n<p><code>var_name</code> is the C class variable the attribute ...\n"],["find_attribute","RDoc::Context","RDoc/Context.html#method-i-find_attribute","(name, singleton)","<p>Finds an attribute <code>name</code> with singleton value\n<code>singleton</code>.\n"],["find_attribute_named","RDoc::Context","RDoc/Context.html#method-i-find_attribute_named","(name)","<p>Finds an attribute with <code>name</code> in this context\n"],["find_body","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_body","(class_name, meth_name, meth_obj, file_content, quiet = false)","<p>Find the C code corresponding to a Ruby method\n"],["find_class","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_class","(raw_name, name)","<p>Finds a RDoc::NormalClass or RDoc::NormalModule for <code>raw_name</code>\n"],["find_class_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_class_comment","(class_name, class_mod)","<p>Look for class or module documentation above Init_+class_name+(void), in a\nDocument-class <code>class_name</code> …\n"],["find_class_method_named","RDoc::Context","RDoc/Context.html#method-i-find_class_method_named","(name)","<p>Finds a class method with <code>name</code> in this context\n"],["find_class_named","RDoc::ClassModule","RDoc/ClassModule.html#method-i-find_class_named","(name)","<p>Finds a class or module with <code>name</code> in this namespace or its\ndescendants\n"],["find_class_named","RDoc::TopLevel","RDoc/TopLevel.html#method-c-find_class_named","(name)","<p>Finds the class with <code>name</code> in all discovered classes\n"],["find_class_named_from","RDoc::TopLevel","RDoc/TopLevel.html#method-c-find_class_named_from","(name, from)","<p>Finds the class with <code>name</code> starting in namespace\n<code>from</code>\n"],["find_class_or_module","RDoc::TopLevel","RDoc/TopLevel.html#method-i-find_class_or_module","(name)","<p>See RDoc::TopLevel::find_class_or_module\n"],["find_class_or_module","RDoc::TopLevel","RDoc/TopLevel.html#method-c-find_class_or_module","(name)","<p>Finds the class or module with <code>name</code>\n"],["find_const_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_const_comment","(type, const_name, class_name = nil)","<p>Finds a comment matching <code>type</code> and <code>const_name</code>\neither above the comment or in the matching Document- section. …\n"],["find_constant_named","RDoc::Context","RDoc/Context.html#method-i-find_constant_named","(name)","<p>Finds a constant with <code>name</code> in this context\n"],["find_enclosing_module_named","RDoc::Context","RDoc/Context.html#method-i-find_enclosing_module_named","(name)","<p>Find a module at a higher scope\n"],["find_external_alias","RDoc::Context","RDoc/Context.html#method-i-find_external_alias","(name, singleton)","<p>Finds an external alias <code>name</code> with singleton value\n<code>singleton</code>.\n"],["find_external_alias_named","RDoc::Context","RDoc/Context.html#method-i-find_external_alias_named","(name)","<p>Finds an external alias with <code>name</code> in this context\n"],["find_file_named","RDoc::Context","RDoc/Context.html#method-i-find_file_named","(name)","<p>Finds a file with <code>name</code> in this context\n"],["find_file_named","RDoc::TopLevel","RDoc/TopLevel.html#method-c-find_file_named","(name)","<p>Finds the file with <code>name</code> in all discovered files\n"],["find_include_file","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-i-find_include_file","(name)","<p>Look for the given file in the directory containing the current file, and\nthen in each of the directories …\n"],["find_instance_method_named","RDoc::Context","RDoc/Context.html#method-i-find_instance_method_named","(name)","<p>Finds an instance method with <code>name</code> in this context\n"],["find_local_symbol","RDoc::Context","RDoc/Context.html#method-i-find_local_symbol","(symbol)","<p>Finds a method, constant, attribute, external alias, module or file named\n<code>symbol</code> in this context.\n"],["find_local_symbol","RDoc::TopLevel","RDoc/TopLevel.html#method-i-find_local_symbol","(symbol)","<p>Finds a class or module named <code>symbol</code>\n"],["find_method","RDoc::Context","RDoc/Context.html#method-i-find_method","(name, singleton)","<p>Finds a method named <code>name</code> with singleton value\n<code>singleton</code>.\n"],["find_method_named","RDoc::Context","RDoc/Context.html#method-i-find_method_named","(name)","<p>Finds a instance or module method with <code>name</code> in this context\n"],["find_methods","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-find_methods","(name)","<p>Yields items matching <code>name</code> including the store they were found\nin, the class being searched for, the …\n"],["find_modifiers","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_modifiers","(comment, meth_obj)","<p>Handles modifiers in <code>comment</code> and updates <code>meth_obj</code>\nas appropriate.\n"],["find_module_named","RDoc::Context","RDoc/Context.html#method-i-find_module_named","(name)","<p>Find a module with <code>name</code> using ruby’s scoping rules\n"],["find_module_named","RDoc::TopLevel","RDoc/TopLevel.html#method-c-find_module_named","(name)","<p>Finds the module with <code>name</code> in all discovered modules\n"],["find_module_named","RDoc::TopLevel","RDoc/TopLevel.html#method-i-find_module_named","(name)","<p>Finds a module or class with <code>name</code>\n"],["find_override_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_override_comment","(class_name, meth_obj)","<p>Finds a <code>Document-method</code> override for <code>meth_obj</code> on\n<code>class_name</code>\n"],["find_symbol","RDoc::Context","RDoc/Context.html#method-i-find_symbol","(symbol)","<p>Look up <code>symbol</code>, first as a module, then as a local symbol.\n"],["find_symbol_module","RDoc::Context","RDoc/Context.html#method-i-find_symbol_module","(symbol)","<p>Look up a module named <code>symbol</code>.\n"],["find_unique","RDoc::TopLevel","RDoc/TopLevel.html#method-c-find_unique","(all_hash)","<p>Finds unique classes/modules defined in <code>all_hash</code>, and returns\nthem as an array. Performs the alias updates …\n"],["finish","RDoc::Options","RDoc/Options.html#method-i-finish","()","<p>Completes any unfinished option setup business such as filtering for\nexistent files, creating a regexp …\n"],["fix_basic_object_inheritance","RDoc::TopLevel","RDoc/TopLevel.html#method-c-fix_basic_object_inheritance","()","<p>Fixes the erroneous <code>BasicObject &lt; Object</code> in 1.9.\n<p>Because we assumed all classes without a stated superclass …\n"],["flow","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-flow","(str)","<p>Processes <code>str</code> converting attributes, HTML and specials\n"],["flush_left","RDoc::Text","RDoc/Text.html#method-i-flush_left","(text)","<p>Flush <code>text</code> left based on the shortest line\n"],["for","RDoc::Parser","RDoc/Parser.html#method-c-for","(top_level, file_name, content, options, stats)","<p>Finds and instantiates the correct parser for the given\n<code>file_name</code> and <code>content</code>.\n"],["force_documentation=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-force_documentation-3D","(value)","<p>Force the documentation of this object unless documentation has been turned\noff by :endoc:\n"],["force_encoding","RDoc::Comment","RDoc/Comment.html#method-i-force_encoding","(encoding)","<p>HACK dubious\n"],["format=","RDoc::Comment","RDoc/Comment.html#method-i-format-3D","(format)","<p>Sets the format of this comment and resets any parsed document\n"],["formatter","RDoc::Generator::Markup","RDoc/Generator/Markup.html#method-i-formatter","()","<p>Creates an RDoc::Markup::ToHtmlCrossref formatter\n"],["formatter","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-formatter","(io)","<p>Creates a new RDoc::Markup::Formatter.  If a formatter is given with -f,\nuse it.  If we’re outputting …\n"],["friendly_path","RDoc::RI::Store","RDoc/RI/Store.html#method-i-friendly_path","()","<p>Friendly rendition of #path\n"],["from_module","RDoc::ClassModule","RDoc/ClassModule.html#method-c-from_module","(class_type, mod)","<p>Return a RDoc::ClassModule of class <code>class_type</code> that is a copy\nof module <code>module</code>. Used to promote modules …\n"],["full_name","RDoc::ClassModule","RDoc/ClassModule.html#method-i-full_name","()","<p>Return the fully qualified name of this class or module\n"],["full_name","RDoc::Context","RDoc/Context.html#method-i-full_name","()","<p>The full name for this context.  This method is overridden by subclasses.\n"],["full_name","RDoc::Include","RDoc/Include.html#method-i-full_name","()","<p>Full name based on #module\n"],["full_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-full_name","()","<p>Full method/attribute name including namespace\n"],["full_name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-full_name","()","<p>Returns the relative name of this file\n"],["full_name=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-full_name-3D","(full_name)","<p>Sets the full_name overriding any computed full name.\n<p>Set to <code>nil</code> to clear RDoc’s cached value\n"],["full_old_name","RDoc::Alias","RDoc/Alias.html#method-i-full_old_name","()","<p>Full old name including namespace\n"],["fully_documented?","RDoc::Context","RDoc/Context.html#method-i-fully_documented-3F","()","<p>Does this context and its methods and constants all have documentation?\n<p>(Yes, fully documented doesn’t …\n"],["fully_documented?","RDoc::Stats","RDoc/Stats.html#method-i-fully_documented-3F","()","<p>The documentation status of this project.  <code>true</code> when 100%,\n<code>false</code> when less than 100% and <code>nil</code> when unknown. …\n"],["gather_files","RDoc::RDoc","RDoc/RDoc.html#method-i-gather_files","(files)","<p>Gathers a set of parseable files from the files and directories listed in\n<code>files</code>.\n"],["gemdirs","RDoc::RI::Paths","RDoc/RI/Paths.html#method-c-gemdirs","()","<p>The latest installed gems’ ri directories\n"],["gen_relative_url","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-c-gen_relative_url","(path, target)","<p>Converts a target url to one that is relative to a given path\n"],["gen_sub_directories","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-gen_sub_directories","()","<p>Create the directories the generated docs will live in if they don’t\nalready exist.\n"],["gen_url","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-gen_url","(url, text)","<p>Generate a link to <code>url</code> with content <code>text</code>. \nHandles the special cases for img: and link: described under …\n"],["gen_url","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-gen_url","(url, text)","<p>Generates links for <code>rdoc-ref:</code> scheme URLs and allows\nRDoc::Markup::ToHtml to handle other schemes.\n"],["gen_url","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-gen_url","(url, text)","<p>Returns just the text of <code>link</code>, <code>url</code> is only used\nto determine the link type.\n"],["generate","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate","(top_levels)","<p>Build the initial indices and output objects based on an array of TopLevel\nobjects containing the extracted …\n"],["generate","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-generate","(top_levels)","<p>Creates the JSON index.\n"],["generate","RDoc::Generator::RI","RDoc/Generator/RI.html#method-i-generate","(top_levels)","<p>Build the initial indices and output objects based on an array of TopLevel\nobjects containing the extracted …\n"],["generate","RDoc::RDoc","RDoc/RDoc.html#method-i-generate","(file_info)","<p>Generates documentation for <code>file_info</code> (from #parse_files) into\nthe output dir using the generator selected …\n"],["generate","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-generate","()","<p>Generates RDoc and ri data\n"],["generate_class_files","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate_class_files","()","<p>Generate a documentation file for each class and module\n"],["generate_file_files","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate_file_files","()","<p>Generate a documentation file for each file\n"],["generate_index","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate_index","()","<p>Generate an index page which lists all the classes which are documented.\n"],["generate_table_of_contents","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate_table_of_contents","()","<p>Generate an index page which lists all the classes which are documented.\n"],["generation_hook","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-generation_hook","(installer, specs)","<p>Post installs hook that generates documentation for each specification in\n<code>specs</code>\n"],["generator_descriptions","RDoc::Options","RDoc/Options.html#method-i-generator_descriptions","()","<p>Returns a properly-space list of generators and their descriptions.\n"],["get","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-get","()","<p>Pulls the next token from the stream.\n"],["get_bool","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_bool","()","<p>Looks for a true or false token.  Returns false if TkFALSE or TkNIL are\nfound.\n"],["get_class_or_module","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_class_or_module","(container)","<p>Look for the name of a class of module (optionally with a leading  &mdash; or\n<p>with  &mdash; separated named) and return …\n\n"],["get_class_specification","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_class_specification","()","<p>Return a superclass, which can be either a constant of an expression\n"],["get_constant","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_constant","()","<p>Parse a constant, which might be qualified by one or more class or module\nnames\n"],["get_constant_with_optional_parens","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_constant_with_optional_parens","()","<p>Get a constant that may be surrounded by parens\n"],["get_sorted_module_list","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-get_sorted_module_list","(classes)","<p>Return a list of the documented modules sorted by salience first, then by\nname.\n"],["get_svninfo","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-get_svninfo","(klass)","<p>Try to extract Subversion information out of the first constant whose value\nlooks like a subversion  …\n"],["get_symbol_or_name","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_symbol_or_name","()","<p>Extracts a name or symbol from the token stream.\n"],["get_tk","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-get_tk","()","<p>Fetches the next token from the scanner\n"],["get_tk_until","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-get_tk_until","(*tokens)","<p>Reads and returns all tokens up to one of <code>tokens</code>.  Leaves the\nmatched token in the token list.\n"],["get_tkread","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-get_tkread","()","<p>Retrieves a String representation of the read tokens\n"],["great_job","RDoc::Stats","RDoc/Stats.html#method-i-great_job","()","<p>A report that says you did a great job!\n"],["handle","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-i-handle","(text, code_object = nil, &block)","<p>Look for directives in the given <code>text</code>.\n<p>Options that we don’t handle are yielded.  If the block returns …\n"],["handle_attr","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_attr","(var_name, attr_name, read, write)","<p>Creates a new RDoc::Attr <code>attr_name</code> on class\n<code>var_name</code> that is either <code>read</code>, <code>write</code>\nor both\n"],["handle_class_module","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_class_module","(var_name, type, class_name, parent, in_module)","<p>Creates a new RDoc::NormalClass or RDoc::NormalModule based on\n<code>type</code> named <code>class_name</code> in <code>parent</code>\nwhich …\n"],["handle_constants","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_constants","(type, var_name, const_name, definition)","<p>Adds constants.  By providing some_value: at the start of the comment you\ncan override the C value of …\n"],["handle_directive","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-i-handle_directive","(prefix, directive, param, code_object = nil, encoding = nil)","<p>Performs the actions described by <code>directive</code> and its parameter\n<code>param</code>.\n<p><code>code_object</code> is used for directives ...\n"],["handle_ifdefs_in","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_ifdefs_in","(body)","<p>Removes #ifdefs that would otherwise confuse us\n"],["handle_method","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_method","(type, var_name, meth_name, function, param_count, source_file = nil)","<p>Adds an RDoc::AnyMethod <code>meth_name</code> defined on a class or module\nassigned to <code>var_name</code>.  <code>type</code> is the type …\n"],["handle_pipe","RDoc::RDoc","RDoc/RDoc.html#method-i-handle_pipe","()","<p>Turns RDoc from stdin into HTML\n"],["handle_singleton","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_singleton","(sclass_var, class_var)","<p>Registers a singleton class <code>sclass_var</code> as a singleton of\n<code>class_var</code>\n"],["handle_special_CROSSREF","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-handle_special_CROSSREF","(special)","<p>We’re invoked when any text matches the CROSSREF pattern.  If we find the\ncorresponding reference, generate …\n"],["handle_special_CROSSREF","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-handle_special_CROSSREF","(special)","<p>Removes escaping from the cross-references in <code>special</code>\n"],["handle_special_CROSSREF","RDoc::Markup::ToLabel","RDoc/Markup/ToLabel.html#method-i-handle_special_CROSSREF","(special)","<p>Converts the CROSSREF <code>special</code> to plain text, removing the\nsuppression marker, if any\n"],["handle_special_HYPERLINK","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-handle_special_HYPERLINK","(special)","<p><code>special</code> is a potential link.  The following schemes are\nhandled:\n<p>mailto: &mdash; Inserted as-is.\n<p>http: &mdash; Links are …\n"],["handle_special_HYPERLINK","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-handle_special_HYPERLINK","(special)","<p>Handles <code>rdoc-ref:</code> scheme links and allows RDoc::Markup::ToHtml\nto handle other schemes.\n"],["handle_special_RDOCLINK","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-handle_special_RDOCLINK","(special)","<p><code>special</code> is an rdoc-schemed link that will be converted into a\nhyperlink.\n<p>For the <code>rdoc-ref</code> scheme the named …\n"],["handle_special_RDOCLINK","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-handle_special_RDOCLINK","(special)","<p><code>special</code> is an rdoc-schemed link that will be converted into a\nhyperlink. For the rdoc-ref scheme the ...\n"],["handle_special_SUPPRESSED_CROSSREF","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-handle_special_SUPPRESSED_CROSSREF","(special)","<p>Removes preceding \\ from the suppressed crossref <code>special</code>\n"],["handle_special_TIDYLINK","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-handle_special_TIDYLINK","(special)","<p>This <code>special</code> is a link where the label is different from the\nURL <code>label[url]</code> or <code>{long label}[url]</code>\n"],["handle_special_TIDYLINK","RDoc::Markup::ToLabel","RDoc/Markup/ToLabel.html#method-i-handle_special_TIDYLINK","(special)","<p>Converts the TIDYLINK <code>special</code> to just the text part\n"],["handle_tab_width","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_tab_width","(body)","<p>Normalizes tabs in <code>body</code>\n"],["hash","RDoc::TopLevel","RDoc/TopLevel.html#method-i-hash","()","<p>An RDoc::TopLevel has the same hash as another with the same absolute_name\n"],["html_list_name","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-html_list_name","(list_type, open_tag)","<p>Determines the HTML list element for <code>list_type</code> and\n<code>open_tag</code>\n"],["html_list_name","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-html_list_name","(list_type, open_tag)","<p>In snippets, there are no lists\n"],["html_name","RDoc::Alias","RDoc/Alias.html#method-i-html_name","()","<p>HTML id-friendly version of <code>#new_name</code>.\n"],["html_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-html_name","()","<p>HTML id-friendly method/attribute name\n"],["http_url","RDoc::Context","RDoc/Context.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["http_url","RDoc::TopLevel","RDoc/TopLevel.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["ignore","RDoc::CodeObject","RDoc/CodeObject.html#method-i-ignore","()","<p>Use this to ignore a CodeObject and all its children until found again\n(#record_location is called). …\n"],["ignore","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-ignore","(node)","<p>Use ignore in your subclass to ignore the content of a node.\n\n<pre>##\n# We don't support raw nodes in ToNoRaw ...</pre>\n"],["ignored?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-ignored-3F","()","<p>Has this class been ignored?\n"],["in_path?","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-in_path-3F","(file)","<p>Is <code>file</code> in ENV?\n"],["in_tt?","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-in_tt-3F","()","<p>Are we currently inside tt tags?\n"],["include_file","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-i-include_file","(name, indent, encoding)","<p>Handles the <code>:include: <em>filename</em></code> directive.\n<p>If the first line of the included file starts with ‘#’, and …\n"],["index_classes","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-index_classes","()","<p>Adds classes and modules to the index\n"],["index_methods","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-index_methods","()","<p>Adds methods to the index\n"],["index_pages","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-index_pages","()","<p>Adds pages to the index\n"],["init_tags","RDoc::Markup::ToAnsi","RDoc/Markup/ToAnsi.html#method-i-init_tags","()","<p>Maps attributes to ANSI sequences\n"],["init_tags","RDoc::Markup::ToBs","RDoc/Markup/ToBs.html#method-i-init_tags","()","<p>Sets a flag that is picked up by #annotate to do the right thing in\n#convert_string\n"],["init_tags","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-init_tags","()","<p>Maps attributes to HTML tags\n"],["init_tags","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-init_tags","()","<p>Maps attributes to HTML sequences\n"],["initialize_methods_etc","RDoc::Context","RDoc/Context.html#method-i-initialize_methods_etc","()","<p>Sets the defaults for methods and so-forth\n"],["install_siginfo_handler","RDoc::Generator::RI","RDoc/Generator/RI.html#method-i-install_siginfo_handler","()","<p>Installs a siginfo handler that prints the current filename.\n"],["install_siginfo_handler","RDoc::RDoc","RDoc/RDoc.html#method-i-install_siginfo_handler","()","<p>Installs a siginfo handler that prints the current filename.\n"],["instance_attributes","RDoc::Context","RDoc/Context.html#method-i-instance_attributes","()","<p>Instance attributes\n"],["instance_method_list","RDoc::Context","RDoc/Context.html#method-i-instance_method_list","()","<p>Instance methods\n"],["instance_methods","RDoc::RI::Store","RDoc/RI/Store.html#method-i-instance_methods","()","<p>Instance methods cache accessor.  Maps a class to an Array of its instance\nmethods (not full name).\n"],["interactive","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-interactive","()","<p>Runs ri interactively using Readline if it is available.\n"],["last","RDoc::Markup::List","RDoc/Markup/List.html#method-i-last","()","<p>Returns the last item in the list\n"],["last_modified","RDoc::TopLevel","RDoc/TopLevel.html#method-i-last_modified","()","<p>Time this file was last modified, if known\n"],["length","RDoc::Markup::ListItem","RDoc/Markup/ListItem.html#method-i-length","()","<p>Length of parts in the ListItem\n"],["link","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-link","(name, text)","<p>Creates an HTML link to <code>name</code> with the given <code>text</code>.\n"],["list_end_for","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-list_end_for","(list_type)","<p>Returns the HTML end-tag for <code>list_type</code>\n"],["list_files_in_directory","RDoc::RDoc","RDoc/RDoc.html#method-i-list_files_in_directory","(dir)","<p>Return a list of the files to be processed in a directory. We know that\nthis directory doesn’t have a …\n"],["list_item_start","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-list_item_start","(list_item, list_type)","<p>Returns the HTML tag for <code>list_type</code>, possible using a label\nfrom <code>list_item</code>\n"],["list_item_start","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-list_item_start","(list_item, list_type)","<p>Lists are paragraphs, but notes and labels have a separator\n"],["list_known_classes","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-list_known_classes","(names = [])","<p>Lists classes known to ri starting with <code>names</code>.  If\n<code>names</code> is empty all known classes are shown.\n"],["list_methods_matching","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-list_methods_matching","(name)","<p>Returns an Array of methods matching <code>name</code>\n"],["load_cache","RDoc::RI::Store","RDoc/RI/Store.html#method-i-load_cache","()","<p>Loads cache file for this store\n"],["load_class","RDoc::RI::Store","RDoc/RI/Store.html#method-i-load_class","(klass_name)","<p>Loads ri data for <code>klass_name</code>\n"],["load_method","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-load_method","(store, cache, klass, type, name)","<p>Loads RI data for method <code>name</code> on <code>klass</code> from\n<code>store</code>.  <code>type</code> and <code>cache</code> indicate if\nit is a class or instance …\n"],["load_method","RDoc::RI::Store","RDoc/RI/Store.html#method-i-load_method","(klass_name, method_name)","<p>Loads ri data for <code>method_name</code> in <code>klass_name</code>\n"],["load_methods_matching","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-load_methods_matching","(name)","<p>Returns an Array of RI data for methods matching <code>name</code>\n"],["load_options","RDoc::RDoc","RDoc/RDoc.html#method-i-load_options","()","<p>Loads options from .rdoc_options if the file exists, otherwise creates a\nnew RDoc::Options instance. …\n"],["load_rdoc","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-load_rdoc","()","<p>Loads the RDoc generator\n"],["load_yaml","RDoc","RDoc.html#method-c-load_yaml","()","<p>Loads the best available YAML library.\n"],["look_for_directives_in","RDoc::Parser::C","RDoc/Parser/C.html#method-i-look_for_directives_in","(context, comment)","<p>Look for directives in a normal comment block:\n\n<pre>* :title: My Awesome Project</pre>\n<p>This method modifies the <code>comment</code> …\n"],["look_for_directives_in","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-look_for_directives_in","(context, comment)","<p>Look for directives in a normal comment block:\n\n<pre># :stopdoc:\n# Don't display comment from this point forward</pre>\n"],["make_message","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-make_message","(message)","<p>Adds useful info about the parser to <code>message</code>\n"],["markup","RDoc::Text","RDoc/Text.html#method-i-markup","(text)","<p>Convert a string in markup format into HTML.\n<p>Requires the including class to implement #formatter\n"],["markup_code","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-markup_code","()","<p>Turns the method’s token stream into HTML.\n<p>Prepends line numbers if <code>add_line_numbers</code> is true.\n"],["marshal_dump","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-marshal_dump","()","<p>Dumps this AnyMethod for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Attr","RDoc/Attr.html#method-i-marshal_dump","()","<p>Dumps this Attr for use by ri.  See also #marshal_load\n"],["marshal_load","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-marshal_load","(array)","<p>Loads this AnyMethod from <code>array</code>.  For a loaded AnyMethod the\nfollowing methods will return cached values: …\n"],["marshal_load","RDoc::Attr","RDoc/Attr.html#method-i-marshal_load","(array)","<p>Loads this Attr from <code>array</code>.  For a loaded Attr the following\nmethods will return cached values:\n<p>#full_name …\n"],["mask_protected_sequences","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-mask_protected_sequences","()","<p>Escapes special sequences of text to prevent conversion to RDoc\n"],["merge","RDoc::ClassModule","RDoc/ClassModule.html#method-i-merge","(class_module)","<p>Merges <code>class_module</code> into this ClassModule.\n<p>The data in <code>class_module</code> is preferred over the receiver.\n"],["merge","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-merge","(other)","<p>When this is a collection of documents (#file is not set and this document\ncontains only other documents …\n"],["merge","RDoc::Markup::Raw","RDoc/Markup/Raw.html#method-i-merge","(other)","<p>Appends <code>other</code>‘s parts\n"],["merged?","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-merged-3F","()","<p>Does this Document contain other Documents?\n"],["method_document","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-method_document","(name, filtered)","<p>Builds a RDoc::Markup::Document from <code>found</code>,\n<code>klasess</code> and <code>includes</code>\n"],["method_file","RDoc::RI::Store","RDoc/RI/Store.html#method-i-method_file","(klass_name, method_name)","<p>Path to the ri data for <code>method_name</code> in <code>klass_name</code>\n"],["method_type","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-method_type","(selector)","<p>Returns the type of method (:both, :instance, :class) for\n<code>selector</code>\n"],["methods_by_type","RDoc::Context","RDoc/Context.html#method-i-methods_by_type","(section = nil)","<p>Breaks method_list into a nested hash by type (<code>'class'</code> or\n<code>'instance'</code>) and visibility (<code>:public</code>,\n<code>:protected</code> …\n"],["methods_matching","RDoc::Context","RDoc/Context.html#method-i-methods_matching","(methods, singleton = false, &block)","<p>Yields AnyMethod and Attr entries matching the list of names in\n<code>methods</code>.\n"],["module","RDoc::Include","RDoc/Include.html#method-i-module","()","<p>Attempts to locate the included module object.  Returns the name if not\nknown.\n<p>The scoping rules of Ruby …\n"],["module?","RDoc::ClassModule","RDoc/ClassModule.html#method-i-module-3F","()","<p>Does this object represent a module?\n"],["module?","RDoc::NormalModule","RDoc/NormalModule.html#method-i-module-3F","()","<p>This is a module, returns true\n"],["modules","RDoc::Context","RDoc/Context.html#method-i-modules","()","<p>Array of modules in this context\n"],["modules","RDoc::RI::Store","RDoc/RI/Store.html#method-i-modules","()","<p>Modules cache accessor.  An Array of all the modules (and classes) in the\nstore.\n"],["modules","RDoc::TopLevel","RDoc/TopLevel.html#method-c-modules","()",""],["modules_hash","RDoc::Context","RDoc/Context.html#method-i-modules_hash","()","<p>Hash of modules keyed by module name\n"],["modules_hash","RDoc::TopLevel","RDoc/TopLevel.html#method-c-modules_hash","()",""],["name","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-name","()","<p>Method name\n<p>If the method has no assigned name, it extracts it from #call_seq.\n"],["name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-name","()",""],["name=","RDoc::ClassModule","RDoc/ClassModule.html#method-i-name-3D","(new_name)","<p>Allows overriding the initial name.\n<p>Used for modules and classes that are constant aliases.\n"],["name_for_path","RDoc::ClassModule","RDoc/ClassModule.html#method-i-name_for_path","()","<p>Name to use to generate the url: modules and classes that are aliases for\nanother module or class return …\n"],["name_for_path","RDoc::Context","RDoc/Context.html#method-i-name_for_path","()","<p>Name to use to generate the url. <code>#full_name</code> by default.\n"],["name_prefix","RDoc::Alias","RDoc/Alias.html#method-i-name_prefix","()","<p>‘::’ for the alias of a singleton method/attribute, ‘#’ for instance-level.\n"],["name_prefix","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-name_prefix","()","<p>‘::’ for a class method/attribute, ‘#’ for an instance method.\n"],["name_regexp","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-name_regexp","(name)","<p>Returns a regular expression for <code>name</code> that will match an\nRDoc::AnyMethod’s name.\n"],["new","RDoc::Alias","RDoc/Alias.html#method-c-new","(text, old_name, new_name, comment, singleton = false)","<p>Creates a new Alias with a token stream of <code>text</code> that aliases\n<code>old_name</code> to <code>new_name</code>, has <code>comment</code>\nand is …\n"],["new","RDoc::AnyMethod","RDoc/AnyMethod.html#method-c-new","(text, name)","<p>Creates a new AnyMethod with a token stream <code>text</code> and\n<code>name</code>\n"],["new","RDoc::Attr","RDoc/Attr.html#method-c-new","(text, name, rw, comment, singleton = false)","<p>Creates a new Attr with body <code>text</code>, <code>name</code>,\nread/write status <code>rw</code> and <code>comment</code>. \n<code>singleton</code> marks this as a …\n"],["new","RDoc::ClassModule","RDoc/ClassModule.html#method-c-new","(name, superclass = nil)","<p>Creates a new ClassModule with <code>name</code> with optional\n<code>superclass</code>\n<p>This is a constructor for subclasses, and …\n"],["new","RDoc::CodeObject","RDoc/CodeObject.html#method-c-new","()","<p>Creates a new CodeObject that will document itself and its children\n"],["new","RDoc::Comment","RDoc/Comment.html#method-c-new","(text = nil, location = nil)","<p>Creates a new comment with <code>text</code> that is found in the\nRDoc::TopLevel <code>location</code>.\n"],["new","RDoc::Constant","RDoc/Constant.html#method-c-new","(name, value, comment)","<p>Creates a new constant with <code>name</code>, <code>value</code> and\n<code>comment</code>\n"],["new","RDoc::Context","RDoc/Context.html#method-c-new","()","<p>Creates an unnamed empty context with public current visibility\n"],["new","RDoc::Context::Section","RDoc/Context/Section.html#method-c-new","(parent, title, comment)","<p>Creates a new section with <code>title</code> and <code>comment</code>\n"],["new","RDoc::CrossReference","RDoc/CrossReference.html#method-c-new","(context)","<p>Allows cross-references to be created based on the given\n<code>context</code> (RDoc::Context).\n"],["new","RDoc::ERBIO","RDoc/ERBIO.html#method-c-new","(str, safe_level = nil, trim_mode = nil, eoutvar = 'io')","<p>Defaults <code>eoutvar</code> to ‘io’, otherwise is identical to ERB’s\ninitialize\n"],["new","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-c-new","(options)","<p>Initialize a few instance variables before we start\n"],["new","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-c-new","(parent_generator, options)","<p>Creates a new generator.  <code>parent_generator</code> is used to\ndetermine the class_dir and file_dir of links in …\n"],["new","RDoc::Generator::RI","RDoc/Generator/RI.html#method-c-new","(options)","<p>Set up a new ri generator\n"],["new","RDoc::Include","RDoc/Include.html#method-c-new","(name, comment)","<p>Creates a new Include for <code>name</code> with <code>comment</code>\n"],["new","RDoc::Markup","RDoc/Markup.html#method-c-new","(attribute_manager = nil)","<p>Take a block of text and use various heuristics to determine its structure\n(paragraphs, lists, and so …\n"],["new","RDoc::Markup::AttrSpan","RDoc/Markup/AttrSpan.html#method-c-new","(length)","<p>Creates a new AttrSpan for <code>length</code> characters\n"],["new","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-c-new","()","<p>Creates a new attribute manager that understands bold, emphasized and\nteletype text.\n"],["new","RDoc::Markup::BlankLine","RDoc/Markup/BlankLine.html#method-c-new","()","<p>RDoc::Markup::BlankLine is a singleton\n"],["new","RDoc::Markup::Document","RDoc/Markup/Document.html#method-c-new","(*parts)","<p>Creates a new Document with <code>parts</code>\n"],["new","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-c-new","(markup = nil)","<p>Creates a new Formatter\n"],["new","RDoc::Markup::Include","RDoc/Markup/Include.html#method-c-new","(file, include_path)","<p>Creates a new include that will import <code>file</code> from\n<code>include_path</code>\n"],["new","RDoc::Markup::IndentedParagraph","RDoc/Markup/IndentedParagraph.html#method-c-new","(indent, *parts)","<p>Creates a new IndentedParagraph containing <code>parts</code> indented with\n<code>indent</code> spaces\n"],["new","RDoc::Markup::List","RDoc/Markup/List.html#method-c-new","(type = nil, *items)","<p>Creates a new list of <code>type</code> with <code>items</code>.  Valid\nlist types are: <code>:BULLET</code>, <code>:LABEL</code>,\n<code>:LALPHA</code>, <code>:NOTE</code>, <code>:NUMBER</code> …\n"],["new","RDoc::Markup::ListItem","RDoc/Markup/ListItem.html#method-c-new","(label = nil, *parts)","<p>Creates a new ListItem with an optional <code>label</code> containing\n<code>parts</code>\n"],["new","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-c-new","()","<p>Creates a new Parser.  See also ::parse\n"],["new","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-c-new","(input_file_name, include_path)","<p>Creates a new pre-processor for <code>input_file_name</code> that will look\nfor included files in <code>include_path</code>\n"],["new","RDoc::Markup::Raw","RDoc/Markup/Raw.html#method-c-new","(*parts)","<p>Creates a new Raw containing <code>parts</code>\n"],["new","RDoc::Markup::Special","RDoc/Markup/Special.html#method-c-new","(type, text)","<p>Creates a new special sequence of <code>type</code> with <code>text</code>\n"],["new","RDoc::Markup::ToAnsi","RDoc/Markup/ToAnsi.html#method-c-new","(markup = nil)","<p>Creates a new ToAnsi visitor that is ready to output vibrant ANSI color!\n"],["new","RDoc::Markup::ToBs","RDoc/Markup/ToBs.html#method-c-new","(markup = nil)","<p>Returns a new ToBs that is ready for hot backspace action!\n"],["new","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-c-new","(markup = nil)","<p>Creates a new formatter that will output HTML\n"],["new","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-c-new","(from_path, context, show_hash, hyperlink_all = false, markup = nil)","<p>Creates a new crossref resolver that generates links relative to\n<code>context</code> which lives at <code>from_path</code> in …\n"],["new","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-c-new","(characters = 100, paragraphs = 3, markup = nil)","<p>Creates a new ToHtmlSnippet formatter that will cut off the input on the\nnext word boundary after the …\n"],["new","RDoc::Markup::ToLabel","RDoc/Markup/ToLabel.html#method-c-new","(markup = nil)","<p>Creates a new formatter that will output HTML-safe labels\n"],["new","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-c-new","(markup = nil)","<p>Creates a new formatter that will output (mostly) RDoc markup\n"],["new","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-c-new","(markup = nil)","<p>Creates a new tt-only formatter.\n"],["new","RDoc::MethodAttr","RDoc/MethodAttr.html#method-c-new","(text, name)","<p>Creates a new MethodAttr from token stream <code>text</code> and method or\nattribute name <code>name</code>.\n<p>Usually this is called …\n"],["new","RDoc::Parser","RDoc/Parser.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Creates a new Parser storing <code>top_level</code>,\n<code>file_name</code>, <code>content</code>, <code>options</code> and\n<code>stats</code> in instance variables. …\n"],["new","RDoc::Parser::C","RDoc/Parser/C.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Prepare to parse a C file\n"],["new","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Creates a new Ruby parser.\n"],["new","RDoc::Parser::Simple","RDoc/Parser/Simple.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Prepare to parse a plain file\n"],["new","RDoc::RD::Inline","RDoc/RD/Inline.html#method-c-new","(rdoc, reference)","<p>Initializes the Inline with <code>rdoc</code> and <code>inline</code>\n"],["new","RDoc::RD::Inline","RDoc/RD/Inline.html#method-c-new","(rdoc, reference = rdoc)","<p>Creates a new Inline for <code>rdoc</code> and <code>reference</code>.\n<p><code>rdoc</code> may be another Inline or a String.  If\n<code>reference</code> is ...\n"],["new","RDoc::RDoc","RDoc/RDoc.html#method-c-new","()","<p>Creates a new RDoc::RDoc instance.  Call #document to parse files and\ngenerate documentation.\n"],["new","RDoc::RI::Driver","RDoc/RI/Driver.html#method-c-new","(initial_options = {})","<p>Creates a new driver using <code>initial_options</code> from ::process_args\n"],["new","RDoc::RI::Store","RDoc/RI/Store.html#method-c-new","(path, type = nil)","<p>Creates a new Store of <code>type</code> that will load or save to\n<code>path</code>\n"],["new","RDoc::Require","RDoc/Require.html#method-c-new","(name, comment)","<p>Creates a new Require that loads <code>name</code> with\n<code>comment</code>\n"],["new","RDoc::RubyLex","RDoc/RubyLex.html#method-c-new","(content, options)","<p>Creates a new lexer for <code>content</code>.  <code>options</code> is an\nRDoc::Options, only +tab_width is used.\n"],["new","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-new","(spec, generate_rdoc = true, generate_ri = true)","<p>Creates a new documentation generator for <code>spec</code>.  RDoc and ri\ndata generation can be disabled through …\n"],["new","RDoc::Stats","RDoc/Stats.html#method-c-new","(num_files, verbosity = 1)","<p>Creates a new Stats that will have <code>num_files</code>. \n<code>verbosity</code> defaults to 1 which will create an\nRDoc::Stats::Normal …\n"],["new","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-c-new","(num_files)","<p>Creates a new Quiet that will print nothing\n"],["new","RDoc::Task","RDoc/Task.html#method-c-new","(name = :rdoc)","<p>Create an RDoc task with the given name. See the RDoc::Task class overview\nfor documentation.\n"],["new","RDoc::TomDoc","RDoc/TomDoc.html#method-c-new","()","<p>Creates a new TomDoc parser.  See also RDoc::Markup::parse\n"],["new","RDoc::TopLevel","RDoc/TopLevel.html#method-c-new","(file_name)","<p>Creates a new TopLevel for <code>file_name</code>\n"],["new","RDoc::TopLevel","RDoc/TopLevel.html#method-c-new","(file_name)","<p>Creates a new RDoc::TopLevel with <code>file_name</code> only if one with\nthe same name does not exist in all_files. …\n"],["new_comment","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-new_comment","(comment)","<p>Creates a comment with the correct format\n"],["nodoc","RDoc::Stats::Verbose","RDoc/Stats/Verbose.html#method-i-nodoc","(co)","<p>Returns a marker for RDoc::CodeObject <code>co</code> being undocumented\n"],["non_aliases","RDoc::ClassModule","RDoc/ClassModule.html#method-i-non_aliases","()","<p>Returns the classes and modules that are not constants aliasing another\nclass or module. For use by formatters …\n"],["normalize","RDoc::Comment","RDoc/Comment.html#method-i-normalize","()","<p>Normalizes the text.  See RDoc::Text#normalize_comment for details\n"],["normalize","RDoc::Markup::Verbatim","RDoc/Markup/Verbatim.html#method-i-normalize","()","<p>Collapses 3+ newlines into two newlines\n"],["normalize_comment","RDoc::Text","RDoc/Text.html#method-i-normalize_comment","(text)","<p>Strips hashes, expands tabs then flushes <code>text</code> to the left\n"],["normalized_file_list","RDoc::RDoc","RDoc/RDoc.html#method-i-normalized_file_list","(relative_files, force_doc = false, exclude_pattern = nil)","<p>Given a list of files and directories, create a list of all the Ruby files\nthey contain.\n<p>If <code>force_doc</code> …\n"],["object_class","RDoc::TopLevel","RDoc/TopLevel.html#method-i-object_class","()","<p>Returns the NormalClass “Object”, creating it if not found.\n<p>Records <code>self</code> as a location in “Object”. …\n"],["off_tags","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-off_tags","(res, item)","<p>Turns off tags for <code>item</code> on <code>res</code>\n"],["off_tags","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-off_tags","(res, item)","<p>Maintains a bitmask to allow HTML elements to be closed properly.  See\nRDoc::Markup::Formatter.\n"],["on_tags","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-on_tags","(res, item)","<p>Turns on tags for <code>item</code> on <code>res</code>\n"],["on_tags","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-on_tags","(res, item)","<p>Maintains a bitmask to allow HTML elements to be closed properly.  See\nRDoc::Markup::Formatter.\n"],["ongoing_visibility=","RDoc::Context","RDoc/Context.html#method-i-ongoing_visibility-3D","(visibility)","<p>Changes the visibility for new methods to <code>visibility</code>\n"],["option_list","RDoc::Task","RDoc/Task.html#method-i-option_list","()","<p>List of options that will be supplied to RDoc\n"],["output_flag_file","RDoc::RDoc","RDoc/RDoc.html#method-i-output_flag_file","(op_dir)","<p>Return the path name of the flag file in an output directory.\n"],["output_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-output_name","(context)","<p>Name for output to HTML.  For class methods the full name with a “.” is\nused like <code>SomeClass.method_name</code> …\n"],["page","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-page","()","<p>Paginates output through a pager program.\n"],["page","RDoc::TopLevel","RDoc/TopLevel.html#method-c-page","(name)","<p>Returns the RDoc::TopLevel that has the given <code>name</code>\n"],["page_name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-page_name","()","<p>Base name of this file without the extension\n"],["paging?","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-paging-3F","()","<p>Are we using a pager?\n"],["param_list","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-param_list","()","<p>A list of this method’s method and yield parameters.  <code>call-seq</code>\nparams are preferred over parsed method …\n"],["param_seq","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-param_seq","()","<p>Pretty parameter list for this method.  If the method’s parameters were\ngiven by <code>call-seq</code> it is preferred …\n"],["parent_file_name","RDoc::CodeObject","RDoc/CodeObject.html#method-i-parent_file_name","()","<p>File name of our parent\n"],["parent_name","RDoc::CodeObject","RDoc/CodeObject.html#method-i-parent_name","()","<p>Name of our parent\n"],["parent_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-parent_name","()","<p>Name of our parent with special handling for un-marshaled methods\n"],["parse","RDoc::ClassModule","RDoc/ClassModule.html#method-i-parse","(comment_location)","<p>Parses <code>comment_location</code> into an RDoc::Markup::Document\ncomposed of multiple RDoc::Markup::Documents with …\n"],["parse","RDoc::Comment","RDoc/Comment.html#method-i-parse","()","<p>Parses the comment into an RDoc::Markup::Document.  The parsed document is\ncached until the text is changed. …\n"],["parse","RDoc::Markup","RDoc/Markup.html#method-c-parse","(str)","<p>Parses <code>str</code> into an RDoc::Markup::Document.\n"],["parse","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-parse","(parent, indent = 0)","<p>Parses the tokens into an array of RDoc::Markup::XXX objects, and appends\nthem to the passed <code>parent</code>  …\n"],["parse","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-c-parse","(str)","<p>Parses <code>str</code> into a Document.\n<p>Use RDoc::Markup#parse instead of this method.\n"],["parse","RDoc::Options","RDoc/Options.html#method-i-parse","(argv)","<p>Parses command line options.\n"],["parse","RDoc::RD","RDoc/RD.html#method-c-parse","(rd)","<p>Parses <code>rd</code> source and returns an RDoc::Markup::Document.  If\nthe <code>=begin</code> or <code>=end</code> lines are missing they …\n"],["parse","RDoc::Text","RDoc/Text.html#method-i-parse","(text, format = 'rdoc')","<p>Normalizes <code>text</code> then builds a RDoc::Markup::Document from it\n"],["parse","RDoc::TomDoc","RDoc/TomDoc.html#method-c-parse","(text)","<p>Parses TomDoc from text\n<p>text &mdash; A String containing TomDoc-format text.\n\n<p>Examples\n"],["parse_alias","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_alias","(context, single, tk, comment)","<p>Parses an <code>alias</code> in <code>context</code> with\n<code>comment</code>\n"],["parse_attr","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_attr","(context, single, tk, comment)","<p>Creates an RDoc::Attr for the name following <code>tk</code>, setting the\ncomment to <code>comment</code>.\n"],["parse_attr_accessor","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_attr_accessor","(context, single, tk, comment)","<p>Creates an RDoc::Attr for each attribute listed after <code>tk</code>,\nsetting the comment for each to <code>comment</code>.\n"],["parse_call_parameters","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_call_parameters","(tk)","<p>Extracts call parameters from the token stream.\n"],["parse_class","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_class","(container, single, tk, comment)","<p>Parses a class in <code>context</code> with <code>comment</code>\n"],["parse_comment","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_comment","(container, tk, comment)","<p>Generates an RDoc::Method or RDoc::Attr from <code>comment</code> by\nlooking for :method: or :attr: directives in …\n"],["parse_comment_tomdoc","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_comment_tomdoc","(container, tk, comment)","<p>Creates an RDoc::Method on <code>container</code> from <code>comment</code>\nif there is a Signature section in the comment\n"],["parse_constant","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_constant","(container, tk, comment)","<p>Parses a constant in <code>context</code> with <code>comment</code>\n"],["parse_dot_doc_file","RDoc::RDoc","RDoc/RDoc.html#method-i-parse_dot_doc_file","(in_dir, filename)","<p>The .document file contains a list of file and directory name patterns,\nrepresenting candidates for documentation. …\n"],["parse_file","RDoc::RDoc","RDoc/RDoc.html#method-i-parse_file","(filename)","<p>Parses <code>filename</code> and returns an RDoc::TopLevel\n"],["parse_files","RDoc::RDoc","RDoc/RDoc.html#method-i-parse_files","(files)","<p>Parse each file on the command line, recursively entering directories.\n"],["parse_files_matching","RDoc::Parser","RDoc/Parser.html#method-c-parse_files_matching","(regexp)","<p>Record which file types this parser can understand.\n<p>It is ok to call this multiple times.\n"],["parse_include","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_include","(context, comment)","<p>Parses an <code>include</code> in <code>context</code> with\n<code>comment</code>\n"],["parse_meta_attr","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_meta_attr","(context, single, tk, comment)","<p>Parses a meta-programmed attribute and creates an RDoc::Attr.\n<p>To create foo and bar attributes on class …\n"],["parse_meta_method","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_meta_method","(container, single, tk, comment)","<p>Parses a meta-programmed method\n"],["parse_method","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method","(container, single, tk, comment)","<p>Parses a normal method defined by <code>def</code>\n"],["parse_method_or_yield_parameters","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method_or_yield_parameters","(method = nil, modifiers = RDoc::METHOD_MODIFIERS)","<p>Extracts <code>yield</code> parameters from <code>method</code>\n"],["parse_method_parameters","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method_parameters","(method)","<p>Capture the method’s parameters. Along the way, look for a comment\ncontaining:\n\n<pre># yields: ....</pre>\n<p>and add this …\n"],["parse_module","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_module","(container, single, tk, comment)","<p>Parses an RDoc::NormalModule in <code>container</code> with\n<code>comment</code>\n"],["parse_name","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-parse_name","(name)","<p>Extracts the class, selector and method name parts from <code>name</code>\nlike Foo::Bar#baz.\n<p>NOTE: Given Foo::Bar, …\n"],["parse_require","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_require","(context, comment)","<p>Parses an RDoc::Require in <code>context</code> containing\n<code>comment</code>\n"],["parse_statements","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_statements","(container, single = NORMAL, current_method = nil, comment = new_comment(''))","<p>The core of the ruby parser.\n"],["parse_symbol_arg","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_symbol_arg","(no = nil)","<p>Parse up to <code>no</code> symbol arguments\n"],["parse_symbol_in_arg","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_symbol_in_arg","()","<p>Returns symbol text from the next token\n"],["parse_top_level_statements","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_top_level_statements","(container)","<p>Parses statements in the top-level <code>container</code>\n"],["parse_visibility","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_visibility","(container, single, tk)","<p>Determines the visibility in <code>container</code> from <code>tk</code>\n"],["parse_yield","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_yield","(context, single, tk, method)","<p>Determines the block parameter for <code>context</code>\n"],["parseable?","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-parseable-3F","(text)","<p>Returns true if Ripper is available it can create a sexp from\n<code>text</code>\n"],["path","RDoc::ClassModule","RDoc/ClassModule.html#method-i-path","()","<p>Path to this class or module\n"],["path","RDoc::Constant","RDoc/Constant.html#method-i-path","()","<p>Path to this constant\n"],["path","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-path","()","<p>Path to this method\n"],["path","RDoc::RI::Paths","RDoc/RI/Paths.html#method-c-path","(system, site, home, gems, *extra_dirs)","<p>Returns existing directories from the selected documentation directories as\nan Array.\n<p>See also ::each …\n"],["path","RDoc::TopLevel","RDoc/TopLevel.html#method-i-path","()","<p>Path to this file\n"],["peek_read","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-peek_read","()","<p>Peek equivalent for get_tkread\n"],["peek_tk","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-peek_tk","()","<p>Peek at the next token, but don’t remove it from the stream\n"],["peek_token","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-peek_token","()","<p>Returns the next token on the stream without modifying the stream\n"],["percent_doc","RDoc::Stats","RDoc/Stats.html#method-i-percent_doc","()","<p>Calculates the percentage of items documented.\n"],["plain_html","RDoc::Context::Section","RDoc/Context/Section.html#method-i-plain_html","()","<p>The section’s title, or ‘Top Section’ if the title is nil.\n<p>This is used by the table of contents template …\n"],["plain_html","RDoc::Markup::Heading","RDoc/Markup/Heading.html#method-i-plain_html","()","<p>HTML markup of the text of this label without the surrounding header\nelement.\n"],["pop_token","RDoc::TokenStream","RDoc/TokenStream.html#method-i-pop_token","()","<p>Remove the last token from the collected tokens\n"],["post_process","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-c-post_process","(&block)","<p>Adds a post-process handler for directives.  The handler will be called\nwith the result RDoc::Comment …\n"],["post_processors","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-c-post_processors","()","<p>Registered post-processors\n"],["pretty_name","RDoc::Alias","RDoc/Alias.html#method-i-pretty_name","()",""],["pretty_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-pretty_name","()","<p>Method/attribute name with class/instance indicator\n"],["pretty_new_name","RDoc::Alias","RDoc/Alias.html#method-i-pretty_new_name","()","<p>New name with prefix ‘::’ or ‘#’.\n"],["pretty_old_name","RDoc::Alias","RDoc/Alias.html#method-i-pretty_old_name","()","<p>Old name with prefix ‘::’ or ‘#’.\n"],["print_alias","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_alias","(*)","<p>Prints when an alias is added\n"],["print_attribute","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_attribute","(*)","<p>Prints when an attribute is added\n"],["print_class","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_class","(*)","<p>Prints when a class is added\n"],["print_constant","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_constant","(*)","<p>Prints when a constant is added\n"],["print_file","RDoc::Stats::Normal","RDoc/Stats/Normal.html#method-i-print_file","(files_so_far, filename)","<p>Prints a file with a progress bar\n"],["print_file","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_file","(*)","<p>Prints when a file is added\n"],["print_method","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_method","(*)","<p>Prints when a method is added\n"],["print_module","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_module","(*)","<p>Prints when a module is added\n"],["process_args","RDoc::RI::Driver","RDoc/RI/Driver.html#method-c-process_args","(argv)","<p>Parses <code>argv</code> and returns a Hash of options\n"],["process_directive","RDoc::Parser","RDoc/Parser.html#method-c-process_directive","(code_object, directive, value)","<p>Processes common directives for CodeObjects for the C and Ruby parsers.\n<p>Applies <code>directive</code>‘s <code>value</code> to  …\n"],["push","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-push","(*parts)","<p>Appends <code>parts</code> to the document\n"],["push","RDoc::Markup::List","RDoc/Markup/List.html#method-i-push","(*items)","<p>Appends <code>items</code> to the list\n"],["push","RDoc::Markup::ListItem","RDoc/Markup/ListItem.html#method-i-push","(*parts)","<p>Adds <code>parts</code> to the ListItem\n"],["push","RDoc::Markup::Raw","RDoc/Markup/Raw.html#method-i-push","(*texts)","<p>Appends <code>texts</code> onto this Paragraph\n"],["quiet","RDoc::Options","RDoc/Options.html#method-i-quiet","()","<p>Don’t display progress as we process the files\n"],["quiet=","RDoc::Options","RDoc/Options.html#method-i-quiet-3D","(bool)","<p>Set quietness to <code>bool</code>\n"],["raw_path","RDoc::RI::Paths","RDoc/RI/Paths.html#method-c-raw_path","(system, site, home, gems, *extra_dirs)","<p>Returns selected documentation directories including nonexistent\ndirectories.\n<p>See also ::each\n"],["rb_scan_args","RDoc::Parser::C","RDoc/Parser/C.html#method-i-rb_scan_args","(method_body)","<p>Extracts parameters from the <code>method_body</code> and returns a method\nparameter string.  Follows 1.9.3dev’s scan-arg-spec, …\n"],["rdoc_installed?","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-rdoc_installed-3F","()","<p>Is rdoc documentation installed?\n"],["rdoc_task_description","RDoc::Task","RDoc/Task.html#method-i-rdoc_task_description","()","<p>Task description for the rdoc task or its renamed equivalent\n"],["read_directive","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-read_directive","(allowed)","<p>Directives are modifier comments that can appear after class, module, or\nmethod names. For example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["read_documentation_modifiers","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-read_documentation_modifiers","(context, allow)","<p>Handles the directive for <code>context</code> if the directive is listed\nin <code>allow</code>. This method is called for directives …\n"],["read_file","RDoc::Encoding","RDoc/Encoding.html#method-c-read_file","(filename, encoding, force_transcode = false)","<p>Reads the contents of <code>filename</code> and handles any encoding\ndirectives in the file.\n<p>The content will be converted …\n"],["record_location","RDoc::CodeObject","RDoc/CodeObject.html#method-i-record_location","(top_level)","<p>Records the RDoc::TopLevel (file) where this code object was defined\n"],["record_location","RDoc::Context","RDoc/Context.html#method-i-record_location","(top_level)","<p>Record <code>top_level</code> as a file <code>self</code> is in.\n"],["register","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-c-register","(directive, &block)","<p>Registers <code>directive</code> as one handled by RDoc.  If a block is\ngiven the directive will be replaced by the …\n"],["registered","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-c-registered","()","<p>Registered directives\n"],["remove","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-remove","()","<p>Removes generated RDoc and ri data\n"],["remove_coding_comment","RDoc::Parser::Simple","RDoc/Parser/Simple.html#method-i-remove_coding_comment","(text)","<p>Removes the encoding magic comment from <code>text</code>\n"],["remove_commented_out_lines","RDoc::Parser::C","RDoc/Parser/C.html#method-i-remove_commented_out_lines","()","<p>Removes lines that are commented out that might otherwise get picked up\nwhen scanning for classes and …\n"],["remove_from_documentation?","RDoc::Context","RDoc/Context.html#method-i-remove_from_documentation-3F","()","<p>Should we remove this context from the documentation?\n<p>The answer is yes if:\n<p>#received_nodoc is <code>true</code>\n"],["remove_invisible","RDoc::Context","RDoc/Context.html#method-i-remove_invisible","(min_visibility)","<p>Removes methods and attributes with a visibility less than\n<code>min_visibility</code>.\n"],["remove_nodoc","RDoc::TopLevel","RDoc/TopLevel.html#method-c-remove_nodoc","(all_hash)","<p>Removes from <code>all_hash</code> the contexts that are nodoc or have no\ncontent.\n<p>See RDoc::Context#remove_from_documentation? …\n"],["remove_nodoc_children","RDoc::ClassModule","RDoc/ClassModule.html#method-i-remove_nodoc_children","()","<p>Updates the child modules or classes of class/module <code>parent</code> by\ndeleting the ones that have been removed …\n"],["remove_private","RDoc::Comment","RDoc/Comment.html#method-i-remove_private","()","<p>Removes private sections from this comment.  Private sections are flush to\nthe comment marker and start …\n"],["remove_private_comment","RDoc::Parser::Simple","RDoc/Parser/Simple.html#method-i-remove_private_comment","(comment)","<p>Removes private comments.\n<p>Unlike RDoc::Comment#remove_private this implementation only looks for two\ndashes …\n"],["remove_private_comments","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-remove_private_comments","(comment)","<p>Removes private comments from <code>comment</code>\n"],["remove_siginfo_handler","RDoc::Generator::RI","RDoc/Generator/RI.html#method-i-remove_siginfo_handler","()","<p>Removes a siginfo handler and replaces the previous\n"],["remove_siginfo_handler","RDoc::RDoc","RDoc/RDoc.html#method-i-remove_siginfo_handler","()","<p>Removes a siginfo handler and replaces the previous\n"],["remove_token_listener","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-remove_token_listener","(obj)","<p>Removes the token listener <code>obj</code>\n"],["remove_unparseable","RDoc::RDoc","RDoc/RDoc.html#method-i-remove_unparseable","(files)","<p>Removes file extensions known to be unparseable from <code>files</code> and\nTAGS files for emacs and vim.\n"],["render","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-render","(file_name)","<p>Renders the ERb contained in <code>file_name</code> relative to the\ntemplate directory and returns the result based …\n"],["render_template","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-render_template","(template_file, out_file)","<p>Load and render the erb template in the given <code>template_file</code>\nand write it out to <code>out_file</code>.\n<p>Both <code>template_file</code> …\n"],["report","RDoc::Stats","RDoc/Stats.html#method-i-report","()","<p>Returns a report on which items are not documented\n"],["report_attributes","RDoc::Stats","RDoc/Stats.html#method-i-report_attributes","(cm)","<p>Returns a report on undocumented attributes in ClassModule <code>cm</code>\n"],["report_class_module","RDoc::Stats","RDoc/Stats.html#method-i-report_class_module","(cm)","<p>Returns a report on undocumented items in ClassModule <code>cm</code>\n"],["report_constants","RDoc::Stats","RDoc/Stats.html#method-i-report_constants","(cm)","<p>Returns a report on undocumented constants in ClassModule <code>cm</code>\n"],["report_methods","RDoc::Stats","RDoc/Stats.html#method-i-report_methods","(cm)","<p>Returns a report on undocumented methods in ClassModule <code>cm</code>\n"],["rerdoc_task_description","RDoc::Task","RDoc/Task.html#method-i-rerdoc_task_description","()","<p>Task description for the rerdoc task or its renamed description\n"],["reset","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-c-reset","()","<p>Clears all registered directives and post-processors\n"],["reset","RDoc::Parser::C","RDoc/Parser/C.html#method-c-reset","()","<p>Resets cross-file state.  Call when parsing different projects that need\nseparate documentation.\n"],["reset","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-reset","()","<p>Resets the tools\n"],["reset","RDoc::RDoc","RDoc/RDoc.html#method-c-reset","()","<p>Resets all internal state\n"],["reset","RDoc::TopLevel","RDoc/TopLevel.html#method-c-reset","()","<p>Empties RDoc of stored class, module and file information\n"],["resolve","RDoc::CrossReference","RDoc/CrossReference.html#method-i-resolve","(name, text)","<p>Returns a reference to <code>name</code>.\n<p>If the reference is found and <code>name</code> is not documented\n<code>text</code> will be returned. …\n"],["resolve_aliases","RDoc::Context","RDoc/Context.html#method-i-resolve_aliases","(added)","<p>Tries to resolve unmatched aliases when a method or attribute has just been\nadded.\n"],["ri_installed?","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-ri_installed-3F","()","<p>Is ri data installed?\n"],["ruby?","RDoc::Markup::Verbatim","RDoc/Markup/Verbatim.html#method-i-ruby-3F","()","<p>Is this verbatim section ruby code?\n"],["run","RDoc::Gauntlet","RDoc/Gauntlet.html#method-i-run","(name)","<p>Runs an RDoc generator for gem <code>name</code>\n"],["run","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-run","()","<p>Looks up and displays ri data according to the options given.\n"],["run","RDoc::RI::Driver","RDoc/RI/Driver.html#method-c-run","(argv = ARGV)","<p>Runs the ri command line executable using <code>argv</code>\n"],["run_the_gauntlet","RDoc::Gauntlet","RDoc/Gauntlet.html#method-i-run_the_gauntlet","(type = 'rdoc', filter = nil)","<p>Runs the gauntlet with the given <code>type</code> (rdoc or ri) and\n<code>filter</code> for which gems to run\n"],["sanitize_path","RDoc::Options","RDoc/Options.html#method-i-sanitize_path","(path)","<p>Removes directories from <code>path</code> that are outside the current\ndirectory\n"],["save_cache","RDoc::RI::Store","RDoc/RI/Store.html#method-i-save_cache","()","<p>Writes the cache file for this store\n"],["save_class","RDoc::RI::Store","RDoc/RI/Store.html#method-i-save_class","(klass)","<p>Writes the ri data for <code>klass</code>\n"],["save_method","RDoc::RI::Store","RDoc/RI/Store.html#method-i-save_method","(klass, method)","<p>Writes the ri data for <code>method</code> on <code>klass</code>\n"],["scan","RDoc::Parser::C","RDoc/Parser/C.html#method-i-scan","()","<p>Extracts the classes, modules, methods, attributes, constants and aliases\nfrom a C file and returns an …\n"],["scan","RDoc::Parser::RD","RDoc/Parser/RD.html#method-i-scan","()","<p>Creates an rd-format TopLevel for the given file.\n"],["scan","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-scan","()","<p>Scans this ruby file for ruby constructs\n"],["scan","RDoc::Parser::Simple","RDoc/Parser/Simple.html#method-i-scan","()","<p>Extract the file contents and attach them to the TopLevel as a comment\n"],["search_record","RDoc::ClassModule","RDoc/ClassModule.html#method-i-search_record","()","<p>Search record used by RDoc::Generator::JsonIndex\n"],["search_record","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-search_record","()","<p>Used by RDoc::Generator::JsonIndex to create a record for the search\nengine.\n"],["search_record","RDoc::TopLevel","RDoc/TopLevel.html#method-i-search_record","()","<p>Search record used by RDoc::Generator::JsonIndex\n"],["search_string","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-search_string","(string)","<p>Removes whitespace and downcases <code>string</code>\n"],["section_contents","RDoc::Context","RDoc/Context.html#method-i-section_contents","()","<p>Returns RDoc::Context::Section objects referenced in this context for use\nin a table of contents.\n"],["sections","RDoc::Context","RDoc/Context.html#method-i-sections","()","<p>Sections in this context\n"],["see","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-see","()","<p>A method/attribute to look at, in particular if this method/attribute has\nno documentation.\n<p>It can be …\n"],["sequence","RDoc::Context::Section","RDoc/Context/Section.html#method-i-sequence","()","<p>Section sequence number (deprecated)\n"],["set_attrs","RDoc::Markup::AttrSpan","RDoc/Markup/AttrSpan.html#method-i-set_attrs","(start, length, bits)","<p>Toggles <code>bits</code> from <code>start</code> to <code>length</code>\n"],["set_current_section","RDoc::Context","RDoc/Context.html#method-i-set_current_section","(title, comment)","<p>Sets the current section to a section with <code>title</code>.  See also\n#add_section\n"],["set_encoding","RDoc::Encoding","RDoc/Encoding.html#method-c-set_encoding","(string)","<p>Sets the encoding of <code>string</code> based on the magic comment\n"],["set_eoutvar","RDoc::ERBIO","RDoc/ERBIO.html#method-i-set_eoutvar","(compiler, io_variable)","<p>Instructs <code>compiler</code> how to write to <code>io_variable</code>\n"],["set_visibility_for","RDoc::Context","RDoc/Context.html#method-i-set_visibility_for","(methods, visibility, singleton = false)","<p>Given an array <code>methods</code> of method names, set the visibility of\neach to <code>visibility</code>\n"],["setup","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-setup","()","<p>Call #setup when inheriting from this test case.\n<p>Provides the following instance variables:\n<p>+@m+ &mdash; RDoc::Markup.new …\n"],["setup","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-setup","()","<p>Prepares the spec for documentation generation\n"],["setup","RDoc::TestCase","RDoc/TestCase.html#method-i-setup","()","<p>Abstract test-case setup\n"],["setup_generator","RDoc::Options","RDoc/Options.html#method-i-setup_generator","(generator_name = @generator_name)","<p>Set up an output generator for the named <code>generator_name</code>.\n<p>If the found generator responds to :setup_options …\n"],["setup_output_dir","RDoc::RDoc","RDoc/RDoc.html#method-i-setup_output_dir","(dir, force)","<p>Create an output dir if it doesn’t exist. If it does exist, but doesn’t\ncontain the flag file <code>created.rid</code> …\n"],["setup_pager","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-setup_pager","()","<p>Sets up a pager program to pass output through.  Tries the RI_PAGER and\nPAGER environment variables followed …\n"],["signature","RDoc::TomDoc","RDoc/TomDoc.html#method-c-signature","(comment)","<p>Extracts the Signature section’s method signature\n<p>comment &mdash; An RDoc::Comment that will be parsed and have …\n\n"],["skip","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-skip","(token_type, error = true)","<p>Skips the next token if its type is <code>token_type</code>.\n<p>Optionally raises an error if the next token is not of …\n"],["skip_for_variable","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_for_variable","()","<p>skip the var [in] part of a ‘for’ statement\n"],["skip_method","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_method","(container)","<p>Skips the next method in <code>container</code>\n"],["skip_optional_do_after_expression","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_optional_do_after_expression","()","<p>while, until, and for have an optional do\n"],["skip_tkspace","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-skip_tkspace","(skip_nl = true)","<p>Skips whitespace tokens including newlines if <code>skip_nl</code> is true\n"],["skip_tkspace_comment","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_tkspace_comment","(skip_nl = true)","<p>Skip spaces until a comment is found\n"],["snippet","RDoc::Text","RDoc/Text.html#method-i-snippet","(text, limit = 100)","<p>The first <code>limit</code> characters of <code>text</code> as HTML\n"],["sort_sections","RDoc::Context","RDoc/Context.html#method-i-sort_sections","()","<p>Sorts sections alphabetically (default) or in TomDoc fasion (none, Public,\nInternal, Deprecated)\n"],["split_into_flow","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-split_into_flow","()","<p>Splits the string into chunks by attribute change\n"],["start_accepting","RDoc::Markup::ToAnsi","RDoc/Markup/ToAnsi.html#method-i-start_accepting","()","<p>Starts accepting with a reset screen\n"],["start_accepting","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-start_accepting","()","<p>Prepares the visitor for HTML generation\n"],["start_accepting","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-start_accepting","()","<p>Prepares the visitor for HTML snippet generation\n"],["start_accepting","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-start_accepting","()","<p>Prepares the visitor for text generation\n"],["start_accepting","RDoc::Markup::ToTableOfContents","RDoc/Markup/ToTableOfContents.html#method-i-start_accepting","()","<p>Prepares the visitor for text generation\n"],["start_accepting","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-start_accepting","()","<p>Prepares the visitor for gathering tt sections\n"],["start_collecting_tokens","RDoc::TokenStream","RDoc/TokenStream.html#method-i-start_collecting_tokens","()",""],["start_doc","RDoc::CodeObject","RDoc/CodeObject.html#method-i-start_doc","()","<p>Enable capture of documentation unless documentation has been turned off by\n:endoc:\n"],["stop_doc","RDoc::CodeObject","RDoc/CodeObject.html#method-i-stop_doc","()","<p>Disable capture of documentation\n"],["strip_hashes","RDoc::Text","RDoc/Text.html#method-i-strip_hashes","(text)","<p>Strips leading # characters from <code>text</code>\n"],["strip_newlines","RDoc::Text","RDoc/Text.html#method-i-strip_newlines","(text)","<p>Strips leading and trailing n characters from <code>text</code>\n"],["strip_stars","RDoc::Text","RDoc/Text.html#method-i-strip_stars","(text)","<p>Strips       style comments\n"],["summary","RDoc::Stats","RDoc/Stats.html#method-i-summary","()","<p>Returns a summary of the collected statistics.\n"],["superclass","RDoc::ClassModule","RDoc/ClassModule.html#method-i-superclass","()","<p>Get the superclass of this class.  Attempts to retrieve the superclass\nobject, returns the name if it …\n"],["superclass","RDoc::NormalModule","RDoc/NormalModule.html#method-i-superclass","()","<p>Modules don’t have one, raises NoMethodError\n"],["superclass=","RDoc::ClassModule","RDoc/ClassModule.html#method-i-superclass-3D","(superclass)","<p>Set the superclass of this class to <code>superclass</code>\n"],["table_of_contents","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-table_of_contents","()","<p>Returns an Array of headings in the document.\n<p>Require ‘rdoc/markup/formatter’ before calling this method. …\n"],["temp_dir","RDoc::TestCase","RDoc/TestCase.html#method-i-temp_dir","()","<p>Creates a temporary directory changes the current directory to it for the\nduration of the block.\n<p>Depends …\n"],["template_dir_for","RDoc::Options","RDoc/Options.html#method-i-template_dir_for","(template)","<p>Finds the template dir for <code>template</code>\n"],["template_for","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-template_for","(file, page = true, klass = nil)","<p>Retrieves a cache template for <code>file</code>, if present, or fills the\ncache.\n"],["template_result","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-template_result","(template, context, template_file)","<p>Creates the result for <code>template</code> with <code>context</code>.  If\nan error is raised a Pathname <code>template_file</code> will indicate …\n"],["test_accept_blank_line","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_blank_line","()","<p>Calls accept_blank_line\n"],["test_accept_document","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_document","()","<p>Test case that calls <code>@to.accept_document</code>\n"],["test_accept_heading","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading","()","<p>Calls accept_heading with a level 5 RDoc::Markup::Heading\n"],["test_accept_heading_1","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading_1","()","<p>Calls accept_heading_1 with a level 1 RDoc::Markup::Heading\n"],["test_accept_heading_2","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading_2","()","<p>Calls accept_heading_2 with a level 2 RDoc::Markup::Heading\n"],["test_accept_heading_3","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading_3","()","<p>Calls accept_heading_3 with a level 3 RDoc::Markup::Heading\n"],["test_accept_heading_4","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading_4","()","<p>Calls accept_heading_4 with a level 4 RDoc::Markup::Heading\n"],["test_accept_heading_b","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading_b","()","<p>Calls accept_heading_b with a bold level 1 RDoc::Markup::Heading\n"],["test_accept_heading_indent","RDoc::Markup::TextFormatterTestCase","RDoc/Markup/TextFormatterTestCase.html#method-i-test_accept_heading_indent","()","<p>Test case that calls <code>@to.accept_heading</code>\n"],["test_accept_heading_suppressed_crossref","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading_suppressed_crossref","()","<p>Calls accept_heading_suppressed_crossref with a level 1\nRDoc::Markup::Heading containing a suppressed …\n"],["test_accept_list_end_bullet","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_end_bullet","()","<p>Calls accept_list_end_bullet\n"],["test_accept_list_end_label","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_end_label","()","<p>Calls accept_list_end_label\n"],["test_accept_list_end_lalpha","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_end_lalpha","()","<p>Calls accept_list_end_lalpha\n"],["test_accept_list_end_note","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_end_note","()","<p>Calls accept_list_end_note\n"],["test_accept_list_end_number","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_end_number","()","<p>Calls accept_list_end_number\n"],["test_accept_list_end_ualpha","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_end_ualpha","()","<p>Calls accept_list_end_ulpha\n"],["test_accept_list_item_end_bullet","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_end_bullet","()","<p>Calls accept_list_item_end_bullet\n"],["test_accept_list_item_end_label","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_end_label","()","<p>Calls accept_list_item_end_label\n"],["test_accept_list_item_end_lalpha","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_end_lalpha","()","<p>Calls accept_list_item_end_lalpha\n"],["test_accept_list_item_end_note","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_end_note","()","<p>Calls accept_list_item_end_note\n"],["test_accept_list_item_end_number","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_end_number","()","<p>Calls accept_list_item_end_number\n"],["test_accept_list_item_end_ualpha","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_end_ualpha","()","<p>Calls accept_list_item_end_ualpha\n"],["test_accept_list_item_start_bullet","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_bullet","()","<p>Calls accept_list_item_start_bullet\n"],["test_accept_list_item_start_label","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_label","()","<p>Calls accept_list_item_start_label\n"],["test_accept_list_item_start_lalpha","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_lalpha","()","<p>Calls accept_list_item_start_lalpha\n"],["test_accept_list_item_start_note","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_note","()","<p>Calls accept_list_item_start_note\n"],["test_accept_list_item_start_note_2","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_note_2","()","<p>Calls accept_list_item_start_note_2\n"],["test_accept_list_item_start_number","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_number","()","<p>Calls accept_list_item_start_number\n"],["test_accept_list_item_start_ualpha","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_ualpha","()","<p>Calls accept_list_item_start_ualpha\n"],["test_accept_list_start_bullet","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_start_bullet","()","<p>Calls accept_list_start_bullet\n"],["test_accept_list_start_label","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_start_label","()","<p>Calls accept_list_start_label\n"],["test_accept_list_start_lalpha","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_start_lalpha","()","<p>Calls accept_list_start_lalpha\n"],["test_accept_list_start_note","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_start_note","()","<p>Calls accept_list_start_note\n"],["test_accept_list_start_number","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_start_number","()","<p>Calls accept_list_start_number\n"],["test_accept_list_start_ualpha","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_start_ualpha","()","<p>Calls accept_list_start_ualpha\n"],["test_accept_paragraph","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph","()","<p>Calls accept_paragraph\n"],["test_accept_paragraph_b","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph_b","()","<p>Calls accept_paragraph_b with a RDoc::Markup::Paragraph containing bold\nwords\n"],["test_accept_paragraph_i","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph_i","()","<p>Calls accept_paragraph_i with a RDoc::Markup::Paragraph containing\nemphasized words\n"],["test_accept_paragraph_indent","RDoc::Markup::TextFormatterTestCase","RDoc/Markup/TextFormatterTestCase.html#method-i-test_accept_paragraph_indent","()","<p>Test case that calls <code>@to.accept_paragraph</code> with an indent\n"],["test_accept_paragraph_plus","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph_plus","()","<p>Calls accept_paragraph_plus with a RDoc::Markup::Paragraph containing\nteletype words\n"],["test_accept_paragraph_star","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph_star","()","<p>Calls accept_paragraph_star with a RDoc::Markup::Paragraph containing bold\nwords\n"],["test_accept_paragraph_underscore","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph_underscore","()","<p>Calls accept_paragraph_underscore with a RDoc::Markup::Paragraph containing\nemphasized words\n"],["test_accept_paragraph_wrap","RDoc::Markup::TextFormatterTestCase","RDoc/Markup/TextFormatterTestCase.html#method-i-test_accept_paragraph_wrap","()","<p>Test case that calls <code>@to.accept_paragraph</code> with a long line\n"],["test_accept_raw","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_raw","()","<p>Calls accept_raw with a RDoc::Markup::Raw\n"],["test_accept_rule","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_rule","()","<p>Calls accept_rule with a RDoc::Markup::Rule\n"],["test_accept_rule_indent","RDoc::Markup::TextFormatterTestCase","RDoc/Markup/TextFormatterTestCase.html#method-i-test_accept_rule_indent","()","<p>Test case that calls <code>@to.accept_rule</code>\n"],["test_accept_verbatim","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_accept_verbatim","()","<p>Calls accept_verbatim with a RDoc::Markup::Verbatim\n"],["test_accept_verbatim_big_indent","RDoc::Markup::TextFormatterTestCase","RDoc/Markup/TextFormatterTestCase.html#method-i-test_accept_verbatim_big_indent","()","<p>Test case that calls <code>@to.accept_verbatim</code> with a big indent\n"],["test_accept_verbatim_indent","RDoc::Markup::TextFormatterTestCase","RDoc/Markup/TextFormatterTestCase.html#method-i-test_accept_verbatim_indent","()","<p>Test case that calls <code>@to.accept_verbatim</code>\n"],["test_attributes","RDoc::Markup::TextFormatterTestCase","RDoc/Markup/TextFormatterTestCase.html#method-i-test_attributes","()","<p>Test case that calls <code>@to.attributes</code> with an escaped\ncross-reference.  If this test doesn’t pass something …\n"],["test_end_accepting","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_end_accepting","()","<p>Calls end_accepting on your test case which needs to call\n<code>@to.end_accepting</code> and verify document generation …\n"],["test_list_nested","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_list_nested","()","<p>Calls list_nested with a two-level list\n"],["test_list_verbatim","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_list_verbatim","()","<p>Calls list_verbatim with a list containing a verbatim block\n"],["test_start_accepting","RDoc::Markup::FormatterTestCase","RDoc/Markup/FormatterTestCase.html#method-i-test_start_accepting","()","<p>Calls start_accepting which needs to verify startup state\n"],["text","RDoc::Markup::Raw","RDoc/Markup/Raw.html#method-i-text","()","<p>The raw text\n"],["text","RDoc::Markup::Verbatim","RDoc/Markup/Verbatim.html#method-i-text","()","<p>The text of the section\n"],["text=","RDoc::Comment","RDoc/Comment.html#method-i-text-3D","(text)","<p>Replaces this comment’s text with <code>text</code> and resets the parsed\ndocument.\n<p>An error is raised if the comment …\n"],["text?","RDoc::TopLevel","RDoc/TopLevel.html#method-i-text-3F","()","<p>Is this TopLevel from a text file instead of a source code file?\n"],["time_delta_string","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-time_delta_string","(seconds)","<p>Return a string describing the amount of time in the given number of\nseconds in terms a human can understand …\n"],["to_html","RDoc::Markup::Heading","RDoc/Markup/Heading.html#method-c-to_html","()","<p>A singleton plain HTML formatter for headings.  Used for creating labels\nfor the Table of Contents\n"],["to_html","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-to_html","(item)","<p>Converts <code>item</code> to HTML using RDoc::Text#to_html\n"],["to_html","RDoc::Text","RDoc/Text.html#method-i-to_html","(text)","<p>Converts ampersand, dashes, ellipsis, quotes, copyright and registered\ntrademark symbols in <code>text</code> to properly …\n"],["to_html","RDoc::TokenStream","RDoc/TokenStream.html#method-c-to_html","(token_stream)","<p>Converts <code>token_stream</code> to HTML wrapping various tokens with\n<code>&lt;span&gt;</code> elements.  The following tokens …\n"],["to_label","RDoc::Markup::Heading","RDoc/Markup/Heading.html#method-c-to_label","()","<p>A singleton RDoc::Markup::ToLabel formatter for headings.\n"],["to_toc","RDoc::Markup::ToTableOfContents","RDoc/Markup/ToTableOfContents.html#method-c-to_toc","()","<p>Singleton for ToC generation\n"],["token_listener","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-token_listener","(obj)","<p>Has <code>obj</code> listen to tokens\n"],["token_pos","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-token_pos","(offset)","<p>Calculates the column and line of the current token based on\n<code>offset</code>.\n"],["token_stream","RDoc::TokenStream","RDoc/TokenStream.html#method-i-token_stream","()","<p>Current token stream\n"],["tokenize","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-c-tokenize","(str)","<p>Returns a token stream for <code>str</code>, for testing\n"],["tokenize","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-tokenize","(input)","<p>Turns text <code>input</code> into a stream of tokens\n"],["tokenize","RDoc::RubyLex","RDoc/RubyLex.html#method-c-tokenize","(ruby, options)","<p>Returns an Array of <code>ruby</code> tokens.  See ::new for a description\nof <code>options</code>.\n"],["tokenize","RDoc::TomDoc","RDoc/TomDoc.html#method-i-tokenize","(text)","<p>Turns text into an Array of tokens\n<p>text &mdash; A String containing TomDoc-format text.\n\n<p>Returns self.\n"],["tokens_to_s","RDoc::TokenStream","RDoc/TokenStream.html#method-i-tokens_to_s","()","<p>Returns a string representation of the token stream\n"],["tomdoc?","RDoc::Comment","RDoc/Comment.html#method-i-tomdoc-3F","()","<p>Returns true if this comment is in TomDoc format.\n"],["top_level","RDoc::Context","RDoc/Context.html#method-i-top_level","()","<p>Return the TopLevel that owns us\n"],["top_level","RDoc::Require","RDoc/Require.html#method-i-top_level","()","<p>The RDoc::TopLevel corresponding to this require, or <code>nil</code> if\nnot found.\n"],["truncate","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-truncate","(text)","<p>Truncates <code>text</code> at the end of the first word after the\ncharacter_limit.\n"],["tt?","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-tt-3F","(tag)","<p>Is <code>tag</code> a tt tag?\n"],["tt_sections","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-tt_sections","(text)","<p>Extracts tt sections from <code>text</code>\n"],["type","RDoc::ClassModule","RDoc/ClassModule.html#method-i-type","()","<p>‘module’ or ‘class’\n"],["type","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-type","()","<p>Type of method/attribute (class or instance)\n"],["undoc_params","RDoc::Stats","RDoc/Stats.html#method-i-undoc_params","(method)","<p>Determines which parameters in <code>method</code> were not documented. \nReturns a total parameter count and an Array …\n"],["unget","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-unget","()","<p>Returns the current token to the token stream\n"],["unget_tk","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-unget_tk","(tk)","<p>Returns <code>tk</code> to the scanner\n"],["unique_classes","RDoc::TopLevel","RDoc/TopLevel.html#method-c-unique_classes","()","<p>Returns the unique classes discovered by RDoc.\n<p>::complete must have been called prior to using this method. …\n"],["unique_classes_and_modules","RDoc::TopLevel","RDoc/TopLevel.html#method-c-unique_classes_and_modules","()","<p>Returns the unique classes and modules discovered by RDoc. ::complete must\nhave been called prior to …\n"],["unique_modules","RDoc::TopLevel","RDoc/TopLevel.html#method-c-unique_modules","()","<p>Returns the unique modules discovered by RDoc. ::complete must have been\ncalled prior to using this method. …\n"],["unmask_protected_sequences","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-unmask_protected_sequences","()","<p>Unescapes special sequences of text\n"],["update_aliases","RDoc::ClassModule","RDoc/ClassModule.html#method-i-update_aliases","()","<p>Updates the child modules &amp; classes by replacing the ones that are\naliases through a constant.\n<p>The …\n"],["update_includes","RDoc::ClassModule","RDoc/ClassModule.html#method-i-update_includes","()","<p>Deletes from #includes those whose module has been removed from the\ndocumentation.\n"],["update_output_dir","RDoc::RDoc","RDoc/RDoc.html#method-i-update_output_dir","(op_dir, time, last = {})","<p>Update the flag file in an output directory.\n"],["upgrade_to_class","RDoc::Context","RDoc/Context.html#method-i-upgrade_to_class","(mod, class_type, enclosing)","<p>Upgrades NormalModule <code>mod</code> in <code>enclosing</code> to a\n<code>class_type</code>\n"],["use_markup","RDoc::Parser","RDoc/Parser.html#method-c-use_markup","(content)","<p>If there is a <code>markup: parser_name</code> comment at the front of the\nfile, use it to determine the parser.  …\n"],["use_prefix","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-use_prefix","()","<p>Adds the stored #prefix to the output and clears it.  Lists generate a\nprefix for later consumption. …\n"],["warn","RDoc::Options","RDoc/Options.html#method-i-warn","(message)","<p>Displays a warning using Kernel#warn if we’re being verbose\n"],["warn","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-warn","(message)","<p>Prints <code>message</code> to +$stderr+ unless we’re being quiet\n"],["wrap","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-wrap","(text)","<p>Wraps <code>text</code> to #width\n"],["wrap","RDoc::Text","RDoc/Text.html#method-i-wrap","(txt, line_len = 76)","<p>Wraps <code>txt</code> to <code>line_len</code>\n"],["write_options","RDoc::Options","RDoc/Options.html#method-i-write_options","()","<p>Writes the YAML file .rdoc_options to the current directory containing the\nparsed options.\n"],["write_style_sheet","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-write_style_sheet","()","<p>Copy over the stylesheet into the appropriate place in the output\ndirectory.\n"],["zip?","RDoc::Parser","RDoc/Parser.html#method-c-zip-3F","(file)","<p>Checks if <code>file</code> is a zip file in disguise.  Signatures from\nwww.garykessler.net/library/file_sigs.html …\n"],["DEVELOPERS","","DEVELOPERS_rdoc.html","","<p>Developer Introduction\n<p>So you want to write a generator, fix a bug, or otherwise work with RDoc. \nThis …\n"],["History","","History_rdoc.html","","<p>3.12 / 2011-12-15\n<p>Minor enhancements\n<p>Added DEVELOPERS document which contains an overview of how RDoc works …\n"],["LEGAL","","LEGAL_rdoc.html","","<p>Legal Notice Information\n<p>The files in this distribution are covered by the Ruby license (see\nLICENSE) …\n"],["LICENSE","","LICENSE_rdoc.html","","<p>RDoc is copyrighted free software.\n<p>You can redistribute it and/or modify it under either the terms of …\n"],["Manifest","","Manifest_txt.html","","<p>.autotest .document DEVELOPERS.rdoc History.rdoc LEGAL.rdoc LICENSE.rdoc\nManifest.txt README.rdoc RI.rdoc …\n"],["README","","README_rdoc.html","","<p>RDoc - Ruby Documentation System\n<p>home  &mdash; github.com/rdoc/rdoc\n<p>rdoc  &mdash; docs.seattlerb.org/rdoc\n"],["RI","","RI_rdoc.html","","<p>RI\n<p><code>ri</code> is a tool that allows Ruby documentation to be viewed on\nthe command-line.\n<p>You can use <code>ri</code> to look …\n"],["Rakefile","","Rakefile.html","","<p>$:.unshift File.expand_path ‘lib’ require ‘rdoc’ require ‘hoe’\n<p>ENV = ‘yes’\n<p>task :docs    =&gt; :generate …\n"],["TODO","","TODO_rdoc.html","","<p>This file contains some things that might happen in RDoc, or might not.\nForward Looking Statements applies. …\n"]]}}