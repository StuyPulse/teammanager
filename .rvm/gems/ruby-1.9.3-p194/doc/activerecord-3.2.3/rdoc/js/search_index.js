var search_data = {"index":{"searchIndex":["activerecord","activerecorderror","adapternotfound","adapternotspecified","aggregations","classmethods","associationtypemismatch","associations","classmethods","attributeassignment","classmethods","attributeassignmenterror","attributemethods","beforetypecast","classmethods","deprecatedunderscoreread","classmethods","dirty","primarykey","classmethods","query","read","classmethods","serialization","attribute","classmethods","timezoneconversion","classmethods","write","classmethods","autosaveassociation","classmethods","base","batches","calculations","callbacks","coders","yamlcolumn","configurationerror","connectionadapters","abstractadapter","abstractmysqladapter","column","format","connectionhandler","connectionmanagement","connectionpool","databaselimits","databasestatements","mysql2adapter","mysqladapter","statementpool","postgresqladapter","statementpool","tabledefinition","utils","postgresqlcolumn","querycache","quoting","sqliteadapter","explainprettyprinter","statementpool","version","schemacache","schemastatements","statementpool","table","tabledefinition","connectionnotestablished","connectiontimeouterror","countercache","dangerousattributeerror","delegation","dynamicfindermatch","dynamicmatchers","dynamicscopematch","explain","findermethods","fixtures","file","generators","migration","migrationgenerator","modelgenerator","observergenerator","sessionmigrationgenerator","identitymap","middleware","inheritance","classmethods","integration","invalidforeignkey","irreversiblemigration","locking","optimistic","classmethods","pessimistic","logsubscriber","migration","commandrecorder","migrationproxy","modelschema","classmethods","multiparameterassignmenterrors","nestedattributes","classmethods","toomanyrecords","observer","persistence","classmethods","preparedstatementinvalid","querycache","classmethods","querymethods","querying","railtie","railties","controllerruntime","classmethods","readonlyrecord","readonlyattributes","classmethods","recordinvalid","recordnotfound","recordnotsaved","recordnotunique","reflection","classmethods","macroreflection","relation","result","rollback","sanitization","classmethods","schema","scoping","classmethods","default","classmethods","named","classmethods","serialization","serializationtypemismatch","sessionstore","session","sqlbypass","spawnmethods","staleobjecterror","statementinvalid","store","classmethods","testfixtures","classmethods","throwresult","timestamp","transactions","classmethods","translation","unknownattributeerror","unknownprimarykey","validations","associatedvalidator","classmethods","uniquenessvalidator","wrappeddatabaseexception","arjdbcmysql","error","mysql","result","stmt","time","<=>()","<=>()","==()","==()","==()","===()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","_attribute()","abstract_class?()","accepts_nested_attributes_for()","accessible_attributes()","active?()","active?()","active?()","active?()","active_connection?()","active_connections?()","adapter_name()","adapter_name()","add()","add_column()","add_column()","add_column()","add_column_position!()","add_column_sql()","add_index()","add_index_length()","add_index_options()","add_index_sort_order()","add_index_sql()","add_observer!()","add_timestamps()","add_timestamps_sql()","add_to_transaction()","add_transaction_record()","after_commit()","after_rollback()","all()","announce()","any?()","apply_finder_options()","apply_join_dependency()","arel()","arel_engine()","arel_table()","assign_attributes()","assume_migrated_upto_version()","attr_readonly()","attribute_cast_code()","attribute_method?()","attribute_methods_generated?()","attribute_names()","attributes=()","attributes_before_type_cast()","attributes_with_index()","average()","bang?()","base_class()","basename()","becomes()","begin_db_transaction()","begin_db_transaction()","begin_db_transaction()","belongs_to()","belongs_to()","belongs_to()","bind()","build()","build_arel()","cache()","cache()","cache_attribute?()","cache_attributes()","cache_fixtures()","cache_for_connection()","cache_key()","cached_attributes()","cached_fixtures()","calculate()","call()","call()","call()","case_insensitive_comparison()","case_insensitive_comparison()","case_sensitive_equality_operator()","case_sensitive_modifier()","case_sensitive_modifier()","change()","change_column()","change_column()","change_column_default()","change_column_default()","change_column_default()","change_column_null()","change_column_null()","change_column_null()","change_column_sql()","change_default()","change_table()","changed_for_autosave?()","charset()","checkin()","checkout()","class_name()","class_of_active_record_descendant()","clear()","clear()","clear()","clear()","clear()","clear!()","clear_active_connections!()","clear_active_connections!()","clear_all_connections!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_query_cache()","clear_reloadable_connections!()","clear_reloadable_connections!()","clear_stale_cached_connections!()","clear_table_cache!()","client_encoding()","client_min_messages()","client_min_messages=()","close()","collation()","column()","column()","column_defaults()","column_exists?()","column_exists?()","column_name_length()","column_names()","columns()","columns()","columns()","columns()","columns_for_remove()","columns_hash()","columns_hash()","columns_per_multicolumn_index()","columns_per_table()","commit_db_transaction()","commit_db_transaction()","commit_transaction_records()","composed_of()","compute_type()","configurations()","connected?()","connected?()","connected?()","connection()","connection()","connection()","connection()","connection()","connection_config()","connection_handler()","connection_id()","connection_id=()","connection_pool()","connection_pool()","construct_join_dependency_for_association_find()","construct_limited_ids_condition()","construct_relation_for_association_calculations()","construct_relation_for_association_find()","content_columns()","copy()","count()","count_by_sql()","create()","create()","create()","create!()","create!()","create_database()","create_database()","create_fixtures()","create_migration_file()","create_migration_file()","create_migration_file()","create_model_file()","create_module_file()","create_observer_file()","create_reflection()","create_savepoint()","create_savepoint()","create_savepoint()","create_savepoint()","create_table()","create_with()","creator?()","current_database()","current_database()","current_savepoint_name()","current_schema()","dangerous_attribute_method?()","dangerous_attribute_method?()","data()","data()","data_column()","data_column_name()","data_column_name()","data_column_size_limit()","decrement()","decrement!()","decrement_counter()","decrement_open_transactions()","default_primary_key_type()","default_scope()","default_sequence_name()","default_timezone()","define()","define_attribute_methods()","define_callbacks()","define_method__attribute()","define_method_attribute()","define_method_attribute()","define_method_attribute=()","define_method_attribute=()","delegate_to_scoped_klass()","delete()","delete()","delete()","delete()","delete()","delete()","delete_all()","delete_sql()","descends_from_active_record?()","destroy()","destroy()","destroy()","destroy_all()","destroyed?()","dirties_query_cache()","disable_query_cache!()","disable_referential_integrity()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","distinct()","down()","drop_table()","each()","each()","each()","each()","each()","each()","each()","eager_load()","eager_loading?()","empty?()","empty_insert_statement_value()","empty_insert_statement_value()","emulate_booleans()","enable_query_cache!()","enabled()","enabled=()","enabled?()","encode_with()","encoding()","enlist_fixture_connections()","eql?()","error_number()","escape_bytea()","establish_connection()","establish_connection()","evaluate_default_scope()","except()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_insert()","exec_insert()","exec_query()","exec_query()","exec_query()","exec_query()","exec_query()","exec_update()","exec_update()","exec_update()","exec_update()","exec_update()","exec_without_stmt()","execute()","execute()","execute()","execute()","execute_and_free()","exists?()","expand_hash_conditions_for_aggregates()","expire()","explain()","explain()","explain()","explain()","extended()","extending()","extract_schema_and_table()","find()","find_by_attributes()","find_by_session_id()","find_by_session_id()","find_by_sql()","find_each()","find_first()","find_in_batches()","find_last()","find_one()","find_or_instantiator_by_attributes()","find_some()","find_with_associations()","find_with_ids()","finder?()","first()","first!()","first_or_create()","first_or_create!()","first_or_initialize()","fixture_is_cached?()","fixtures()","freeze()","from()","frozen?()","generated_external_attribute_methods()","generated_feature_methods()","get()","group()","has_and_belongs_to_many()","has_many()","has_one()","hash()","having()","id()","id=()","id?()","identify()","identity()","in_clause_length()","included()","includes()","increment()","increment!()","increment_counter()","increment_open_transactions()","index()","index_exists?()","index_exists?()","index_name_exists?()","index_name_for_remove()","index_name_length()","index_name_length()","indexes()","indexes_per_table()","inheritance_column()","inheritance_column=()","init_with()","initialize_copy()","initialize_dup()","initialize_dup()","initialize_schema_migrations_table()","insert()","insert()","insert_fixture()","insert_sql()","insert_sql()","insert_sql()","inspect()","inspect()","inspect()","instance_method_already_implemented?()","instantiate()","instantiate_all_loaded_fixtures()","instantiate_fixtures()","instantiator?()","inverse()","joined_includes_values()","joins()","joins_per_query()","key?()","key?()","key?()","key?()","klass()","last()","last!()","last_inserted_id()","last_inserted_id()","last_inserted_id()","last_inserted_id()","lease()","length()","length()","length()","length()","limit()","limited_update_conditions()","limited_update_conditions()","loaded?()","loaded?()","lock()","lock!()","locking_column()","locking_column=()","locking_enabled?()","log()","log_process_action()","logger()","logger()","many?()","mark_for_destruction()","marked_for_destruction?()","mass_assignment_options()","mass_assignment_role()","match()","match()","maximum()","merge()","message()","message()","method_defined_within?()","method_missing()","method_missing()","migrate()","migrate()","migrations_paths()","minimum()","mysql2_connection()","native_database_types()","native_database_types()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_record?()","next_key()","next_migration_number()","observed_classes()","odd?()","offset()","only()","open()","options_include_default?()","order()","outside_transaction?()","outside_transaction?()","parent_class_name()","perform_validations()","persisted?()","pk_and_sequence_for()","pluck()","populate_with_current_scope_attributes()","postgresql_version()","prefetch_primary_key?()","preload()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key=()","primary_keys()","query_attribute()","quote()","quote()","quote_column_name()","quote_string()","quote_string()","quote_table_name()","quote_table_name()","quote_table_name()","quoted_columns_for_index()","quoted_columns_for_index()","quoted_date()","quoted_false()","quoted_false()","quoted_locking_column()","quoted_primary_key()","quoted_table_name()","quoted_true()","quoted_true()","raw_connection()","raw_write_attribute()","read_attribute()","read_attribute_before_type_cast()","read_attribute_before_type_cast()","readonly()","readonly!()","readonly?()","readonly_attributes()","reconnect!()","reconnect!()","reconnect!()","reconnect!()","record()","recreate_database()","references()","references()","reflect_on_aggregation()","reflect_on_all_aggregations()","reflect_on_all_associations()","reflect_on_all_autosave_associations()","reflect_on_association()","reinit_with()","release_connection()","release_savepoint()","release_savepoint()","release_savepoint()","release_savepoint()","reload()","reload()","reload()","remove()","remove()","remove_belongs_to()","remove_by_id()","remove_column()","remove_column_sql()","remove_columns()","remove_connection()","remove_connection()","remove_index()","remove_index()","remove_index_sql()","remove_references()","remove_timestamps()","remove_timestamps()","remove_timestamps_sql()","rename()","rename_column()","rename_column()","rename_column_sql()","rename_index()","rename_index()","rename_table()","rename_table()","rename_table()","rename_table()","reorder()","repository()","require_fixture_classes()","requires_reloading?()","requires_reloading?()","reset()","reset!()","reset!()","reset!()","reset!()","reset_cache()","reset_column_information()","reset_counters()","reset_locking_column()","reset_runtime()","reset_sequence!()","respond_to?()","respond_to?()","retrieve_connection()","retrieve_connection_pool()","reverse_order()","revert()","reverting?()","rollback_active_record_state!()","rollback_db_transaction()","rollback_db_transaction()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_transaction_records()","run_in_transaction?()","runtime()","runtime=()","sanitize_conditions()","sanitize_limit()","sanitize_sql()","sanitize_sql_array()","sanitize_sql_for_assignment()","sanitize_sql_for_conditions()","sanitize_sql_hash()","sanitize_sql_hash_for_assignment()","sanitize_sql_hash_for_conditions()","save()","save()","save()","save!()","save!()","save_method()","save_record?()","say()","say_with_time()","schema_exists?()","schema_format()","schema_search_path()","schema_search_path=()","scope()","scope_for_create()","scoped()","scoping()","select()","select()","select()","select_all()","select_all()","select_one()","select_rows()","select_rows()","select_rows()","select_rows()","select_rows()","select_value()","select_values()","sequence_name()","sequence_name=()","serial_sequence()","serializable_hash()","serialize()","serialize()","serialized_value()","session_auth=()","session_id_column()","session_table_name()","set_fixture_class()","set_local_assigns!()","set_locking_column()","set_standard_conforming_strings()","setup()","setup_fixture_accessors()","setup_fixtures()","show_variable()","silence_auto_explain()","size()","size()","sql()","sql_for_insert()","sql_for_insert()","sql_query_length()","sqlite_version()","sti_name()","store()","store_accessor()","structure_dump()","substitute_at()","substitute_at()","sum()","supports_add_column?()","supports_bulk_alter?()","supports_count_distinct?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_insert_with_returning?()","supports_migrations?()","supports_migrations?()","supports_migrations?()","supports_primary_key?()","supports_primary_key?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","suppress_messages()","symbolized_base_class()","symbolized_sti_name()","table_alias_for()","table_alias_length()","table_alias_length()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_name()","table_name()","table_name=()","table_name_length()","table_rows()","table_structure()","tables()","teardown_fixtures()","timestamped_migrations()","timestamps()","timestamps()","to_a()","to_date()","to_hash()","to_key()","to_param()","to_sql()","to_sql()","to_sql()","to_xml()","toggle()","toggle!()","touch()","transaction()","transaction()","transaction()","transaction_joinable=()","translate_exception()","translate_exception()","translate_exception()","translate_exception()","try_to_load_dependency()","tsvector()","type_cast()","type_cast()","type_cast()","type_cast_attribute_for_write()","type_to_sql()","type_to_sql()","uncached()","uncached()","undefine_attribute_methods()","undefine_attribute_methods()","unescape_bytea()","uniq()","unserialize()","unserialized_value()","up()","update()","update()","update_all()","update_attribute()","update_attributes()","update_attributes!()","update_column()","update_counters()","update_counters()","update_sql()","update_sql()","use()","uses_transaction()","uses_transaction?()","using_limitable_reflections?()","valid?()","valid_alter_table_options()","valid_scope_name?()","validate_each()","validate_each()","validates_associated()","validates_uniqueness_of()","verify!()","where()","where_values_hash()","with_connection()","with_exclusive_scope()","with_lock()","with_scope()","with_transaction_returning_status()","without()","write()","write_attribute()","xml()","xml()","readme"],"longSearchIndex":["activerecord","activerecord::activerecorderror","activerecord::adapternotfound","activerecord::adapternotspecified","activerecord::aggregations","activerecord::aggregations::classmethods","activerecord::associationtypemismatch","activerecord::associations","activerecord::associations::classmethods","activerecord::attributeassignment","activerecord::attributeassignment::classmethods","activerecord::attributeassignmenterror","activerecord::attributemethods","activerecord::attributemethods::beforetypecast","activerecord::attributemethods::classmethods","activerecord::attributemethods::deprecatedunderscoreread","activerecord::attributemethods::deprecatedunderscoreread::classmethods","activerecord::attributemethods::dirty","activerecord::attributemethods::primarykey","activerecord::attributemethods::primarykey::classmethods","activerecord::attributemethods::query","activerecord::attributemethods::read","activerecord::attributemethods::read::classmethods","activerecord::attributemethods::serialization","activerecord::attributemethods::serialization::attribute","activerecord::attributemethods::serialization::classmethods","activerecord::attributemethods::timezoneconversion","activerecord::attributemethods::timezoneconversion::classmethods","activerecord::attributemethods::write","activerecord::attributemethods::write::classmethods","activerecord::autosaveassociation","activerecord::autosaveassociation::classmethods","activerecord::base","activerecord::batches","activerecord::calculations","activerecord::callbacks","activerecord::coders","activerecord::coders::yamlcolumn","activerecord::configurationerror","activerecord::connectionadapters","activerecord::connectionadapters::abstractadapter","activerecord::connectionadapters::abstractmysqladapter","activerecord::connectionadapters::column","activerecord::connectionadapters::column::format","activerecord::connectionadapters::connectionhandler","activerecord::connectionadapters::connectionmanagement","activerecord::connectionadapters::connectionpool","activerecord::connectionadapters::databaselimits","activerecord::connectionadapters::databasestatements","activerecord::connectionadapters::mysql2adapter","activerecord::connectionadapters::mysqladapter","activerecord::connectionadapters::mysqladapter::statementpool","activerecord::connectionadapters::postgresqladapter","activerecord::connectionadapters::postgresqladapter::statementpool","activerecord::connectionadapters::postgresqladapter::tabledefinition","activerecord::connectionadapters::postgresqladapter::utils","activerecord::connectionadapters::postgresqlcolumn","activerecord::connectionadapters::querycache","activerecord::connectionadapters::quoting","activerecord::connectionadapters::sqliteadapter","activerecord::connectionadapters::sqliteadapter::explainprettyprinter","activerecord::connectionadapters::sqliteadapter::statementpool","activerecord::connectionadapters::sqliteadapter::version","activerecord::connectionadapters::schemacache","activerecord::connectionadapters::schemastatements","activerecord::connectionadapters::statementpool","activerecord::connectionadapters::table","activerecord::connectionadapters::tabledefinition","activerecord::connectionnotestablished","activerecord::connectiontimeouterror","activerecord::countercache","activerecord::dangerousattributeerror","activerecord::delegation","activerecord::dynamicfindermatch","activerecord::dynamicmatchers","activerecord::dynamicscopematch","activerecord::explain","activerecord::findermethods","activerecord::fixtures","activerecord::fixtures::file","activerecord::generators","activerecord::generators::migration","activerecord::generators::migrationgenerator","activerecord::generators::modelgenerator","activerecord::generators::observergenerator","activerecord::generators::sessionmigrationgenerator","activerecord::identitymap","activerecord::identitymap::middleware","activerecord::inheritance","activerecord::inheritance::classmethods","activerecord::integration","activerecord::invalidforeignkey","activerecord::irreversiblemigration","activerecord::locking","activerecord::locking::optimistic","activerecord::locking::optimistic::classmethods","activerecord::locking::pessimistic","activerecord::logsubscriber","activerecord::migration","activerecord::migration::commandrecorder","activerecord::migrationproxy","activerecord::modelschema","activerecord::modelschema::classmethods","activerecord::multiparameterassignmenterrors","activerecord::nestedattributes","activerecord::nestedattributes::classmethods","activerecord::nestedattributes::toomanyrecords","activerecord::observer","activerecord::persistence","activerecord::persistence::classmethods","activerecord::preparedstatementinvalid","activerecord::querycache","activerecord::querycache::classmethods","activerecord::querymethods","activerecord::querying","activerecord::railtie","activerecord::railties","activerecord::railties::controllerruntime","activerecord::railties::controllerruntime::classmethods","activerecord::readonlyrecord","activerecord::readonlyattributes","activerecord::readonlyattributes::classmethods","activerecord::recordinvalid","activerecord::recordnotfound","activerecord::recordnotsaved","activerecord::recordnotunique","activerecord::reflection","activerecord::reflection::classmethods","activerecord::reflection::macroreflection","activerecord::relation","activerecord::result","activerecord::rollback","activerecord::sanitization","activerecord::sanitization::classmethods","activerecord::schema","activerecord::scoping","activerecord::scoping::classmethods","activerecord::scoping::default","activerecord::scoping::default::classmethods","activerecord::scoping::named","activerecord::scoping::named::classmethods","activerecord::serialization","activerecord::serializationtypemismatch","activerecord::sessionstore","activerecord::sessionstore::session","activerecord::sessionstore::sqlbypass","activerecord::spawnmethods","activerecord::staleobjecterror","activerecord::statementinvalid","activerecord::store","activerecord::store::classmethods","activerecord::testfixtures","activerecord::testfixtures::classmethods","activerecord::throwresult","activerecord::timestamp","activerecord::transactions","activerecord::transactions::classmethods","activerecord::translation","activerecord::unknownattributeerror","activerecord::unknownprimarykey","activerecord::validations","activerecord::validations::associatedvalidator","activerecord::validations::classmethods","activerecord::validations::uniquenessvalidator","activerecord::wrappeddatabaseexception","arjdbcmysql","arjdbcmysql::error","mysql","mysql::result","mysql::stmt","mysql::time","activerecord::base#<=>()","activerecord::connectionadapters::sqliteadapter::version#<=>()","activerecord::base#==()","activerecord::reflection::macroreflection#==()","activerecord::relation#==()","activerecord::base::===()","activerecord::connectionadapters::mysqladapter::statementpool#[]()","activerecord::connectionadapters::postgresqladapter::statementpool#[]()","activerecord::connectionadapters::sqliteadapter::statementpool#[]()","activerecord::connectionadapters::statementpool#[]()","activerecord::connectionadapters::tabledefinition#[]()","activerecord::fixtures#[]()","activerecord::connectionadapters::mysqladapter::statementpool#[]=()","activerecord::connectionadapters::postgresqladapter::statementpool#[]=()","activerecord::connectionadapters::sqliteadapter::statementpool#[]=()","activerecord::connectionadapters::statementpool#[]=()","activerecord::fixtures#[]=()","activerecord::attributemethods::deprecatedunderscoreread#_attribute()","activerecord::inheritance::classmethods#abstract_class?()","activerecord::nestedattributes::classmethods#accepts_nested_attributes_for()","activerecord::generators::modelgenerator#accessible_attributes()","activerecord::connectionadapters::abstractadapter#active?()","activerecord::connectionadapters::mysql2adapter#active?()","activerecord::connectionadapters::mysqladapter#active?()","activerecord::connectionadapters::postgresqladapter#active?()","activerecord::connectionadapters::connectionpool#active_connection?()","activerecord::connectionadapters::connectionhandler#active_connections?()","activerecord::connectionadapters::abstractadapter#adapter_name()","activerecord::connectionadapters::postgresqladapter#adapter_name()","activerecord::identitymap::add()","activerecord::connectionadapters::abstractmysqladapter#add_column()","activerecord::connectionadapters::postgresqladapter#add_column()","activerecord::connectionadapters::schemastatements#add_column()","activerecord::connectionadapters::abstractmysqladapter#add_column_position!()","activerecord::connectionadapters::abstractmysqladapter#add_column_sql()","activerecord::connectionadapters::schemastatements#add_index()","activerecord::connectionadapters::abstractmysqladapter#add_index_length()","activerecord::connectionadapters::schemastatements#add_index_options()","activerecord::connectionadapters::schemastatements#add_index_sort_order()","activerecord::connectionadapters::abstractmysqladapter#add_index_sql()","activerecord::observer#add_observer!()","activerecord::connectionadapters::schemastatements#add_timestamps()","activerecord::connectionadapters::abstractmysqladapter#add_timestamps_sql()","activerecord::transactions#add_to_transaction()","activerecord::connectionadapters::databasestatements#add_transaction_record()","activerecord::transactions::classmethods#after_commit()","activerecord::transactions::classmethods#after_rollback()","activerecord::findermethods#all()","activerecord::migration#announce()","activerecord::relation#any?()","activerecord::spawnmethods#apply_finder_options()","activerecord::findermethods#apply_join_dependency()","activerecord::querymethods#arel()","activerecord::base::arel_engine()","activerecord::base::arel_table()","activerecord::attributeassignment#assign_attributes()","activerecord::connectionadapters::schemastatements#assume_migrated_upto_version()","activerecord::readonlyattributes::classmethods#attr_readonly()","activerecord::attributemethods::timezoneconversion::classmethods#attribute_cast_code()","activerecord::attributemethods::classmethods#attribute_method?()","activerecord::attributemethods::classmethods#attribute_methods_generated?()","activerecord::attributemethods::classmethods#attribute_names()","activerecord::attributeassignment#attributes=()","activerecord::attributemethods::beforetypecast#attributes_before_type_cast()","activerecord::generators::modelgenerator#attributes_with_index()","activerecord::calculations#average()","activerecord::dynamicfindermatch#bang?()","activerecord::inheritance::classmethods#base_class()","activerecord::migrationproxy#basename()","activerecord::persistence#becomes()","activerecord::connectionadapters::abstractmysqladapter#begin_db_transaction()","activerecord::connectionadapters::databasestatements#begin_db_transaction()","activerecord::connectionadapters::postgresqladapter#begin_db_transaction()","activerecord::associations::classmethods#belongs_to()","activerecord::connectionadapters::table#belongs_to()","activerecord::connectionadapters::tabledefinition#belongs_to()","activerecord::querymethods#bind()","activerecord::relation#build()","activerecord::querymethods#build_arel()","activerecord::connectionadapters::querycache#cache()","activerecord::querycache::classmethods#cache()","activerecord::attributemethods::read::classmethods#cache_attribute?()","activerecord::attributemethods::read::classmethods#cache_attributes()","activerecord::fixtures::cache_fixtures()","activerecord::fixtures::cache_for_connection()","activerecord::integration#cache_key()","activerecord::attributemethods::read::classmethods#cached_attributes()","activerecord::fixtures::cached_fixtures()","activerecord::calculations#calculate()","activerecord::connectionadapters::connectionmanagement#call()","activerecord::identitymap::middleware#call()","activerecord::querycache#call()","activerecord::connectionadapters::abstractadapter#case_insensitive_comparison()","activerecord::connectionadapters::abstractmysqladapter#case_insensitive_comparison()","activerecord::connectionadapters::databasestatements#case_sensitive_equality_operator()","activerecord::connectionadapters::abstractadapter#case_sensitive_modifier()","activerecord::connectionadapters::abstractmysqladapter#case_sensitive_modifier()","activerecord::connectionadapters::table#change()","activerecord::connectionadapters::postgresqladapter#change_column()","activerecord::connectionadapters::schemastatements#change_column()","activerecord::connectionadapters::abstractmysqladapter#change_column_default()","activerecord::connectionadapters::postgresqladapter#change_column_default()","activerecord::connectionadapters::schemastatements#change_column_default()","activerecord::connectionadapters::abstractmysqladapter#change_column_null()","activerecord::connectionadapters::postgresqladapter#change_column_null()","activerecord::connectionadapters::sqliteadapter#change_column_null()","activerecord::connectionadapters::abstractmysqladapter#change_column_sql()","activerecord::connectionadapters::table#change_default()","activerecord::connectionadapters::schemastatements#change_table()","activerecord::autosaveassociation#changed_for_autosave?()","activerecord::connectionadapters::abstractmysqladapter#charset()","activerecord::connectionadapters::connectionpool#checkin()","activerecord::connectionadapters::connectionpool#checkout()","activerecord::reflection::macroreflection#class_name()","activerecord::inheritance::classmethods#class_of_active_record_descendant()","activerecord::connectionadapters::mysqladapter::statementpool#clear()","activerecord::connectionadapters::postgresqladapter::statementpool#clear()","activerecord::connectionadapters::sqliteadapter::statementpool#clear()","activerecord::connectionadapters::statementpool#clear()","activerecord::identitymap::clear()","activerecord::connectionadapters::schemacache#clear!()","activerecord::base::clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_all_connections!()","activerecord::connectionadapters::abstractadapter#clear_cache!()","activerecord::connectionadapters::connectionpool#clear_cache!()","activerecord::connectionadapters::mysqladapter#clear_cache!()","activerecord::connectionadapters::postgresqladapter#clear_cache!()","activerecord::connectionadapters::sqliteadapter#clear_cache!()","activerecord::connectionadapters::querycache#clear_query_cache()","activerecord::connectionadapters::connectionhandler#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_stale_cached_connections!()","activerecord::connectionadapters::schemacache#clear_table_cache!()","activerecord::connectionadapters::mysqladapter#client_encoding()","activerecord::connectionadapters::postgresqladapter#client_min_messages()","activerecord::connectionadapters::postgresqladapter#client_min_messages=()","activerecord::connectionadapters::abstractadapter#close()","activerecord::connectionadapters::abstractmysqladapter#collation()","activerecord::connectionadapters::table#column()","activerecord::connectionadapters::tabledefinition#column()","activerecord::modelschema::classmethods#column_defaults()","activerecord::connectionadapters::schemastatements#column_exists?()","activerecord::connectionadapters::table#column_exists?()","activerecord::connectionadapters::databaselimits#column_name_length()","activerecord::modelschema::classmethods#column_names()","activerecord::connectionadapters::connectionpool#columns()","activerecord::connectionadapters::postgresqladapter#columns()","activerecord::connectionadapters::schemastatements#columns()","activerecord::modelschema::classmethods#columns()","activerecord::connectionadapters::schemastatements#columns_for_remove()","activerecord::connectionadapters::connectionpool#columns_hash()","activerecord::modelschema::classmethods#columns_hash()","activerecord::connectionadapters::databaselimits#columns_per_multicolumn_index()","activerecord::connectionadapters::databaselimits#columns_per_table()","activerecord::connectionadapters::databasestatements#commit_db_transaction()","activerecord::connectionadapters::postgresqladapter#commit_db_transaction()","activerecord::connectionadapters::databasestatements#commit_transaction_records()","activerecord::aggregations::classmethods#composed_of()","activerecord::inheritance::classmethods#compute_type()","activerecord::base::configurations()","activerecord::base::connected?()","activerecord::connectionadapters::connectionhandler#connected?()","activerecord::connectionadapters::connectionpool#connected?()","activerecord::base#connection()","activerecord::base::connection()","activerecord::connectionadapters::connectionpool#connection()","activerecord::migration#connection()","activerecord::sessionstore::sqlbypass::connection()","activerecord::base::connection_config()","activerecord::base::connection_handler()","activerecord::base::connection_id()","activerecord::base::connection_id=()","activerecord::base::connection_pool()","activerecord::sessionstore::sqlbypass::connection_pool()","activerecord::findermethods#construct_join_dependency_for_association_find()","activerecord::findermethods#construct_limited_ids_condition()","activerecord::findermethods#construct_relation_for_association_calculations()","activerecord::findermethods#construct_relation_for_association_find()","activerecord::modelschema::classmethods#content_columns()","activerecord::migration#copy()","activerecord::calculations#count()","activerecord::querying#count_by_sql()","activerecord::connectionadapters::mysql2adapter#create()","activerecord::persistence::classmethods#create()","activerecord::relation#create()","activerecord::relation#create!()","activerecord::validations::classmethods#create!()","activerecord::connectionadapters::abstractmysqladapter#create_database()","activerecord::connectionadapters::postgresqladapter#create_database()","activerecord::fixtures::create_fixtures()","activerecord::generators::migrationgenerator#create_migration_file()","activerecord::generators::modelgenerator#create_migration_file()","activerecord::generators::sessionmigrationgenerator#create_migration_file()","activerecord::generators::modelgenerator#create_model_file()","activerecord::generators::modelgenerator#create_module_file()","activerecord::generators::observergenerator#create_observer_file()","activerecord::reflection::classmethods#create_reflection()","activerecord::connectionadapters::abstractadapter#create_savepoint()","activerecord::connectionadapters::abstractmysqladapter#create_savepoint()","activerecord::connectionadapters::postgresqladapter#create_savepoint()","activerecord::connectionadapters::sqliteadapter#create_savepoint()","activerecord::connectionadapters::schemastatements#create_table()","activerecord::querymethods#create_with()","activerecord::dynamicfindermatch#creator?()","activerecord::connectionadapters::abstractmysqladapter#current_database()","activerecord::connectionadapters::postgresqladapter#current_database()","activerecord::connectionadapters::abstractadapter#current_savepoint_name()","activerecord::connectionadapters::postgresqladapter#current_schema()","activerecord::attributemethods::classmethods#dangerous_attribute_method?()","activerecord::attributemethods::primarykey::classmethods#dangerous_attribute_method?()","activerecord::sessionstore::session#data()","activerecord::sessionstore::sqlbypass#data()","activerecord::sessionstore::sqlbypass::data_column()","activerecord::sessionstore::session::data_column_name()","activerecord::sessionstore::sqlbypass::data_column_name()","activerecord::sessionstore::session::data_column_size_limit()","activerecord::persistence#decrement()","activerecord::persistence#decrement!()","activerecord::countercache#decrement_counter()","activerecord::connectionadapters::abstractadapter#decrement_open_transactions()","activerecord::connectionadapters::sqliteadapter#default_primary_key_type()","activerecord::scoping::default::classmethods#default_scope()","activerecord::connectionadapters::databasestatements#default_sequence_name()","activerecord::base::default_timezone()","activerecord::schema::define()","activerecord::attributemethods::classmethods#define_attribute_methods()","activerecord::observer#define_callbacks()","activerecord::attributemethods::deprecatedunderscoreread::classmethods#define_method__attribute()","activerecord::attributemethods::primarykey::classmethods#define_method_attribute()","activerecord::attributemethods::read::classmethods#define_method_attribute()","activerecord::attributemethods::timezoneconversion::classmethods#define_method_attribute=()","activerecord::attributemethods::write::classmethods#define_method_attribute=()","activerecord::delegation::delegate_to_scoped_klass()","activerecord::connectionadapters::databasestatements#delete()","activerecord::connectionadapters::mysqladapter::statementpool#delete()","activerecord::connectionadapters::postgresqladapter::statementpool#delete()","activerecord::connectionadapters::statementpool#delete()","activerecord::persistence#delete()","activerecord::relation#delete()","activerecord::relation#delete_all()","activerecord::connectionadapters::databasestatements#delete_sql()","activerecord::inheritance::classmethods#descends_from_active_record?()","activerecord::persistence#destroy()","activerecord::relation#destroy()","activerecord::sessionstore::sqlbypass#destroy()","activerecord::relation#destroy_all()","activerecord::persistence#destroyed?()","activerecord::connectionadapters::querycache::dirties_query_cache()","activerecord::connectionadapters::querycache#disable_query_cache!()","activerecord::connectionadapters::abstractadapter#disable_referential_integrity()","activerecord::connectionadapters::abstractadapter#disconnect!()","activerecord::connectionadapters::connectionpool#disconnect!()","activerecord::connectionadapters::mysql2adapter#disconnect!()","activerecord::connectionadapters::mysqladapter#disconnect!()","activerecord::connectionadapters::postgresqladapter#disconnect!()","activerecord::connectionadapters::sqliteadapter#disconnect!()","activerecord::connectionadapters::schemastatements#distinct()","activerecord::migration#down()","activerecord::connectionadapters::schemastatements#drop_table()","activerecord::connectionadapters::mysqladapter::statementpool#each()","activerecord::connectionadapters::postgresqladapter::statementpool#each()","activerecord::connectionadapters::sqliteadapter::statementpool#each()","activerecord::connectionadapters::statementpool#each()","activerecord::fixtures#each()","activerecord::fixtures::file#each()","activerecord::result#each()","activerecord::querymethods#eager_load()","activerecord::relation#eager_loading?()","activerecord::relation#empty?()","activerecord::connectionadapters::databasestatements#empty_insert_statement_value()","activerecord::connectionadapters::sqliteadapter#empty_insert_statement_value()","activerecord::connectionadapters::abstractmysqladapter::emulate_booleans()","activerecord::connectionadapters::querycache#enable_query_cache!()","activerecord::identitymap::enabled()","activerecord::identitymap::enabled=()","activerecord::identitymap::enabled?()","activerecord::base#encode_with()","activerecord::connectionadapters::postgresqladapter#encoding()","activerecord::testfixtures#enlist_fixture_connections()","activerecord::base#eql?()","activerecord::connectionadapters::mysql2adapter#error_number()","activerecord::connectionadapters::postgresqladapter#escape_bytea()","activerecord::base::establish_connection()","activerecord::connectionadapters::connectionhandler#establish_connection()","activerecord::scoping::default::classmethods#evaluate_default_scope()","activerecord::spawnmethods#except()","activerecord::connectionadapters::databasestatements#exec_delete()","activerecord::connectionadapters::mysql2adapter#exec_delete()","activerecord::connectionadapters::mysqladapter#exec_delete()","activerecord::connectionadapters::postgresqladapter#exec_delete()","activerecord::connectionadapters::sqliteadapter#exec_delete()","activerecord::connectionadapters::databasestatements#exec_insert()","activerecord::connectionadapters::mysql2adapter#exec_insert()","activerecord::connectionadapters::databasestatements#exec_query()","activerecord::connectionadapters::mysql2adapter#exec_query()","activerecord::connectionadapters::mysqladapter#exec_query()","activerecord::connectionadapters::postgresqladapter#exec_query()","activerecord::connectionadapters::sqliteadapter#exec_query()","activerecord::connectionadapters::databasestatements#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_update()","activerecord::connectionadapters::mysqladapter#exec_update()","activerecord::connectionadapters::postgresqladapter#exec_update()","activerecord::connectionadapters::sqliteadapter#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_without_stmt()","activerecord::connectionadapters::abstractmysqladapter#execute()","activerecord::connectionadapters::databasestatements#execute()","activerecord::connectionadapters::mysql2adapter#execute()","activerecord::connectionadapters::postgresqladapter#execute()","activerecord::connectionadapters::mysqladapter#execute_and_free()","activerecord::findermethods#exists?()","activerecord::sanitization::classmethods#expand_hash_conditions_for_aggregates()","activerecord::connectionadapters::abstractadapter#expire()","activerecord::connectionadapters::mysql2adapter#explain()","activerecord::connectionadapters::postgresqladapter#explain()","activerecord::connectionadapters::sqliteadapter#explain()","activerecord::relation#explain()","activerecord::explain::extended()","activerecord::querymethods#extending()","activerecord::connectionadapters::postgresqladapter::utils#extract_schema_and_table()","activerecord::findermethods#find()","activerecord::findermethods#find_by_attributes()","activerecord::sessionstore::session::find_by_session_id()","activerecord::sessionstore::sqlbypass::find_by_session_id()","activerecord::querying#find_by_sql()","activerecord::batches#find_each()","activerecord::findermethods#find_first()","activerecord::batches#find_in_batches()","activerecord::findermethods#find_last()","activerecord::findermethods#find_one()","activerecord::findermethods#find_or_instantiator_by_attributes()","activerecord::findermethods#find_some()","activerecord::findermethods#find_with_associations()","activerecord::findermethods#find_with_ids()","activerecord::dynamicfindermatch#finder?()","activerecord::findermethods#first()","activerecord::findermethods#first!()","activerecord::relation#first_or_create()","activerecord::relation#first_or_create!()","activerecord::relation#first_or_initialize()","activerecord::fixtures::fixture_is_cached?()","activerecord::testfixtures::classmethods#fixtures()","activerecord::base#freeze()","activerecord::querymethods#from()","activerecord::base#frozen?()","activerecord::attributemethods::classmethods#generated_external_attribute_methods()","activerecord::base::generated_feature_methods()","activerecord::identitymap::get()","activerecord::querymethods#group()","activerecord::associations::classmethods#has_and_belongs_to_many()","activerecord::associations::classmethods#has_many()","activerecord::associations::classmethods#has_one()","activerecord::base#hash()","activerecord::querymethods#having()","activerecord::attributemethods::primarykey#id()","activerecord::attributemethods::primarykey#id=()","activerecord::attributemethods::primarykey#id?()","activerecord::fixtures::identify()","activerecord::logsubscriber#identity()","activerecord::connectionadapters::databaselimits#in_clause_length()","activerecord::connectionadapters::querycache::included()","activerecord::querymethods#includes()","activerecord::persistence#increment()","activerecord::persistence#increment!()","activerecord::countercache#increment_counter()","activerecord::connectionadapters::abstractadapter#increment_open_transactions()","activerecord::connectionadapters::table#index()","activerecord::connectionadapters::schemastatements#index_exists?()","activerecord::connectionadapters::table#index_exists?()","activerecord::connectionadapters::schemastatements#index_name_exists?()","activerecord::connectionadapters::schemastatements#index_name_for_remove()","activerecord::connectionadapters::databaselimits#index_name_length()","activerecord::connectionadapters::postgresqladapter#index_name_length()","activerecord::connectionadapters::postgresqladapter#indexes()","activerecord::connectionadapters::databaselimits#indexes_per_table()","activerecord::modelschema::classmethods#inheritance_column()","activerecord::modelschema::classmethods#inheritance_column=()","activerecord::base#init_with()","activerecord::relation#initialize_copy()","activerecord::base#initialize_dup()","activerecord::timestamp#initialize_dup()","activerecord::connectionadapters::schemastatements#initialize_schema_migrations_table()","activerecord::connectionadapters::databasestatements#insert()","activerecord::relation#insert()","activerecord::connectionadapters::databasestatements#insert_fixture()","activerecord::connectionadapters::databasestatements#insert_sql()","activerecord::connectionadapters::mysql2adapter#insert_sql()","activerecord::connectionadapters::postgresqladapter#insert_sql()","activerecord::base#inspect()","activerecord::base::inspect()","activerecord::relation#inspect()","activerecord::attributemethods::classmethods#instance_method_already_implemented?()","activerecord::inheritance::classmethods#instantiate()","activerecord::fixtures::instantiate_all_loaded_fixtures()","activerecord::fixtures::instantiate_fixtures()","activerecord::dynamicfindermatch#instantiator?()","activerecord::migration::commandrecorder#inverse()","activerecord::relation#joined_includes_values()","activerecord::querymethods#joins()","activerecord::connectionadapters::databaselimits#joins_per_query()","activerecord::connectionadapters::mysqladapter::statementpool#key?()","activerecord::connectionadapters::postgresqladapter::statementpool#key?()","activerecord::connectionadapters::sqliteadapter::statementpool#key?()","activerecord::connectionadapters::statementpool#key?()","activerecord::reflection::macroreflection#klass()","activerecord::findermethods#last()","activerecord::findermethods#last!()","activerecord::connectionadapters::databasestatements#last_inserted_id()","activerecord::connectionadapters::mysql2adapter#last_inserted_id()","activerecord::connectionadapters::mysqladapter#last_inserted_id()","activerecord::connectionadapters::sqliteadapter#last_inserted_id()","activerecord::connectionadapters::abstractadapter#lease()","activerecord::connectionadapters::mysqladapter::statementpool#length()","activerecord::connectionadapters::postgresqladapter::statementpool#length()","activerecord::connectionadapters::sqliteadapter::statementpool#length()","activerecord::connectionadapters::statementpool#length()","activerecord::querymethods#limit()","activerecord::connectionadapters::abstractmysqladapter#limited_update_conditions()","activerecord::connectionadapters::databasestatements#limited_update_conditions()","activerecord::sessionstore::session#loaded?()","activerecord::sessionstore::sqlbypass#loaded?()","activerecord::querymethods#lock()","activerecord::locking::pessimistic#lock!()","activerecord::locking::optimistic::classmethods#locking_column()","activerecord::locking::optimistic::classmethods#locking_column=()","activerecord::locking::optimistic::classmethods#locking_enabled?()","activerecord::connectionadapters::abstractadapter#log()","activerecord::railties::controllerruntime::classmethods#log_process_action()","activerecord::base::logger()","activerecord::logsubscriber#logger()","activerecord::relation#many?()","activerecord::autosaveassociation#mark_for_destruction()","activerecord::autosaveassociation#marked_for_destruction?()","activerecord::attributeassignment#mass_assignment_options()","activerecord::attributeassignment#mass_assignment_role()","activerecord::dynamicfindermatch::match()","activerecord::dynamicscopematch::match()","activerecord::calculations#maximum()","activerecord::spawnmethods#merge()","activerecord::staleobjecterror#message()","activerecord::unknownprimarykey#message()","activerecord::attributemethods::classmethods#method_defined_within?()","activerecord::delegation#method_missing()","activerecord::migration#method_missing()","activerecord::migration#migrate()","activerecord::migration::migrate()","activerecord::schema#migrations_paths()","activerecord::calculations#minimum()","activerecord::base::mysql2_connection()","activerecord::connectionadapters::abstractmysqladapter#native_database_types()","activerecord::connectionadapters::schemastatements#native_database_types()","activerecord::attributeassignmenterror::new()","activerecord::base::new()","activerecord::connectionadapters::abstractmysqladapter::new()","activerecord::connectionadapters::connectionhandler::new()","activerecord::connectionadapters::connectionmanagement::new()","activerecord::connectionadapters::connectionpool::new()","activerecord::connectionadapters::mysql2adapter::new()","activerecord::connectionadapters::mysqladapter::new()","activerecord::connectionadapters::mysqladapter::statementpool::new()","activerecord::connectionadapters::postgresqladapter::new()","activerecord::connectionadapters::postgresqladapter::statementpool::new()","activerecord::connectionadapters::sqliteadapter::new()","activerecord::connectionadapters::sqliteadapter::statementpool::new()","activerecord::connectionadapters::sqliteadapter::version::new()","activerecord::connectionadapters::schemacache::new()","activerecord::connectionadapters::statementpool::new()","activerecord::connectionadapters::table::new()","activerecord::connectionadapters::tabledefinition::new()","activerecord::dynamicfindermatch::new()","activerecord::dynamicscopematch::new()","activerecord::fixtures::new()","activerecord::fixtures::file::new()","activerecord::identitymap::middleware::new()","activerecord::logsubscriber::new()","activerecord::migration::new()","activerecord::migration::commandrecorder::new()","activerecord::migrationproxy::new()","activerecord::multiparameterassignmenterrors::new()","activerecord::querycache::new()","activerecord::recordinvalid::new()","activerecord::reflection::macroreflection::new()","activerecord::relation#new()","activerecord::relation::new()","activerecord::result::new()","activerecord::sessionstore::session::new()","activerecord::sessionstore::sqlbypass::new()","activerecord::staleobjecterror::new()","activerecord::unknownprimarykey::new()","activerecord::validations::uniquenessvalidator::new()","activerecord::wrappeddatabaseexception::new()","arjdbcmysql::error::new()","activerecord::persistence#new_record?()","activerecord::connectionadapters::postgresqladapter::statementpool#next_key()","activerecord::migration#next_migration_number()","activerecord::observer#observed_classes()","activerecord::logsubscriber#odd?()","activerecord::querymethods#offset()","activerecord::spawnmethods#only()","activerecord::fixtures::file::open()","activerecord::connectionadapters::schemastatements#options_include_default?()","activerecord::querymethods#order()","activerecord::connectionadapters::databasestatements#outside_transaction?()","activerecord::connectionadapters::postgresqladapter#outside_transaction?()","activerecord::generators::modelgenerator#parent_class_name()","activerecord::validations#perform_validations()","activerecord::persistence#persisted?()","activerecord::connectionadapters::abstractmysqladapter#pk_and_sequence_for()","activerecord::calculations#pluck()","activerecord::scoping#populate_with_current_scope_attributes()","activerecord::connectionadapters::postgresqladapter#postgresql_version()","activerecord::connectionadapters::abstractadapter#prefetch_primary_key?()","activerecord::querymethods#preload()","activerecord::attributemethods::primarykey::classmethods#primary_key()","activerecord::connectionadapters::abstractmysqladapter#primary_key()","activerecord::connectionadapters::postgresqladapter#primary_key()","activerecord::connectionadapters::tabledefinition#primary_key()","activerecord::attributemethods::primarykey::classmethods#primary_key=()","activerecord::connectionadapters::connectionpool#primary_keys()","activerecord::attributemethods::query#query_attribute()","activerecord::connectionadapters::abstractmysqladapter#quote()","activerecord::connectionadapters::quoting#quote()","activerecord::connectionadapters::quoting#quote_column_name()","activerecord::connectionadapters::mysql2adapter#quote_string()","activerecord::connectionadapters::quoting#quote_string()","activerecord::connectionadapters::abstractadapter#quote_table_name()","activerecord::connectionadapters::postgresqladapter#quote_table_name()","activerecord::connectionadapters::quoting#quote_table_name()","activerecord::connectionadapters::abstractmysqladapter#quoted_columns_for_index()","activerecord::connectionadapters::schemastatements#quoted_columns_for_index()","activerecord::connectionadapters::quoting#quoted_date()","activerecord::connectionadapters::abstractmysqladapter#quoted_false()","activerecord::connectionadapters::quoting#quoted_false()","activerecord::locking::optimistic::classmethods#quoted_locking_column()","activerecord::attributemethods::primarykey::classmethods#quoted_primary_key()","activerecord::modelschema::classmethods#quoted_table_name()","activerecord::connectionadapters::abstractmysqladapter#quoted_true()","activerecord::connectionadapters::quoting#quoted_true()","activerecord::connectionadapters::abstractadapter#raw_connection()","activerecord::attributemethods::write#raw_write_attribute()","activerecord::attributemethods::read#read_attribute()","activerecord::attributemethods::beforetypecast#read_attribute_before_type_cast()","activerecord::attributemethods::serialization#read_attribute_before_type_cast()","activerecord::querymethods#readonly()","activerecord::base#readonly!()","activerecord::base#readonly?()","activerecord::readonlyattributes::classmethods#readonly_attributes()","activerecord::connectionadapters::abstractadapter#reconnect!()","activerecord::connectionadapters::mysql2adapter#reconnect!()","activerecord::connectionadapters::mysqladapter#reconnect!()","activerecord::connectionadapters::postgresqladapter#reconnect!()","activerecord::migration::commandrecorder#record()","activerecord::connectionadapters::abstractmysqladapter#recreate_database()","activerecord::connectionadapters::table#references()","activerecord::connectionadapters::tabledefinition#references()","activerecord::reflection::classmethods#reflect_on_aggregation()","activerecord::reflection::classmethods#reflect_on_all_aggregations()","activerecord::reflection::classmethods#reflect_on_all_associations()","activerecord::reflection::classmethods#reflect_on_all_autosave_associations()","activerecord::reflection::classmethods#reflect_on_association()","activerecord::identitymap#reinit_with()","activerecord::connectionadapters::connectionpool#release_connection()","activerecord::connectionadapters::abstractadapter#release_savepoint()","activerecord::connectionadapters::abstractmysqladapter#release_savepoint()","activerecord::connectionadapters::postgresqladapter#release_savepoint()","activerecord::connectionadapters::sqliteadapter#release_savepoint()","activerecord::autosaveassociation#reload()","activerecord::persistence#reload()","activerecord::relation#reload()","activerecord::connectionadapters::table#remove()","activerecord::identitymap::remove()","activerecord::connectionadapters::table#remove_belongs_to()","activerecord::identitymap::remove_by_id()","activerecord::connectionadapters::schemastatements#remove_column()","activerecord::connectionadapters::abstractmysqladapter#remove_column_sql()","activerecord::connectionadapters::schemastatements#remove_columns()","activerecord::base::remove_connection()","activerecord::connectionadapters::connectionhandler#remove_connection()","activerecord::connectionadapters::schemastatements#remove_index()","activerecord::connectionadapters::table#remove_index()","activerecord::connectionadapters::abstractmysqladapter#remove_index_sql()","activerecord::connectionadapters::table#remove_references()","activerecord::connectionadapters::schemastatements#remove_timestamps()","activerecord::connectionadapters::table#remove_timestamps()","activerecord::connectionadapters::abstractmysqladapter#remove_timestamps_sql()","activerecord::connectionadapters::table#rename()","activerecord::connectionadapters::postgresqladapter#rename_column()","activerecord::connectionadapters::schemastatements#rename_column()","activerecord::connectionadapters::abstractmysqladapter#rename_column_sql()","activerecord::connectionadapters::postgresqladapter#rename_index()","activerecord::connectionadapters::schemastatements#rename_index()","activerecord::connectionadapters::abstractmysqladapter#rename_table()","activerecord::connectionadapters::postgresqladapter#rename_table()","activerecord::connectionadapters::sqliteadapter#rename_table()","activerecord::connectionadapters::schemastatements#rename_table()","activerecord::querymethods#reorder()","activerecord::identitymap::repository()","activerecord::testfixtures::classmethods#require_fixture_classes()","activerecord::connectionadapters::abstractadapter#requires_reloading?()","activerecord::connectionadapters::sqliteadapter#requires_reloading?()","activerecord::relation#reset()","activerecord::connectionadapters::abstractadapter#reset!()","activerecord::connectionadapters::mysql2adapter#reset!()","activerecord::connectionadapters::mysqladapter#reset!()","activerecord::connectionadapters::postgresqladapter#reset!()","activerecord::fixtures::reset_cache()","activerecord::modelschema::classmethods#reset_column_information()","activerecord::countercache#reset_counters()","activerecord::locking::optimistic::classmethods#reset_locking_column()","activerecord::logsubscriber::reset_runtime()","activerecord::connectionadapters::databasestatements#reset_sequence!()","activerecord::delegation#respond_to?()","activerecord::dynamicmatchers#respond_to?()","activerecord::base::retrieve_connection()","activerecord::connectionadapters::connectionhandler#retrieve_connection_pool()","activerecord::querymethods#reverse_order()","activerecord::migration#revert()","activerecord::migration#reverting?()","activerecord::transactions#rollback_active_record_state!()","activerecord::connectionadapters::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::postgresqladapter#rollback_db_transaction()","activerecord::connectionadapters::abstractadapter#rollback_to_savepoint()","activerecord::connectionadapters::abstractmysqladapter#rollback_to_savepoint()","activerecord::connectionadapters::postgresqladapter#rollback_to_savepoint()","activerecord::connectionadapters::sqliteadapter#rollback_to_savepoint()","activerecord::connectionadapters::databasestatements#rollback_transaction_records()","activerecord::testfixtures#run_in_transaction?()","activerecord::logsubscriber::runtime()","activerecord::logsubscriber::runtime=()","activerecord::sanitization::classmethods#sanitize_conditions()","activerecord::connectionadapters::databasestatements#sanitize_limit()","activerecord::sanitization::classmethods#sanitize_sql()","activerecord::sanitization::classmethods#sanitize_sql_array()","activerecord::sanitization::classmethods#sanitize_sql_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_for_conditions()","activerecord::sanitization::classmethods#sanitize_sql_hash()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_conditions()","activerecord::persistence#save()","activerecord::sessionstore::sqlbypass#save()","activerecord::validations#save()","activerecord::persistence#save!()","activerecord::validations#save!()","activerecord::dynamicfindermatch#save_method()","activerecord::dynamicfindermatch#save_record?()","activerecord::migration#say()","activerecord::migration#say_with_time()","activerecord::connectionadapters::postgresqladapter#schema_exists?()","activerecord::base::schema_format()","activerecord::connectionadapters::postgresqladapter#schema_search_path()","activerecord::connectionadapters::postgresqladapter#schema_search_path=()","activerecord::scoping::named::classmethods#scope()","activerecord::relation#scope_for_create()","activerecord::scoping::named::classmethods#scoped()","activerecord::relation#scoping()","activerecord::connectionadapters::databasestatements#select()","activerecord::connectionadapters::mysql2adapter#select()","activerecord::querymethods#select()","activerecord::connectionadapters::databasestatements#select_all()","activerecord::connectionadapters::querycache#select_all()","activerecord::connectionadapters::databasestatements#select_one()","activerecord::connectionadapters::databasestatements#select_rows()","activerecord::connectionadapters::mysql2adapter#select_rows()","activerecord::connectionadapters::mysqladapter#select_rows()","activerecord::connectionadapters::postgresqladapter#select_rows()","activerecord::connectionadapters::sqliteadapter#select_rows()","activerecord::connectionadapters::databasestatements#select_value()","activerecord::connectionadapters::databasestatements#select_values()","activerecord::modelschema::classmethods#sequence_name()","activerecord::modelschema::classmethods#sequence_name=()","activerecord::connectionadapters::postgresqladapter#serial_sequence()","activerecord::serialization#serializable_hash()","activerecord::attributemethods::serialization::attribute#serialize()","activerecord::attributemethods::serialization::classmethods#serialize()","activerecord::attributemethods::serialization::attribute#serialized_value()","activerecord::connectionadapters::postgresqladapter#session_auth=()","activerecord::sessionstore::sqlbypass::session_id_column()","activerecord::generators::sessionmigrationgenerator#session_table_name()","activerecord::testfixtures::classmethods#set_fixture_class()","activerecord::generators::migrationgenerator#set_local_assigns!()","activerecord::locking::optimistic::classmethods#set_locking_column()","activerecord::connectionadapters::postgresqladapter#set_standard_conforming_strings()","activerecord::validations::uniquenessvalidator#setup()","activerecord::testfixtures::classmethods#setup_fixture_accessors()","activerecord::testfixtures#setup_fixtures()","activerecord::connectionadapters::abstractmysqladapter#show_variable()","activerecord::explain#silence_auto_explain()","activerecord::fixtures#size()","activerecord::relation#size()","activerecord::logsubscriber#sql()","activerecord::connectionadapters::databasestatements#sql_for_insert()","activerecord::connectionadapters::postgresqladapter#sql_for_insert()","activerecord::connectionadapters::databaselimits#sql_query_length()","activerecord::connectionadapters::sqliteadapter#sqlite_version()","activerecord::inheritance::classmethods#sti_name()","activerecord::store::classmethods#store()","activerecord::store::classmethods#store_accessor()","activerecord::connectionadapters::schemastatements#structure_dump()","activerecord::connectionadapters::abstractadapter#substitute_at()","activerecord::connectionadapters::postgresqladapter#substitute_at()","activerecord::calculations#sum()","activerecord::connectionadapters::sqliteadapter#supports_add_column?()","activerecord::connectionadapters::abstractadapter#supports_bulk_alter?()","activerecord::connectionadapters::abstractadapter#supports_count_distinct?()","activerecord::connectionadapters::abstractadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_ddl_transactions?()","activerecord::connectionadapters::sqliteadapter#supports_ddl_transactions?()","activerecord::connectionadapters::abstractadapter#supports_explain?()","activerecord::connectionadapters::mysql2adapter#supports_explain?()","activerecord::connectionadapters::postgresqladapter#supports_explain?()","activerecord::connectionadapters::sqliteadapter#supports_explain?()","activerecord::connectionadapters::abstractadapter#supports_index_sort_order?()","activerecord::connectionadapters::abstractmysqladapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_index_sort_order?()","activerecord::connectionadapters::sqliteadapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_insert_with_returning?()","activerecord::connectionadapters::abstractadapter#supports_migrations?()","activerecord::connectionadapters::abstractmysqladapter#supports_migrations?()","activerecord::connectionadapters::postgresqladapter#supports_migrations?()","activerecord::connectionadapters::abstractadapter#supports_primary_key?()","activerecord::connectionadapters::abstractmysqladapter#supports_primary_key?()","activerecord::connectionadapters::abstractadapter#supports_savepoints?()","activerecord::connectionadapters::abstractmysqladapter#supports_savepoints?()","activerecord::connectionadapters::postgresqladapter#supports_savepoints?()","activerecord::connectionadapters::sqliteadapter#supports_savepoints?()","activerecord::connectionadapters::databasestatements#supports_statement_cache?()","activerecord::connectionadapters::mysqladapter#supports_statement_cache?()","activerecord::connectionadapters::postgresqladapter#supports_statement_cache?()","activerecord::connectionadapters::sqliteadapter#supports_statement_cache?()","activerecord::migration#suppress_messages()","activerecord::inheritance::classmethods#symbolized_base_class()","activerecord::inheritance::classmethods#symbolized_sti_name()","activerecord::connectionadapters::schemastatements#table_alias_for()","activerecord::connectionadapters::databaselimits#table_alias_length()","activerecord::connectionadapters::postgresqladapter#table_alias_length()","activerecord::connectionadapters::abstractmysqladapter#table_exists?()","activerecord::connectionadapters::postgresqladapter#table_exists?()","activerecord::connectionadapters::sqliteadapter#table_exists?()","activerecord::connectionadapters::schemacache#table_exists?()","activerecord::connectionadapters::schemastatements#table_exists?()","activerecord::modelschema::classmethods#table_exists?()","activerecord::modelschema::classmethods#table_name()","activerecord::sessionstore::sqlbypass::table_name()","activerecord::modelschema::classmethods#table_name=()","activerecord::connectionadapters::databaselimits#table_name_length()","activerecord::fixtures#table_rows()","activerecord::connectionadapters::sqliteadapter#table_structure()","activerecord::connectionadapters::postgresqladapter#tables()","activerecord::testfixtures#teardown_fixtures()","activerecord::base::timestamped_migrations()","activerecord::connectionadapters::table#timestamps()","activerecord::connectionadapters::tabledefinition#timestamps()","activerecord::relation#to_a()","mysql::time#to_date()","activerecord::result#to_hash()","activerecord::attributemethods::primarykey#to_key()","activerecord::integration#to_param()","activerecord::connectionadapters::databasestatements#to_sql()","activerecord::connectionadapters::tabledefinition#to_sql()","activerecord::relation#to_sql()","activerecord::serialization#to_xml()","activerecord::persistence#toggle()","activerecord::persistence#toggle!()","activerecord::persistence#touch()","activerecord::connectionadapters::databasestatements#transaction()","activerecord::transactions#transaction()","activerecord::transactions::classmethods#transaction()","activerecord::connectionadapters::abstractadapter#transaction_joinable=()","activerecord::connectionadapters::abstractadapter#translate_exception()","activerecord::connectionadapters::abstractmysqladapter#translate_exception()","activerecord::connectionadapters::postgresqladapter#translate_exception()","activerecord::connectionadapters::sqliteadapter#translate_exception()","activerecord::testfixtures::classmethods#try_to_load_dependency()","activerecord::connectionadapters::postgresqladapter::tabledefinition#tsvector()","activerecord::connectionadapters::mysqladapter#type_cast()","activerecord::connectionadapters::postgresqladapter#type_cast()","activerecord::connectionadapters::quoting#type_cast()","activerecord::attributemethods::serialization#type_cast_attribute_for_write()","activerecord::connectionadapters::abstractmysqladapter#type_to_sql()","activerecord::connectionadapters::postgresqladapter#type_to_sql()","activerecord::connectionadapters::querycache#uncached()","activerecord::querycache::classmethods#uncached()","activerecord::attributemethods::classmethods#undefine_attribute_methods()","activerecord::attributemethods::read::classmethods#undefine_attribute_methods()","activerecord::connectionadapters::postgresqladapter#unescape_bytea()","activerecord::querymethods#uniq()","activerecord::attributemethods::serialization::attribute#unserialize()","activerecord::attributemethods::serialization::attribute#unserialized_value()","activerecord::migration#up()","activerecord::connectionadapters::databasestatements#update()","activerecord::relation#update()","activerecord::relation#update_all()","activerecord::persistence#update_attribute()","activerecord::persistence#update_attributes()","activerecord::persistence#update_attributes!()","activerecord::persistence#update_column()","activerecord::countercache#update_counters()","activerecord::locking::optimistic::classmethods#update_counters()","activerecord::connectionadapters::databasestatements#update_sql()","activerecord::connectionadapters::postgresqladapter#update_sql()","activerecord::identitymap::use()","activerecord::testfixtures::classmethods#uses_transaction()","activerecord::testfixtures::classmethods#uses_transaction?()","activerecord::findermethods#using_limitable_reflections?()","activerecord::validations#valid?()","activerecord::connectionadapters::sqliteadapter#valid_alter_table_options()","activerecord::scoping::named::classmethods#valid_scope_name?()","activerecord::validations::associatedvalidator#validate_each()","activerecord::validations::uniquenessvalidator#validate_each()","activerecord::validations::classmethods#validates_associated()","activerecord::validations::classmethods#validates_uniqueness_of()","activerecord::connectionadapters::abstractadapter#verify!()","activerecord::querymethods#where()","activerecord::relation#where_values_hash()","activerecord::connectionadapters::connectionpool#with_connection()","activerecord::scoping::classmethods#with_exclusive_scope()","activerecord::locking::pessimistic#with_lock()","activerecord::scoping::classmethods#with_scope()","activerecord::transactions#with_transaction_returning_status()","activerecord::identitymap::without()","activerecord::migration#write()","activerecord::attributemethods::write#write_attribute()","activerecord::connectionadapters::postgresqladapter::tabledefinition#xml()","activerecord::connectionadapters::tabledefinition#xml()",""],"info":[["ActiveRecord","","ActiveRecord.html","",""],["ActiveRecord::ActiveRecordError","","ActiveRecord/ActiveRecordError.html","","<p>Active Record Errors\n<p>Generic Active Record exception class.\n"],["ActiveRecord::AdapterNotFound","","ActiveRecord/AdapterNotFound.html","","<p>Raised when Active Record cannot find database adapter specified in\n<code>config/database.yml</code> or programmatically. …\n"],["ActiveRecord::AdapterNotSpecified","","ActiveRecord/AdapterNotSpecified.html","","<p>Raised when adapter not specified on connection (or configuration file\n<code>config/database.yml</code> misses adapter …\n"],["ActiveRecord::Aggregations","","ActiveRecord/Aggregations.html","",""],["ActiveRecord::Aggregations::ClassMethods","","ActiveRecord/Aggregations/ClassMethods.html","","<p>Active Record implements aggregation through a macro-like class method\ncalled <code>composed_of</code> for representing …\n"],["ActiveRecord::AssociationTypeMismatch","","ActiveRecord/AssociationTypeMismatch.html","","<p>Raised when an object assigned to an association has an incorrect type.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Ticket</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveRecord::Associations","","ActiveRecord/Associations.html","","<p>Active Record Has One Through Association\n<p>Active Record Belongs To Polymorphic Association\n<p>Active Record …\n"],["ActiveRecord::Associations::ClassMethods","","ActiveRecord/Associations/ClassMethods.html","","<p>Associations are a set of macro-like class methods for tying objects\ntogether through foreign keys.  …\n"],["ActiveRecord::AttributeAssignment","","ActiveRecord/AttributeAssignment.html","",""],["ActiveRecord::AttributeAssignment::ClassMethods","","ActiveRecord/AttributeAssignment/ClassMethods.html","",""],["ActiveRecord::AttributeAssignmentError","","ActiveRecord/AttributeAssignmentError.html","","<p>Raised when an error occurred while doing a mass assignment to an attribute\nthrough the <code>attributes=</code> method. …\n"],["ActiveRecord::AttributeMethods","","ActiveRecord/AttributeMethods.html","",""],["ActiveRecord::AttributeMethods::BeforeTypeCast","","ActiveRecord/AttributeMethods/BeforeTypeCast.html","",""],["ActiveRecord::AttributeMethods::ClassMethods","","ActiveRecord/AttributeMethods/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::DeprecatedUnderscoreRead","","ActiveRecord/AttributeMethods/DeprecatedUnderscoreRead.html","",""],["ActiveRecord::AttributeMethods::DeprecatedUnderscoreRead::ClassMethods","","ActiveRecord/AttributeMethods/DeprecatedUnderscoreRead/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Dirty","","ActiveRecord/AttributeMethods/Dirty.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey","","ActiveRecord/AttributeMethods/PrimaryKey.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Query","","ActiveRecord/AttributeMethods/Query.html","",""],["ActiveRecord::AttributeMethods::Read","","ActiveRecord/AttributeMethods/Read.html","",""],["ActiveRecord::AttributeMethods::Read::ClassMethods","","ActiveRecord/AttributeMethods/Read/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Serialization","","ActiveRecord/AttributeMethods/Serialization.html","",""],["ActiveRecord::AttributeMethods::Serialization::Attribute","","ActiveRecord/AttributeMethods/Serialization/Attribute.html","",""],["ActiveRecord::AttributeMethods::Serialization::ClassMethods","","ActiveRecord/AttributeMethods/Serialization/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion","","ActiveRecord/AttributeMethods/TimeZoneConversion.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","","ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Write","","ActiveRecord/AttributeMethods/Write.html","",""],["ActiveRecord::AttributeMethods::Write::ClassMethods","","ActiveRecord/AttributeMethods/Write/ClassMethods.html","",""],["ActiveRecord::AutosaveAssociation","","ActiveRecord/AutosaveAssociation.html","","<p>Active Record Autosave Association\n<p><code>AutosaveAssociation</code> is a module that takes care of\nautomatically saving ...\n"],["ActiveRecord::AutosaveAssociation::ClassMethods","","ActiveRecord/AutosaveAssociation/ClassMethods.html","",""],["ActiveRecord::Base","","ActiveRecord/Base.html","","<p>Active Record\n<p>Active Record objects don’t specify their attributes directly, but rather\ninfer them from …\n"],["ActiveRecord::Batches","","ActiveRecord/Batches.html","",""],["ActiveRecord::Calculations","","ActiveRecord/Calculations.html","",""],["ActiveRecord::Callbacks","","ActiveRecord/Callbacks.html","","<p>Active Record Callbacks\n<p>Callbacks are hooks into the life cycle of an Active Record object that\nallow …\n"],["ActiveRecord::Coders","","ActiveRecord/Coders.html","",""],["ActiveRecord::Coders::YAMLColumn","","ActiveRecord/Coders/YAMLColumn.html","",""],["ActiveRecord::ConfigurationError","","ActiveRecord/ConfigurationError.html","","<p>Raised when association is being configured improperly or user tries to use\noffset and limit together …\n"],["ActiveRecord::ConnectionAdapters","","ActiveRecord/ConnectionAdapters.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter","","ActiveRecord/ConnectionAdapters/AbstractAdapter.html","","<p>Active Record supports multiple database systems. AbstractAdapter and\nrelated classes form the abstraction …\n"],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html","",""],["ActiveRecord::ConnectionAdapters::Column","","ActiveRecord/ConnectionAdapters/Column.html","",""],["ActiveRecord::ConnectionAdapters::Column::Format","","ActiveRecord/ConnectionAdapters/Column/Format.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionHandler","","ActiveRecord/ConnectionAdapters/ConnectionHandler.html","","<p>ConnectionHandler is a collection of ConnectionPool objects. It is used for\nkeeping separate connection …\n"],["ActiveRecord::ConnectionAdapters::ConnectionManagement","","ActiveRecord/ConnectionAdapters/ConnectionManagement.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionPool","","ActiveRecord/ConnectionAdapters/ConnectionPool.html","","<p>Connection pool base class for managing Active Record database connections.\n<p>Introduction\n<p>A connection pool …\n"],["ActiveRecord::ConnectionAdapters::DatabaseLimits","","ActiveRecord/ConnectionAdapters/DatabaseLimits.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseStatements","","ActiveRecord/ConnectionAdapters/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::Mysql2Adapter","","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter","","ActiveRecord/ConnectionAdapters/MysqlAdapter.html","","<p>The MySQL adapter will work with both Ruby/MySQL, which is a Ruby-based\nMySQL adapter that comes bundled …\n"],["ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html","","<p>The PostgreSQL adapter works both with the native C\n(ruby.scripting.ca/postgres/) and the pure Ruby (available …\n"],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Utils","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Utils.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn","","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html","",""],["ActiveRecord::ConnectionAdapters::QueryCache","","ActiveRecord/ConnectionAdapters/QueryCache.html","",""],["ActiveRecord::ConnectionAdapters::Quoting","","ActiveRecord/ConnectionAdapters/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::SQLiteAdapter","","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html","","<p>The SQLite adapter works with both the 2.x and 3.x series of SQLite with\nthe sqlite-ruby drivers (available …\n"],["ActiveRecord::ConnectionAdapters::SQLiteAdapter::ExplainPrettyPrinter","","ActiveRecord/ConnectionAdapters/SQLiteAdapter/ExplainPrettyPrinter.html","",""],["ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","","ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","","ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html","",""],["ActiveRecord::ConnectionAdapters::SchemaCache","","ActiveRecord/ConnectionAdapters/SchemaCache.html","",""],["ActiveRecord::ConnectionAdapters::SchemaStatements","","ActiveRecord/ConnectionAdapters/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::StatementPool","","ActiveRecord/ConnectionAdapters/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::Table","","ActiveRecord/ConnectionAdapters/Table.html","","<p>Represents an SQL table in an abstract way for updating a table. Also see\nTableDefinition and SchemaStatements#create_table …\n"],["ActiveRecord::ConnectionAdapters::TableDefinition","","ActiveRecord/ConnectionAdapters/TableDefinition.html","","<p>Represents the schema of an SQL table in an abstract way. This class\nprovides methods for manipulating …\n"],["ActiveRecord::ConnectionNotEstablished","","ActiveRecord/ConnectionNotEstablished.html","","<p>Raised when connection to the database could not been established (for\nexample when <code>connection=</code> is given …\n"],["ActiveRecord::ConnectionTimeoutError","","ActiveRecord/ConnectionTimeoutError.html","","<p>Raised when a connection could not be obtained within the connection\nacquisition timeout period.\n"],["ActiveRecord::CounterCache","","ActiveRecord/CounterCache.html","","<p>Active Record Counter Cache\n"],["ActiveRecord::DangerousAttributeError","","ActiveRecord/DangerousAttributeError.html","","<p>Raised when attribute has a name reserved by Active Record (when attribute\nhas name of one of Active …\n"],["ActiveRecord::Delegation","","ActiveRecord/Delegation.html","",""],["ActiveRecord::DynamicFinderMatch","","ActiveRecord/DynamicFinderMatch.html","","<p>Active Record Dynamic Finder Match\n<p>Refer to ActiveRecord::Base documentation for Dynamic attribute-based …\n"],["ActiveRecord::DynamicMatchers","","ActiveRecord/DynamicMatchers.html","",""],["ActiveRecord::DynamicScopeMatch","","ActiveRecord/DynamicScopeMatch.html","","<p>Active Record Dynamic Scope Match\n<p>Provides dynamic attribute-based scopes such as\n<code>scoped_by_price(4.99</code> …\n"],["ActiveRecord::Explain","","ActiveRecord/Explain.html","",""],["ActiveRecord::FinderMethods","","ActiveRecord/FinderMethods.html","",""],["ActiveRecord::Fixtures","","ActiveRecord/Fixtures.html","","<p>Fixtures are a way of organizing data that you want to test against; in\nshort, sample data.\n<p>They are stored …\n"],["ActiveRecord::Fixtures::File","","ActiveRecord/Fixtures/File.html","",""],["ActiveRecord::Generators","","ActiveRecord/Generators.html","",""],["ActiveRecord::Generators::Migration","","ActiveRecord/Generators/Migration.html","",""],["ActiveRecord::Generators::MigrationGenerator","","ActiveRecord/Generators/MigrationGenerator.html","",""],["ActiveRecord::Generators::ModelGenerator","","ActiveRecord/Generators/ModelGenerator.html","",""],["ActiveRecord::Generators::ObserverGenerator","","ActiveRecord/Generators/ObserverGenerator.html","",""],["ActiveRecord::Generators::SessionMigrationGenerator","","ActiveRecord/Generators/SessionMigrationGenerator.html","",""],["ActiveRecord::IdentityMap","","ActiveRecord/IdentityMap.html","","<p>Active Record Identity Map\n<p>Ensures that each object gets loaded only once by keeping every loaded\nobject …\n"],["ActiveRecord::IdentityMap::Middleware","","ActiveRecord/IdentityMap/Middleware.html","",""],["ActiveRecord::Inheritance","","ActiveRecord/Inheritance.html","",""],["ActiveRecord::Inheritance::ClassMethods","","ActiveRecord/Inheritance/ClassMethods.html","",""],["ActiveRecord::Integration","","ActiveRecord/Integration.html","",""],["ActiveRecord::InvalidForeignKey","","ActiveRecord/InvalidForeignKey.html","","<p>Raised when a record cannot be inserted or updated because it references a\nnon-existent record.\n"],["ActiveRecord::IrreversibleMigration","","ActiveRecord/IrreversibleMigration.html","","<p>Exception that can be raised to stop migrations from going backwards.\n"],["ActiveRecord::Locking","","ActiveRecord/Locking.html","",""],["ActiveRecord::Locking::Optimistic","","ActiveRecord/Locking/Optimistic.html","","<p>What is Optimistic Locking\n<p>Optimistic locking allows multiple users to access the same record for\nedits, …\n"],["ActiveRecord::Locking::Optimistic::ClassMethods","","ActiveRecord/Locking/Optimistic/ClassMethods.html","",""],["ActiveRecord::Locking::Pessimistic","","ActiveRecord/Locking/Pessimistic.html","","<p>Locking::Pessimistic provides support for row-level locking using SELECT …\nFOR UPDATE and other lock …\n"],["ActiveRecord::LogSubscriber","","ActiveRecord/LogSubscriber.html","",""],["ActiveRecord::Migration","","ActiveRecord/Migration.html","","<p>Active Record Migrations\n<p>Migrations can manage the evolution of a schema used by several physical\ndatabases. …\n"],["ActiveRecord::Migration::CommandRecorder","","ActiveRecord/Migration/CommandRecorder.html","","<p><code>ActiveRecord::Migration::CommandRecorder</code> records commands done\nduring a migration and knows how to reverse ...\n"],["ActiveRecord::MigrationProxy","","ActiveRecord/MigrationProxy.html","","<p>MigrationProxy is used to defer loading of the actual migration classes\nuntil they are needed\n"],["ActiveRecord::ModelSchema","","ActiveRecord/ModelSchema.html","",""],["ActiveRecord::ModelSchema::ClassMethods","","ActiveRecord/ModelSchema/ClassMethods.html","",""],["ActiveRecord::MultiparameterAssignmentErrors","","ActiveRecord/MultiparameterAssignmentErrors.html","","<p>Raised when there are multiple errors while doing a mass assignment through\nthe <code>attributes</code> method. The …\n"],["ActiveRecord::NestedAttributes","","ActiveRecord/NestedAttributes.html","",""],["ActiveRecord::NestedAttributes::ClassMethods","","ActiveRecord/NestedAttributes/ClassMethods.html","","<p>Active Record Nested Attributes\n<p>Nested attributes allow you to save attributes on associated records\nthrough …\n"],["ActiveRecord::NestedAttributes::TooManyRecords","","ActiveRecord/NestedAttributes/TooManyRecords.html","",""],["ActiveRecord::Observer","","ActiveRecord/Observer.html","","<p>Active Record Observer\n<p>Observer classes respond to life cycle callbacks to implement trigger-like\nbehavior …\n"],["ActiveRecord::Persistence","","ActiveRecord/Persistence.html","","<p>Active Record Persistence\n"],["ActiveRecord::Persistence::ClassMethods","","ActiveRecord/Persistence/ClassMethods.html","",""],["ActiveRecord::PreparedStatementInvalid","","ActiveRecord/PreparedStatementInvalid.html","","<p>Raised when number of bind variables in statement given to\n<code>:condition</code> key (for example, when using <code>find</code> …\n"],["ActiveRecord::QueryCache","","ActiveRecord/QueryCache.html","","<p>Active Record Query Cache\n"],["ActiveRecord::QueryCache::ClassMethods","","ActiveRecord/QueryCache/ClassMethods.html","",""],["ActiveRecord::QueryMethods","","ActiveRecord/QueryMethods.html","",""],["ActiveRecord::Querying","","ActiveRecord/Querying.html","",""],["ActiveRecord::Railtie","","ActiveRecord/Railtie.html","","<p>Active Record Railtie\n"],["ActiveRecord::Railties","","ActiveRecord/Railties.html","",""],["ActiveRecord::Railties::ControllerRuntime","","ActiveRecord/Railties/ControllerRuntime.html","",""],["ActiveRecord::Railties::ControllerRuntime::ClassMethods","","ActiveRecord/Railties/ControllerRuntime/ClassMethods.html","",""],["ActiveRecord::ReadOnlyRecord","","ActiveRecord/ReadOnlyRecord.html","","<p>Raised on attempt to update record that is instantiated as read only.\n"],["ActiveRecord::ReadonlyAttributes","","ActiveRecord/ReadonlyAttributes.html","",""],["ActiveRecord::ReadonlyAttributes::ClassMethods","","ActiveRecord/ReadonlyAttributes/ClassMethods.html","",""],["ActiveRecord::RecordInvalid","","ActiveRecord/RecordInvalid.html","","<p>Active Record RecordInvalid\n<p>Raised by <code>save!</code> and <code>create!</code> when the record is\ninvalid. Use the <code>record</code> method …\n"],["ActiveRecord::RecordNotFound","","ActiveRecord/RecordNotFound.html","","<p>Raised when Active Record cannot find record by given id or set of ids.\n"],["ActiveRecord::RecordNotSaved","","ActiveRecord/RecordNotSaved.html","","<p>Raised by ActiveRecord::Base.save! and ActiveRecord::Base.create! methods\nwhen record cannot be saved …\n"],["ActiveRecord::RecordNotUnique","","ActiveRecord/RecordNotUnique.html","","<p>Raised when a record cannot be inserted because it would violate a\nuniqueness constraint.\n"],["ActiveRecord::Reflection","","ActiveRecord/Reflection.html","",""],["ActiveRecord::Reflection::ClassMethods","","ActiveRecord/Reflection/ClassMethods.html","","<p>Reflection enables to interrogate Active Record classes and objects about\ntheir associations and aggregations. …\n"],["ActiveRecord::Reflection::MacroReflection","","ActiveRecord/Reflection/MacroReflection.html","","<p>Abstract base class for AggregateReflection and AssociationReflection.\nObjects of AggregateReflection …\n"],["ActiveRecord::Relation","","ActiveRecord/Relation.html","","<p>Active Record Relation\n"],["ActiveRecord::Result","","ActiveRecord/Result.html","","<p>This class encapsulates a Result returned from calling\n<code>exec_query</code> on any database connection adapter. …\n"],["ActiveRecord::Rollback","","ActiveRecord/Rollback.html","","<p>ActiveRecord::Transactions::ClassMethods.transaction uses this exception to\ndistinguish a deliberate …\n"],["ActiveRecord::Sanitization","","ActiveRecord/Sanitization.html","",""],["ActiveRecord::Sanitization::ClassMethods","","ActiveRecord/Sanitization/ClassMethods.html","",""],["ActiveRecord::Schema","","ActiveRecord/Schema.html","","<p>Active Record Schema\n<p>Allows programmers to programmatically define a schema in a portable DSL.\nThis means …\n"],["ActiveRecord::Scoping","","ActiveRecord/Scoping.html","","<p>Active Record Named Scopes\n"],["ActiveRecord::Scoping::ClassMethods","","ActiveRecord/Scoping/ClassMethods.html","",""],["ActiveRecord::Scoping::Default","","ActiveRecord/Scoping/Default.html","",""],["ActiveRecord::Scoping::Default::ClassMethods","","ActiveRecord/Scoping/Default/ClassMethods.html","",""],["ActiveRecord::Scoping::Named","","ActiveRecord/Scoping/Named.html","",""],["ActiveRecord::Scoping::Named::ClassMethods","","ActiveRecord/Scoping/Named/ClassMethods.html","",""],["ActiveRecord::Serialization","","ActiveRecord/Serialization.html","","<p>Active Record Serialization\n"],["ActiveRecord::SerializationTypeMismatch","","ActiveRecord/SerializationTypeMismatch.html","","<p>Raised when unserialized object’s type mismatches one specified for\nserializable field.\n"],["ActiveRecord::SessionStore","","ActiveRecord/SessionStore.html","","<p>Active Record Session Store\n<p>A session store backed by an Active Record class. A default class is\nprovided, …\n"],["ActiveRecord::SessionStore::Session","","ActiveRecord/SessionStore/Session.html","","<p>The default Active Record class.\n"],["ActiveRecord::SessionStore::SqlBypass","","ActiveRecord/SessionStore/SqlBypass.html","","<p>A barebones session store which duck-types with the default session store\nbut bypasses Active Record …\n"],["ActiveRecord::SpawnMethods","","ActiveRecord/SpawnMethods.html","",""],["ActiveRecord::StaleObjectError","","ActiveRecord/StaleObjectError.html","","<p>Raised on attempt to save stale record. Record is stale when it’s being\nsaved in another query after …\n"],["ActiveRecord::StatementInvalid","","ActiveRecord/StatementInvalid.html","","<p>Raised when SQL statement cannot be executed by the database (for example,\nit’s often the case for MySQL …\n"],["ActiveRecord::Store","","ActiveRecord/Store.html","","<p>Store gives you a thin wrapper around serialize for the purpose of storing\nhashes in a single column. …\n"],["ActiveRecord::Store::ClassMethods","","ActiveRecord/Store/ClassMethods.html","",""],["ActiveRecord::TestFixtures","","ActiveRecord/TestFixtures.html","",""],["ActiveRecord::TestFixtures::ClassMethods","","ActiveRecord/TestFixtures/ClassMethods.html","",""],["ActiveRecord::ThrowResult","","ActiveRecord/ThrowResult.html","","<p>Raised when SQL statement is invalid and the application gets a blank\nresult.\n"],["ActiveRecord::Timestamp","","ActiveRecord/Timestamp.html","","<p>Active Record Timestamp\n<p>Active Record automatically timestamps create and update operations if the\ntable …\n"],["ActiveRecord::Transactions","","ActiveRecord/Transactions.html","","<p>See ActiveRecord::Transactions::ClassMethods for documentation.\n"],["ActiveRecord::Transactions::ClassMethods","","ActiveRecord/Transactions/ClassMethods.html","","<p>Active Record Transactions\n<p>Transactions are protective blocks where SQL statements are only permanent\n…\n"],["ActiveRecord::Translation","","ActiveRecord/Translation.html","",""],["ActiveRecord::UnknownAttributeError","","ActiveRecord/UnknownAttributeError.html","","<p>Raised when unknown attributes are supplied via mass assignment.\n"],["ActiveRecord::UnknownPrimaryKey","","ActiveRecord/UnknownPrimaryKey.html","","<p>Raised when a primary key is needed, but there is not one specified in the\nschema or model.\n"],["ActiveRecord::Validations","","ActiveRecord/Validations.html","","<p>Active Record Validations\n<p>Active Record includes the majority of its validations from\n<code>ActiveModel::Validations</code> …\n"],["ActiveRecord::Validations::AssociatedValidator","","ActiveRecord/Validations/AssociatedValidator.html","",""],["ActiveRecord::Validations::ClassMethods","","ActiveRecord/Validations/ClassMethods.html","",""],["ActiveRecord::Validations::UniquenessValidator","","ActiveRecord/Validations/UniquenessValidator.html","",""],["ActiveRecord::WrappedDatabaseException","","ActiveRecord/WrappedDatabaseException.html","","<p>Parent class for all specific exceptions which wrap database driver\nexceptions provides access to the …\n"],["ArJdbcMySQL","","ArJdbcMySQL.html","",""],["ArJdbcMySQL::Error","","ArJdbcMySQL/Error.html","",""],["Mysql","","Mysql.html","",""],["Mysql::Result","","Mysql/Result.html","",""],["Mysql::Stmt","","Mysql/Stmt.html","",""],["Mysql::Time","","Mysql/Time.html","",""],["<=>","ActiveRecord::Base","ActiveRecord/Base.html#method-i-3C-3D-3E","(other_object)","<p>Allows sort on objects\n"],["<=>","ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html#method-i-3C-3D-3E","(version_string)",""],["==","ActiveRecord::Base","ActiveRecord/Base.html#method-i-3D-3D","(comparison_object)","<p>Returns true if <code>comparison_object</code> is the same exact object, or\n<code>comparison_object</code> is of the same type …\n"],["==","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-3D-3D","(other_aggregation)","<p>Returns <code>true</code> if <code>self</code> and\n<code>other_aggregation</code> have the same <code>name</code> attribute,\n<code>active_record</code> attribute, and …\n"],["==","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-3D-3D","(other)",""],["===","ActiveRecord::Base","ActiveRecord/Base.html#method-c-3D-3D-3D","(object)","<p>Overwrite the default class equality method to provide support for\nassociation proxies.\n"],["[]","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-5B-5D","(name)","<p>Returns a ColumnDefinition for the column with name <code>name</code>.\n"],["[]","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-i-5B-5D","(x)",""],["[]=","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-i-5B-5D-3D","(k,v)",""],["_attribute","ActiveRecord::AttributeMethods::DeprecatedUnderscoreRead","ActiveRecord/AttributeMethods/DeprecatedUnderscoreRead.html#method-i-_attribute","(attr_name)",""],["abstract_class?","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-abstract_class-3F","()","<p>Returns whether this class is an abstract class or not.\n"],["accepts_nested_attributes_for","ActiveRecord::NestedAttributes::ClassMethods","ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for","(*attr_names)","<p>Defines an attributes writer for the specified association(s). If you are\nusing <code>attr_protected</code> or <code>attr_accessible</code> …\n"],["accessible_attributes","ActiveRecord::Generators::ModelGenerator","ActiveRecord/Generators/ModelGenerator.html#method-i-accessible_attributes","()",""],["active?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active-3F","()","<p>Checks whether the connection to the database is still active. This\nincludes checking whether the database …\n"],["active?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active-3F","()","<p>Is this connection alive and ready for queries?\n"],["active_connection?","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-active_connection-3F","()","<p>Is there an open connection that is being used for the current thread?\n"],["active_connections?","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-active_connections-3F","()","<p>Returns true if there are any active connections among the connection pools\nthat the ConnectionHandler …\n"],["adapter_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-adapter_name","()","<p>Returns the human-readable name of the adapter. Use mixed case - one can\nalways use downcase if needed. …\n"],["adapter_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-adapter_name","()","<p>Returns ‘PostgreSQL’ as adapter name for identification purposes.\n"],["add","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-add","(record)",""],["add_column","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column","(table_name, column_name, type, options = {})",""],["add_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column_position!","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column_position-21","(sql, options)",""],["add_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column_sql","(table_name, column_name, type, options = {})",""],["add_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index","(table_name, column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n<p>The index will …\n"],["add_index_length","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_index_length","(option_strings, column_names, options = {})",""],["add_index_options","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_options","(table_name, column_name, options = {})",""],["add_index_sort_order","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_sort_order","(option_strings, column_names, options = {})",""],["add_index_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_index_sql","(table_name, column_name, options = {})",""],["add_observer!","ActiveRecord::Observer","ActiveRecord/Observer.html#method-i-add_observer-21","(klass)",""],["add_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_timestamps","(table_name)","<p>Adds timestamps (created_at and updated_at) columns to the named table.\n<p>Examples\n\n<pre>add_timestamps(:suppliers)</pre>\n"],["add_timestamps_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_timestamps_sql","(table_name)",""],["add_to_transaction","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-add_to_transaction","()","<p>Add the record to the current transaction so that the :after_rollback and\n:after_commit callbacks can …\n"],["add_transaction_record","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_transaction_record","(record)","<p>Register a record with the current transaction so that its after_commit and\nafter_rollback callbacks …\n"],["after_commit","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit","(*args, &block)",""],["after_rollback","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback","(*args, &block)",""],["all","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-all","(*args)","<p>A convenience wrapper for <code>find(:all, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["announce","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-announce","(message)",""],["any?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-any-3F","()",""],["apply_finder_options","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-apply_finder_options","(options)",""],["apply_join_dependency","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-apply_join_dependency","(relation, join_dependency)",""],["arel","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-arel","()",""],["arel_engine","ActiveRecord::Base","ActiveRecord/Base.html#method-c-arel_engine","()",""],["arel_table","ActiveRecord::Base","ActiveRecord/Base.html#method-c-arel_table","()",""],["assign_attributes","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-assign_attributes","(new_attributes, options = {})","<p>Allows you to set all the attributes for a particular mass-assignment\nsecurity role by passing in a hash …\n"],["assume_migrated_upto_version","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-assume_migrated_upto_version","(version, migrations_paths = ActiveRecord::Migrator.migrations_paths)",""],["attr_readonly","ActiveRecord::ReadonlyAttributes::ClassMethods","ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-attr_readonly","(*attributes)","<p>Attributes listed as readonly will be used to create a new record but\nupdate operations will ignore these …\n"],["attribute_cast_code","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-attribute_cast_code","(attr_name)","<p>The enhanced read method automatically converts the UTC time stored in the\ndatabase to the time zone …\n"],["attribute_method?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_method-3F","(attribute)",""],["attribute_methods_generated?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_methods_generated-3F","()",""],["attribute_names","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_names","()","<p>Returns an array of column names as strings if it’s not an abstract class\nand table exists. Otherwise …\n"],["attributes=","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-attributes-3D","(new_attributes)","<p>Allows you to set all the attributes at once by passing in a hash with keys\nmatching the attribute names …\n"],["attributes_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attributes_before_type_cast","()","<p>Returns a hash of attributes before typecasting and deserialization.\n"],["attributes_with_index","ActiveRecord::Generators::ModelGenerator","ActiveRecord/Generators/ModelGenerator.html#method-i-attributes_with_index","()",""],["average","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-average","(column_name, options = {})","<p>Calculates the average value on a given column. Returns <code>nil</code> if\nthere’s no row. See <code>calculate</code> for examples …\n"],["bang?","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-i-bang-3F","()",""],["base_class","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-base_class","()","<p>Returns the base AR subclass that this class descends from. If A extends\nAR::Base, A.base_class will …\n"],["basename","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-i-basename","()",""],["becomes","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-becomes","(klass)","<p>Returns an instance of the specified <code>klass</code> with the attributes\nof the current record. This is mostly …\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-begin_db_transaction","()",""],["begin_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins the transaction (and turns off auto-committing).\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-begin_db_transaction","()","<p>Begins a transaction.\n"],["belongs_to","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to","(name, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if this class …\n"],["belongs_to","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-belongs_to","(*args)",""],["belongs_to","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-belongs_to","(*args)",""],["bind","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-bind","(value)",""],["build","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-build","(*args, &block)",""],["build_arel","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_arel","()",""],["cache","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache","()","<p>Enable the query cache within the block.\n"],["cache","ActiveRecord::QueryCache::ClassMethods","ActiveRecord/QueryCache/ClassMethods.html#method-i-cache","(&block)","<p>Enable the query cache within the block if Active Record is configured.\n"],["cache_attribute?","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the provided attribute is being cached.\n"],["cache_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attributes","(*attribute_names)","<p><code>cache_attributes</code> allows you to declare which converted\nattribute values should be cached. Usually caching ...\n"],["cache_fixtures","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-cache_fixtures","(connection, fixtures_map)",""],["cache_for_connection","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-cache_for_connection","(connection)",""],["cache_key","ActiveRecord::Integration","ActiveRecord/Integration.html#method-i-cache_key","()","<p>Returns a cache key that can be used to identify this record.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Product</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">cache_key</span>     <span class=\"ruby-comment\"># =&gt; &quot;products/new&quot; ...</span>\n</pre>\n"],["cached_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cached_attributes","()","<p>Returns the attributes which are cached. By default time related columns\nwith datatype <code>:datetime, :timestamp,</code> …\n"],["cached_fixtures","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-cached_fixtures","(connection, keys_to_fetch = nil)",""],["calculate","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-calculate","(operation, column_name, options = {})","<p>This calculates aggregate values in the given column. Methods for count,\nsum, average, minimum, and maximum …\n"],["call","ActiveRecord::ConnectionAdapters::ConnectionManagement","ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-i-call","(env)",""],["call","ActiveRecord::IdentityMap::Middleware","ActiveRecord/IdentityMap/Middleware.html#method-i-call","(env)",""],["call","ActiveRecord::QueryCache","ActiveRecord/QueryCache.html#method-i-call","(env)",""],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_sensitive_equality_operator","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-case_sensitive_equality_operator","()",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_sensitive_modifier","(node)",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_sensitive_modifier","(node)",""],["change","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-change","(column_name, type, options = {})","<p>Changes the column’s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column of a table.\n"],["change_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column’s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column_default","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_default","(table_name, column_name, default)",""],["change_column_default","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column_default","(table_name, column_name, default)","<p>Changes the default value of a table column.\n"],["change_column_default","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Sets a new default value for a column.\n<p>Examples\n\n<pre>change_column_default(:suppliers, :qualification, 'new') ...</pre>\n"],["change_column_null","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_sql","(table_name, column_name, type, options = {})",""],["change_default","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-change_default","(column_name, default)","<p>Sets a new default value for a column. See\nSchemaStatements#change_column_default\n<p>Examples\n\n<pre>t.change_default(:qualification, ...</pre>\n"],["change_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table","(table_name, options = {})","<p>A block for changing columns in <code>table</code>.\n<p>Example\n\n<pre># change_table() yields a Table instance\nchange_table(:suppliers) ...</pre>\n"],["changed_for_autosave?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-changed_for_autosave-3F","()","<p>Returns whether or not this record has been changed in any way (including\nwhether any of its nested autosave …\n"],["charset","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-charset","()","<p>Returns the database character set.\n"],["checkin","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkin","(conn)","<p>Check-in a database connection back into the pool, indicating that you no\nlonger need this connection. …\n"],["checkout","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout","()","<p>Check-out a database connection from the pool, indicating that you want to\nuse it. You should call #checkin …\n"],["class_name","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-class_name","()","<p>Returns the class name for the macro.\n<p><code>composed_of :balance, :class_name =&gt; 'Money'</code> returns\n<code>'Money'</code> ...\n"],["class_of_active_record_descendant","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-class_of_active_record_descendant","(klass)","<p>Returns the class descending directly from ActiveRecord::Base or an\nabstract class, if any, in the inheritance …\n"],["clear","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-clear","()",""],["clear!","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear-21","()","<p>Clears out internal caches\n"],["clear_active_connections!","ActiveRecord::Base","ActiveRecord/Base.html#method-c-clear_active_connections-21","()",""],["clear_active_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_active_connections-21","()","<p>Returns any connections in use by the current thread back to the pool.\n"],["clear_all_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_all_connections-21","()",""],["clear_cache!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-clear_cache-21","()","<p>Clear any caching the database adapter may be doing, for example clearing\nthe prepared statement cache. …\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_cache-21","()",""],["clear_cache!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-clear_query_cache","()","<p>Clears the query cache.\n<p>One reason you may wish to call this method explicitly is between queries\nthat …\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_stale_cached_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_stale_cached_connections-21","()","<p>Return any checked-out connections back to the pool by threads that are no\nlonger alive.\n"],["clear_table_cache!","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear_table_cache-21","(table_name)","<p>Clear out internal caches for table with <code>table_name</code>.\n"],["client_encoding","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-client_encoding","()","<p>Get the client encoding for this database\n"],["client_min_messages","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-client_min_messages","()","<p>Returns the current client message level.\n"],["client_min_messages=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-client_min_messages-3D","(level)","<p>Set the client message level.\n"],["close","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-close","()","<p>Check the connection back in to the connection pool\n"],["collation","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-collation","()","<p>Returns the database collation strategy.\n"],["column","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-column","(column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["column","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column","(name, type, options = {})","<p>Instantiates a new column for the table. The <code>type</code> parameter is\nnormally one of the migrations native …\n"],["column_defaults","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_defaults","()","<p>Returns a hash where the keys are column names and the values are default\nvalues when instantiating the …\n"],["column_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-column_exists-3F","(table_name, column_name, type = nil, options = {})","<p>Checks to see if a column exists in a given table.\n<p>Examples\n\n<pre># Check a column exists\ncolumn_exists?(:suppliers, ...</pre>\n"],["column_exists?","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-column_exists-3F","(column_name, type = nil, options = {})","<p>Checks to see if a column exists. See SchemaStatements#column_exists?\n"],["column_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-column_name_length","()","<p>Returns the maximum length of a column name.\n"],["column_names","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_names","()","<p>Returns an array of column names as strings.\n"],["columns","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-columns","()",""],["columns","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-columns","(table_name, name = nil)","<p>Returns the list of all column definitions for a table.\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns","(table_name, name = nil)","<p>Returns an array of Column objects for the table specified by\n<code>table_name</code>. See the concrete implementation …\n"],["columns","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns","()","<p>Returns an array of column objects for the table associated with this\nclass.\n"],["columns_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns_for_remove","(table_name, *column_names)",""],["columns_hash","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-columns_hash","()",""],["columns_hash","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns_hash","()","<p>Returns a hash of column objects for the table associated with this class.\n"],["columns_per_multicolumn_index","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_multicolumn_index","()","<p>Returns the maximum number of columns in a multicolumn index.\n"],["columns_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_table","()","<p>Returns the maximum number of columns per table.\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits the transaction (and turns on auto-committing).\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-commit_db_transaction","()","<p>Commits a transaction.\n"],["commit_transaction_records","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_transaction_records","()","<p>Send a commit message to all records after they have been committed.\n"],["composed_of","ActiveRecord::Aggregations::ClassMethods","ActiveRecord/Aggregations/ClassMethods.html#method-i-composed_of","(part_id, options = {})","<p>Adds reader and writer methods for manipulating a value object:\n<code>composed_of :address</code> adds <code>address</code> and …\n"],["compute_type","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-compute_type","(type_name)","<p>Returns the class type of the record using the current module as a prefix.\nSo descendants of MyApp::Business::Account …\n"],["configurations","ActiveRecord::Base","ActiveRecord/Base.html#method-c-configurations","","<p>Contains the database configuration - as is typically stored in\nconfig/database.yml - as a Hash.\n<p>For example, …\n"],["connected?","ActiveRecord::Base","ActiveRecord/Base.html#method-c-connected-3F","()","<p>Returns true if Active Record is connected.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connected-3F","(klass)","<p>Returns true if a connection that’s accessible to this class has already\nbeen opened.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connected-3F","()","<p>Returns true if a connection has already been opened.\n"],["connection","ActiveRecord::Base","ActiveRecord/Base.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::Base","ActiveRecord/Base.html#method-c-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection","()","<p>Retrieve the connection associated with the current thread, or call\n#checkout to obtain one if necessary. …\n"],["connection","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-connection","()",""],["connection","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-connection","()",""],["connection_config","ActiveRecord::Base","ActiveRecord/Base.html#method-c-connection_config","()","<p>Returns the configuration of the associated connection as a hash:\n\n<pre>ActiveRecord::Base.connection_config ...</pre>\n"],["connection_handler","ActiveRecord::Base","ActiveRecord/Base.html#method-c-connection_handler","","<p>The connection handler\n"],["connection_id","ActiveRecord::Base","ActiveRecord/Base.html#method-c-connection_id","()",""],["connection_id=","ActiveRecord::Base","ActiveRecord/Base.html#method-c-connection_id-3D","(connection_id)",""],["connection_pool","ActiveRecord::Base","ActiveRecord/Base.html#method-c-connection_pool","()",""],["connection_pool","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-connection_pool","()",""],["construct_join_dependency_for_association_find","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-construct_join_dependency_for_association_find","()",""],["construct_limited_ids_condition","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-construct_limited_ids_condition","(relation)",""],["construct_relation_for_association_calculations","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_calculations","()",""],["construct_relation_for_association_find","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_find","(join_dependency)",""],["content_columns","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-content_columns","()","<p>Returns an array of column objects where the primary id, all columns ending\nin “_id” or “_count”, …\n"],["copy","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-copy","(destination, sources, options = {})",""],["count","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-count","(column_name = nil, options = {})","<p>Count operates using three different approaches.\n<p>Count all: By not passing any parameters to count, it …\n"],["count_by_sql","ActiveRecord::Querying","ActiveRecord/Querying.html#method-i-count_by_sql","(sql)","<p>Returns the result of an SQL statement that should only include a COUNT(*)\nin the SELECT part. The use …\n"],["create","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-create","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["create","ActiveRecord::Persistence::ClassMethods","ActiveRecord/Persistence/ClassMethods.html#method-i-create","(attributes = nil, options = {}, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["create","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-create","(*args, &block)",""],["create!","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-create-21","(*args, &block)",""],["create!","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-create-21","(attributes = nil, options = {}, &block)","<p>Creates an object just like Base.create but calls <code>save!</code>\ninstead of <code>save</code> so an exception is raised if …\n"],["create_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new MySQL database with optional <code>:charset</code> and\n<code>:collation</code>. Charset defaults to utf8.\n<p>Example: …\n"],["create_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new PostgreSQL database. Options include <code>:owner</code>,\n<code>:template</code>, <code>:encoding</code>, <code>:tablespace</code>,\nand <code>:connection_limit</code> …\n"],["create_fixtures","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-create_fixtures","(fixtures_directory, table_names, class_names = {})",""],["create_migration_file","ActiveRecord::Generators::MigrationGenerator","ActiveRecord/Generators/MigrationGenerator.html#method-i-create_migration_file","()",""],["create_migration_file","ActiveRecord::Generators::ModelGenerator","ActiveRecord/Generators/ModelGenerator.html#method-i-create_migration_file","()",""],["create_migration_file","ActiveRecord::Generators::SessionMigrationGenerator","ActiveRecord/Generators/SessionMigrationGenerator.html#method-i-create_migration_file","()",""],["create_model_file","ActiveRecord::Generators::ModelGenerator","ActiveRecord/Generators/ModelGenerator.html#method-i-create_model_file","()",""],["create_module_file","ActiveRecord::Generators::ModelGenerator","ActiveRecord/Generators/ModelGenerator.html#method-i-create_module_file","()",""],["create_observer_file","ActiveRecord::Generators::ObserverGenerator","ActiveRecord/Generators/ObserverGenerator.html#method-i-create_observer_file","()",""],["create_reflection","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-create_reflection","(macro, name, options, active_record)",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-create_savepoint","()",""],["create_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table","(table_name, options = {})","<p>Creates a new table with the name <code>table_name</code>.\n<code>table_name</code> may either be a String or a Symbol.\n<p>There are …\n"],["create_with","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-create_with","(value)",""],["creator?","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-i-creator-3F","()",""],["current_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-current_database","()",""],["current_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-current_database","()","<p>Returns the current database name.\n"],["current_savepoint_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-current_savepoint_name","()",""],["current_schema","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-current_schema","()","<p>Returns the current schema name.\n"],["dangerous_attribute_method?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-dangerous_attribute_method-3F","(name)","<p>A method name is ‘dangerous’ if it is already defined by Active Record, but\nnot by any ancestors. (So …\n"],["dangerous_attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-dangerous_attribute_method-3F","(method_name)",""],["data","ActiveRecord::SessionStore::Session","ActiveRecord/SessionStore/Session.html#method-i-data","()","<p>Lazy-unmarshal session state.\n"],["data","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-i-data","()","<p>Lazy-unmarshal session state.\n"],["data_column","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-data_column","","<p>The data field defaults to ‘data’.\n"],["data_column_name","ActiveRecord::SessionStore::Session","ActiveRecord/SessionStore/Session.html#method-c-data_column_name","","<p>Customizable data column name. Defaults to ‘data’.\n"],["data_column_name","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-data_column_name","",""],["data_column_size_limit","ActiveRecord::SessionStore::Session","ActiveRecord/SessionStore/Session.html#method-c-data_column_size_limit","()",""],["decrement","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-decrement","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and\nsubtracts the value passed as <code>by</code> (default is 1). The decrement\n…\n"],["decrement!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-decrement-21","(attribute, by = 1)","<p>Wrapper around <code>decrement</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["decrement_counter","ActiveRecord::CounterCache","ActiveRecord/CounterCache.html#method-i-decrement_counter","(counter_name, id)","<p>Decrement a number field by one, usually representing a count.\n<p>This works the same as increment_counter …\n"],["decrement_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-decrement_open_transactions","()",""],["default_primary_key_type","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-default_primary_key_type","()",""],["default_scope","ActiveRecord::Scoping::Default::ClassMethods","ActiveRecord/Scoping/Default/ClassMethods.html#method-i-default_scope","(scope = {})","<p>Use this macro in your model to set a default scope for all operations on\nthe model.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Article</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default_sequence_name","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-default_sequence_name","(table, column)",""],["default_timezone","ActiveRecord::Base","ActiveRecord/Base.html#method-c-default_timezone","","<p>Determines whether to use Time.local (using :local) or Time.utc (using\n:utc) when pulling dates and times …\n"],["define","ActiveRecord::Schema","ActiveRecord/Schema.html#method-c-define","(info={}, &block)","<p>Eval the given block. All methods available to the current connection\nadapter are available within the …\n"],["define_attribute_methods","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","()","<p>Generates all the attribute related methods for columns in the database\naccessors, mutators and query …\n"],["define_callbacks","ActiveRecord::Observer","ActiveRecord/Observer.html#method-i-define_callbacks","(klass)",""],["define_method__attribute","ActiveRecord::AttributeMethods::DeprecatedUnderscoreRead::ClassMethods","ActiveRecord/AttributeMethods/DeprecatedUnderscoreRead/ClassMethods.html#method-i-define_method__attribute","(attr_name)",""],["define_method_attribute","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-define_method_attribute","(attr_name)",""],["define_method_attribute","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-define_method_attribute","(attr_name)","<p>We want to generate the methods via module_eval rather than define_method,\nbecause define_method is slower …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-define_method_attribute-3D","(attr_name)","<p>Defined for all <code>datetime</code> and <code>timestamp</code> attributes\nwhen <code>time_zone_aware_attributes</code> are enabled. This enhanced …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::Write::ClassMethods","ActiveRecord/AttributeMethods/Write/ClassMethods.html#method-i-define_method_attribute-3D","(attr_name)",""],["delegate_to_scoped_klass","ActiveRecord::Delegation","ActiveRecord/Delegation.html#method-c-delegate_to_scoped_klass","(method)",""],["delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete","(arel, name = nil, binds = [])","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-delete","(key)",""],["delete","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-delete","(sql_key)",""],["delete","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-delete","(key)",""],["delete","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-delete","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["delete","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-delete","(id_or_array)","<p>Deletes the row with a primary key matching the <code>id</code> argument,\nusing a SQL <code>DELETE</code> statement, and returns …\n"],["delete_all","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-delete_all","(conditions = nil)","<p>Deletes the records matching <code>conditions</code> without instantiating\nthe records first, and hence not calling …\n"],["delete_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete_sql","(sql, name = nil)","<p>Executes the delete statement and returns the number of rows affected.\n"],["descends_from_active_record?","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-descends_from_active_record-3F","()","<p>True if this isn’t a concrete subclass needing a STI type condition.\n"],["destroy","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroy","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-destroy","(id)","<p>Destroy an object (or multiple objects) that has the given id, the object\nis instantiated first, therefore …\n"],["destroy","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-i-destroy","()",""],["destroy_all","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-destroy_all","(conditions = nil)","<p>Destroys the records matching <code>conditions</code> by instantiating each\nrecord and calling its <code>destroy</code> method. …\n"],["destroyed?","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroyed-3F","()","<p>Returns true if this object has been destroyed, otherwise returns false.\n"],["dirties_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-dirties_query_cache","(base, *method_names)",""],["disable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-disable_query_cache-21","()",""],["disable_referential_integrity","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_referential_integrity","()","<p>Override to turn off referential integrity while executing\n<code>&amp;block</code>.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect-21","()","<p>Disconnects all connections in the pool, and clears the pool.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["distinct","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-distinct","(columns, order_by)","<p>SELECT DISTINCT clause for a given set of columns and a given ORDER BY\nclause. Both PostgreSQL and Oracle …\n"],["down","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-down","()",""],["drop_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_table","(table_name, options = {})","<p>Drops a table from the database.\n"],["each","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-each","()",""],["each","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-i-each","(&block)",""],["each","ActiveRecord::Fixtures::File","ActiveRecord/Fixtures/File.html#method-i-each","(&block)",""],["each","ActiveRecord::Result","ActiveRecord/Result.html#method-i-each","()",""],["eager_load","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-eager_load","(*args)",""],["eager_loading?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-eager_loading-3F","()",""],["empty?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-empty_insert_statement_value","()",""],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-empty_insert_statement_value","()",""],["emulate_booleans","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-emulate_booleans","","<p>By default, the MysqlAdapter will consider all columns of type\n<code>tinyint(1)</code> as boolean. If you wish to …\n"],["enable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-enable_query_cache-21","()",""],["enabled","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-enabled","()",""],["enabled=","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-enabled-3D","(flag)",""],["enabled?","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-enabled-3F","()",""],["encode_with","ActiveRecord::Base","ActiveRecord/Base.html#method-i-encode_with","(coder)","<p>Populate <code>coder</code> with attributes about this record that should\nbe serialized. The structure of <code>coder</code> defined …\n"],["encoding","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-encoding","()","<p>Returns the current database encoding format.\n"],["enlist_fixture_connections","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-enlist_fixture_connections","()",""],["eql?","ActiveRecord::Base","ActiveRecord/Base.html#method-i-eql-3F","(comparison_object)",""],["error_number","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-error_number","(exception)",""],["escape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-escape_bytea","(value)","<p>Escapes binary strings for bytea input to the database.\n"],["establish_connection","ActiveRecord::Base","ActiveRecord/Base.html#method-c-establish_connection","(spec = ENV[\"DATABASE_URL\"])","<p>Establishes the connection to the database. Accepts a hash as input where\nthe <code>:adapter</code> key must be specified …\n"],["establish_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-establish_connection","(name, spec)",""],["evaluate_default_scope","ActiveRecord::Scoping::Default::ClassMethods","ActiveRecord/Scoping/Default/ClassMethods.html#method-i-evaluate_default_scope","()","<p>The ignore_default_scope flag is used to prevent an infinite recursion\nsituation where a default scope …\n"],["except","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-except","(*skips)","<p>Removes from the query the condition(s) specified in <code>skips</code>.\n<p>Example:\n\n<pre>Post.order('id asc').except(:order) ...</pre>\n"],["exec_delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_delete","(sql, name, binds)","<p>Executes delete <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_delete","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_delete","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds)","<p>Executes insert <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_insert","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_insert","(sql, name, binds)",""],["exec_query","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [])","<p>Executes <code>sql</code> statement in the context of this connection using\n<code>binds</code> as the bind substitutes. <code>name</code> is …\n"],["exec_query","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-exec_query","(sql, name = nil, binds = [])",""],["exec_update","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_update","(sql, name, binds)","<p>Executes update <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_update","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_update","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_without_stmt","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_without_stmt","(sql, name = 'SQL', binds = [])",""],["execute","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-execute","(sql, name = nil)","<p>Executes an SQL statement, returning a PGresult object on success or\nraising a PGError exception otherwise. …\n"],["execute_and_free","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-execute_and_free","(sql, name = nil)",""],["exists?","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-exists-3F","(id = false)","<p>Returns true if a record exists in the table that matches the\n<code>id</code> or conditions given, or false otherwise. …\n"],["expand_hash_conditions_for_aggregates","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-expand_hash_conditions_for_aggregates","(attrs)","<p>Accepts a hash of SQL conditions and replaces those attributes that\ncorrespond to a <code>composed_of</code> relationship …\n"],["expire","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-expire","()",""],["explain","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-explain","(arel, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["explain","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-explain","(arel, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["explain","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-explain","(arel, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["explain","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-explain","()","<p>Runs EXPLAIN on the query or queries triggered by this relation and returns\nthe result as a string.  …\n"],["extended","ActiveRecord::Explain","ActiveRecord/Explain.html#method-c-extended","(base)",""],["extending","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-extending","(*modules)","<p>Used to extend a scope with additional methods, either through a module or\nthrough a block provided. …\n"],["extract_schema_and_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Utils","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Utils.html#method-i-extract_schema_and_table","(name)","<p>Returns an array of <code>[schema_name, table_name]</code> extracted from\n<code>name</code>. <code>schema_name</code> is nil if not specified …\n"],["find","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find","(*args)","<p>Find operates with four different retrieval approaches:\n<p>Find by id - This can either be a specific id …\n"],["find_by_attributes","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_by_attributes","(match, attributes, *args)",""],["find_by_session_id","ActiveRecord::SessionStore::Session","ActiveRecord/SessionStore/Session.html#method-c-find_by_session_id","(session_id)","<p>Hook to set up sessid compatibility.\n"],["find_by_session_id","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-find_by_session_id","(session_id)","<p>Look up a session by id and unmarshal its data if found.\n"],["find_by_sql","ActiveRecord::Querying","ActiveRecord/Querying.html#method-i-find_by_sql","(sql, binds = [])","<p>Executes a custom SQL query against your database and returns all the\nresults. The results will be returned …\n"],["find_each","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-find_each","(options = {})","<p>Yields each record that was found by the find <code>options</code>. The\nfind is performed by find_in_batches with …\n"],["find_first","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_first","()",""],["find_in_batches","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-find_in_batches","(options = {})","<p>Yields each batch of records that was found by the find\n<code>options</code> as an array. The size of each batch is …\n"],["find_last","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_last","()",""],["find_one","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_one","(id)",""],["find_or_instantiator_by_attributes","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_or_instantiator_by_attributes","(match, attributes, *args)",""],["find_some","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_some","(ids)",""],["find_with_associations","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_with_associations","()",""],["find_with_ids","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_with_ids","(*ids)",""],["finder?","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-i-finder-3F","()",""],["first","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-first","(*args)","<p>A convenience wrapper for <code>find(:first, *args)</code>. You can pass in\nall the same arguments to this method …\n"],["first!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-first-21","()","<p>Same as <code>first</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>first!</code> accepts …\n"],["first_or_create","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-first_or_create","(attributes = nil, options = {}, &block)","<p>Tries to load the first record; if it fails, then <code>create</code> is\ncalled with the same arguments as this method. …\n"],["first_or_create!","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-first_or_create-21","(attributes = nil, options = {}, &block)","<p>Like <code>first_or_create</code> but calls <code>create!</code> so an\nexception is raised if the created record is invalid.\n<p>Expects …\n"],["first_or_initialize","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-first_or_initialize","(attributes = nil, options = {}, &block)","<p>Like <code>first_or_create</code> but calls <code>new</code> instead of\n<code>create</code>.\n<p>Expects arguments in the same format as <code>Base.new</code> …\n"],["fixture_is_cached?","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-fixture_is_cached-3F","(connection, table_name)",""],["fixtures","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-fixtures","(*fixture_names)",""],["freeze","ActiveRecord::Base","ActiveRecord/Base.html#method-i-freeze","()","<p>Freeze the attributes hash such that associations are still accessible,\neven on destroyed records.\n"],["from","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-from","(value)",""],["frozen?","ActiveRecord::Base","ActiveRecord/Base.html#method-i-frozen-3F","()","<p>Returns <code>true</code> if the attributes hash has been frozen.\n"],["generated_external_attribute_methods","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-generated_external_attribute_methods","()","<p>We will define the methods as instance methods, but will call them as\nsingleton methods. This allows …\n"],["generated_feature_methods","ActiveRecord::Base","ActiveRecord/Base.html#method-c-generated_feature_methods","()",""],["get","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-get","(klass, primary_key)",""],["group","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-group","(*args)",""],["has_and_belongs_to_many","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many","(name, options = {}, &extension)","<p>Specifies a many-to-many relationship with another class. This associates\ntwo classes via an intermediate …\n"],["has_many","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-has_many","(name, options = {}, &extension)","<p>Specifies a one-to-many association. The following methods for retrieval\nand query of collections of …\n"],["has_one","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-has_one","(name, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if the other class …\n"],["hash","ActiveRecord::Base","ActiveRecord/Base.html#method-i-hash","()","<p>Delegates to id in order to allow two records of the same type and id to\nwork with something like:\n\n<pre>[ Person.find(1), ...</pre>\n"],["having","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-having","(opts, *rest)",""],["id","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id","()","<p>Returns the primary key value\n"],["id=","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3D","(value)","<p>Sets the primary key value\n"],["id?","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3F","()","<p>Queries the primary key value\n"],["identify","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-identify","(label)","<p>Returns a consistent, platform-independent identifier for\n<code>label</code>. Identifiers are positive integers less …\n"],["identity","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-identity","(event)",""],["in_clause_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-in_clause_length","()","<p>Returns the maximum number of elements in an IN (x,y,z) clause. nil means\nno limit.\n"],["included","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-included","(base)",""],["includes","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-includes","(*args)",""],["increment","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-increment","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the\nvalue passed as <code>by</code> (default is 1). The increment is …\n"],["increment!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-increment-21","(attribute, by = 1)","<p>Wrapper around <code>increment</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["increment_counter","ActiveRecord::CounterCache","ActiveRecord/CounterCache.html#method-i-increment_counter","(counter_name, id)","<p>Increment a number field by one, usually representing a count.\n<p>This is used for caching aggregate values, …\n"],["increment_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-increment_open_transactions","()",""],["index","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-index","(column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols. See SchemaStatements#add_index …\n"],["index_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_exists-3F","(table_name, column_name, options = {})","<p>Checks to see if an index exists on a table for a given index definition.\n<p>Examples\n\n<pre># Check an index exists ...</pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-index_exists-3F","(column_name, options = {})","<p>Checks to see if an index exists. See SchemaStatements#index_exists?\n"],["index_name_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name, default)","<p>Verify the existence of an index with a given name.\n<p>The default argument is returned if the underlying …\n"],["index_name_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_for_remove","(table_name, options = {})",""],["index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-index_name_length","()","<p>Returns the maximum length of an index name.\n"],["index_name_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_name_length","()",""],["indexes","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-indexes","(table_name, name = nil)","<p>Returns an array of indexes for the given table.\n"],["indexes_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-indexes_per_table","()","<p>Returns the maximum number of indexes per table.\n"],["inheritance_column","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column","()","<p>The name of the column containing the object’s class when Single Table\nInheritance is used\n"],["inheritance_column=","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column-3D","(value)","<p>Sets the value of inheritance_column\n"],["init_with","ActiveRecord::Base","ActiveRecord/Base.html#method-i-init_with","(coder)","<p>Initialize an empty model object from <code>coder</code>.\n<code>coder</code> must contain the attributes necessary for initializing …\n"],["initialize_copy","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-initialize_copy","(other)",""],["initialize_dup","ActiveRecord::Base","ActiveRecord/Base.html#method-i-initialize_dup","(other)","<p>Duped objects have no id assigned and are treated as new records. Note that\nthis is a “shallow” …\n"],["initialize_dup","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-initialize_dup","(other)",""],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-initialize_schema_migrations_table","()","<p>Should not be called normally, but this operation is non-destructive. The\nmigrations module handles this …\n"],["insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert","(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])","<p>Returns the last auto-generated ID from the affected table.\n<p><code>id_value</code> will be returned unless the value ...\n"],["insert","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-insert","(values)",""],["insert_fixture","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_fixture","(fixture, table_name)","<p>Inserts the given fixture into the table. Overridden in adapters that\nrequire something beyond a simple …\n"],["insert_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Returns the last auto-generated ID from the affected table.\n"],["insert_sql","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["insert_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Executes an INSERT query and returns the new record’s ID\n"],["inspect","ActiveRecord::Base","ActiveRecord/Base.html#method-i-inspect","()","<p>Returns the contents of the record as a nicely formatted string.\n"],["inspect","ActiveRecord::Base","ActiveRecord/Base.html#method-c-inspect","()","<p>Returns a string like ‘Post(id:integer, title:string, body:text)’\n"],["inspect","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-inspect","()",""],["instance_method_already_implemented?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)",""],["instantiate","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-instantiate","(record)","<p>Finder methods must instantiate through this method to work with the\nsingle-table inheritance model that …\n"],["instantiate_all_loaded_fixtures","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-instantiate_all_loaded_fixtures","(object, load_instances = true)",""],["instantiate_fixtures","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-instantiate_fixtures","(object, fixture_name, fixtures, load_instances = true)",""],["instantiator?","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-i-instantiator-3F","()",""],["inverse","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-inverse","()","<p>Returns a list that represents commands that are the inverse of the\ncommands stored in <code>commands</code>. For …\n"],["joined_includes_values","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-joined_includes_values","()","<p>Joins that are also marked for preloading. In which case we should just\neager load them. Note that this …\n"],["joins","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-joins","(*args)",""],["joins_per_query","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-joins_per_query","()","<p>Returns maximum number of joins in a single query.\n"],["key?","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-key-3F","(key)",""],["klass","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-klass","()","<p>Returns the class for the macro.\n<p><code>composed_of :balance, :class_name =&gt; 'Money'</code> returns the\nMoney class ...\n"],["last","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-last","(*args)","<p>A convenience wrapper for <code>find(:last, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["last!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-last-21","()","<p>Same as <code>last</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>last!</code> accepts no …\n"],["last_inserted_id","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-last_inserted_id","(result)",""],["lease","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-lease","()",""],["length","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-length","()",""],["limit","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-limit","(value)",""],["limited_update_conditions","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["limited_update_conditions","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["loaded?","ActiveRecord::SessionStore::Session","ActiveRecord/SessionStore/Session.html#method-i-loaded-3F","()","<p>Has the session been loaded yet?\n"],["loaded?","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-i-loaded-3F","()",""],["lock","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-lock","(locks = true)",""],["lock!","ActiveRecord::Locking::Pessimistic","ActiveRecord/Locking/Pessimistic.html#method-i-lock-21","(lock = true)","<p>Obtain a row lock on this record. Reloads the record to obtain the\nrequested lock. Pass an SQL locking …\n"],["locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column","()","<p>The version column used for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_column=","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column-3D","(value)",""],["locking_enabled?","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_enabled-3F","()","<p>Returns true if the <code>lock_optimistically</code> flag is set to true\n(which it is, by default) and the table includes …\n"],["log","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log","(sql, name = \"SQL\", binds = [])",""],["log_process_action","ActiveRecord::Railties::ControllerRuntime::ClassMethods","ActiveRecord/Railties/ControllerRuntime/ClassMethods.html#method-i-log_process_action","(payload)",""],["logger","ActiveRecord::Base","ActiveRecord/Base.html#method-c-logger","","<p>Accepts a logger conforming to the interface of Log4r or the default Ruby\n1.8+ Logger class, which is …\n"],["logger","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-logger","()",""],["many?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-many-3F","()",""],["mark_for_destruction","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction","()","<p>Marks this record to be destroyed as part of the parents save transaction.\nThis does <em>not</em> actually destroy …\n"],["marked_for_destruction?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-marked_for_destruction-3F","()","<p>Returns whether or not this record will be destroyed as part of the parents\nsave transaction.\n<p>Only useful …\n"],["mass_assignment_options","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-mass_assignment_options","()",""],["mass_assignment_role","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-mass_assignment_role","()",""],["match","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-c-match","(method)",""],["match","ActiveRecord::DynamicScopeMatch","ActiveRecord/DynamicScopeMatch.html#method-c-match","(method)",""],["maximum","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-maximum","(column_name, options = {})","<p>Calculates the maximum value on a given column. The value is returned with\nthe same data type of the …\n"],["merge","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-merge","(r)",""],["message","ActiveRecord::StaleObjectError","ActiveRecord/StaleObjectError.html#method-i-message","()",""],["message","ActiveRecord::UnknownPrimaryKey","ActiveRecord/UnknownPrimaryKey.html#method-i-message","()",""],["method_defined_within?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-method_defined_within-3F","(name, klass, sup = klass.superclass)",""],["method_missing","ActiveRecord::Delegation","ActiveRecord/Delegation.html#method-i-method_missing","(method, *args, &block)",""],["method_missing","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-method_missing","(method, *arguments, &block)",""],["migrate","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-migrate","(direction)","<p>Execute this migration in the named direction\n"],["migrate","ActiveRecord::Migration","ActiveRecord/Migration.html#method-c-migrate","(direction)",""],["migrations_paths","ActiveRecord::Schema","ActiveRecord/Schema.html#method-i-migrations_paths","()",""],["minimum","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-minimum","(column_name, options = {})","<p>Calculates the minimum value on a given column. The value is returned with\nthe same data type of the …\n"],["mysql2_connection","ActiveRecord::Base","ActiveRecord/Base.html#method-c-mysql2_connection","(config)","<p>Establishes a connection to the database that’s used by all Active Record\nobjects.\n"],["native_database_types","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-native_database_types","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-native_database_types","()","<p>Returns a Hash of mappings from the abstract data types to the native\ndatabase types. See TableDefinition#column …\n"],["new","ActiveRecord::AttributeAssignmentError","ActiveRecord/AttributeAssignmentError.html#method-c-new","(message, exception, attribute)",""],["new","ActiveRecord::Base","ActiveRecord/Base.html#method-c-new","(attributes = nil, options = {})","<p>New objects can be instantiated as either empty (pass no construction\nparameter) or pre-set with attributes …\n"],["new","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)","<p>FIXME: Make the first parameter more similar for the two adapters\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-c-new","(pools = {})",""],["new","ActiveRecord::ConnectionAdapters::ConnectionManagement","ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-c-new","(app)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-c-new","(spec)","<p>Creates a new ConnectionPool object. <code>spec</code> is a\nConnectionSpecification object which describes database …\n"],["new","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-c-new","(connection, max = 1000)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new","(connection, logger, connection_parameters, config)","<p>Initializes and connects a PostgreSQL adapter.\n"],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-c-new","(connection, logger, config)",""],["new","ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLiteAdapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version","ActiveRecord/ConnectionAdapters/SQLiteAdapter/Version.html#method-c-new","(version_string)",""],["new","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-c-new","(conn)",""],["new","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-c-new","(connection, max = 1000)",""],["new","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-c-new","(table_name, base)",""],["new","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-c-new","(base)",""],["new","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-c-new","(finder, instantiator, bang, attribute_names)",""],["new","ActiveRecord::DynamicScopeMatch","ActiveRecord/DynamicScopeMatch.html#method-c-new","(scope, attribute_names)",""],["new","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-new","(connection, table_name, class_name, fixture_path)",""],["new","ActiveRecord::Fixtures::File","ActiveRecord/Fixtures/File.html#method-c-new","(file)",""],["new","ActiveRecord::IdentityMap::Middleware","ActiveRecord/IdentityMap/Middleware.html#method-c-new","(app)",""],["new","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-new","()",""],["new","ActiveRecord::Migration","ActiveRecord/Migration.html#method-c-new","()",""],["new","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-c-new","(delegate = nil)",""],["new","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-c-new","(name, version, filename, scope)",""],["new","ActiveRecord::MultiparameterAssignmentErrors","ActiveRecord/MultiparameterAssignmentErrors.html#method-c-new","(errors)",""],["new","ActiveRecord::QueryCache","ActiveRecord/QueryCache.html#method-c-new","(app)",""],["new","ActiveRecord::RecordInvalid","ActiveRecord/RecordInvalid.html#method-c-new","(record)",""],["new","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-c-new","(macro, name, options, active_record)",""],["new","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-new","(*args, &block)",""],["new","ActiveRecord::Relation","ActiveRecord/Relation.html#method-c-new","(klass, table)",""],["new","ActiveRecord::Result","ActiveRecord/Result.html#method-c-new","(columns, rows)",""],["new","ActiveRecord::SessionStore::Session","ActiveRecord/SessionStore/Session.html#method-c-new","(attributes = nil, options = {})",""],["new","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-new","(attributes)","<p>Look for normal and marshaled data, self.find_by_session_id’s way of\ntelling us to postpone unmarshaling …\n"],["new","ActiveRecord::StaleObjectError","ActiveRecord/StaleObjectError.html#method-c-new","(record, attempted_action)",""],["new","ActiveRecord::UnknownPrimaryKey","ActiveRecord/UnknownPrimaryKey.html#method-c-new","(model)",""],["new","ActiveRecord::Validations::UniquenessValidator","ActiveRecord/Validations/UniquenessValidator.html#method-c-new","(options)",""],["new","ActiveRecord::WrappedDatabaseException","ActiveRecord/WrappedDatabaseException.html#method-c-new","(message, original_exception)",""],["new","ArJdbcMySQL::Error","ArJdbcMySQL/Error.html#method-c-new","(msg)",""],["new_record?","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-new_record-3F","()","<p>Returns true if this object hasn’t been saved yet – that is, a record for\nthe object doesn’t exist in …\n"],["next_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-next_key","()",""],["next_migration_number","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-next_migration_number","(number)",""],["observed_classes","ActiveRecord::Observer","ActiveRecord/Observer.html#method-i-observed_classes","()",""],["odd?","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-odd-3F","()",""],["offset","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-offset","(value)",""],["only","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-only","(*onlies)","<p>Removes any condition from the query other than the one(s) specified in\n<code>onlies</code>.\n<p>Example:\n\n<pre>Post.order('id ...</pre>\n"],["open","ActiveRecord::Fixtures::File","ActiveRecord/Fixtures/File.html#method-c-open","(file)","<p>Open a fixture file named <code>file</code>.  When called with a block, the\nblock is called with the filehandle and …\n"],["options_include_default?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-options_include_default-3F","(options)",""],["order","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-order","(*args)",""],["outside_transaction?","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-outside_transaction-3F","()","<p>Checks whether there is currently no transaction active. This is done by\nquerying the database driver, …\n"],["outside_transaction?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-outside_transaction-3F","()",""],["parent_class_name","ActiveRecord::Generators::ModelGenerator","ActiveRecord/Generators/ModelGenerator.html#method-i-parent_class_name","()",""],["perform_validations","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-perform_validations","(options={})",""],["persisted?","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-persisted-3F","()","<p>Returns if the record is persisted, i.e. it’s not a new record and it was\nnot destroyed.\n"],["pk_and_sequence_for","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-pk_and_sequence_for","(table)","<p>Returns a table’s primary key and belonging sequence.\n"],["pluck","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-pluck","(column_name)","<p>This method is designed to perform select by a single column as direct SQL\nquery Returns <code>Array</code> with values …\n"],["populate_with_current_scope_attributes","ActiveRecord::Scoping","ActiveRecord/Scoping.html#method-i-populate_with_current_scope_attributes","()",""],["postgresql_version","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-postgresql_version","()","<p>Returns the version of the connected PostgreSQL server.\n"],["prefetch_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prefetch_primary_key-3F","(table_name = nil)","<p>Should primary key values be selected from their corresponding sequence\nbefore the insert statement? …\n"],["preload","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-preload","(*args)",""],["primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key","()","<p>Defines the primary key field – can be overridden in subclasses.\nOverwriting will negate any effect …\n"],["primary_key","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-primary_key","(table)","<p>Returns just a table’s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-primary_key","(table)","<p>Returns just a table’s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-primary_key","(name)","<p>Appends a primary key definition to the table definition. Can be called\nmultiple times, but this is probably …\n"],["primary_key=","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key-3D","(value)","<p>Sets the name of the primary key column.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Project</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">primary_key</span> = <span class=\"ruby-string\">&quot;sysid&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["primary_keys","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-primary_keys","()",""],["query_attribute","ActiveRecord::AttributeMethods::Query","ActiveRecord/AttributeMethods/Query.html#method-i-query_attribute","(attr_name)",""],["quote","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quote","(value, column = nil)","<p>QUOTING ==================================================\n"],["quote","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote","(value, column = nil)","<p>Quotes the column value to help prevent SQL injection attacks.\n"],["quote_column_name","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_column_name","(column_name)","<p>Quotes the column name. Defaults to no quoting.\n"],["quote_string","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quote_string","(string)","<p>QUOTING ==================================================\n"],["quote_string","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_string","(s)","<p>Quotes a string, escaping any ‘ (single quote) and \\ (backslash)\ncharacters.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-quote_table_name","(name)","<p>Override to return the quoted table name. Defaults to column quoting.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-quote_table_name","(name)","<p>Checks the following cases:\n<p>table_name\n<p>“table.name”\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name","(table_name)","<p>Quotes the table name. Defaults to column name quoting.\n"],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_columns_for_index","(column_names, options = {})",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-quoted_columns_for_index","(column_names, options = {})","<p>Overridden by the mysql adapter for supporting index lengths\n"],["quoted_date","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_date","(value)",""],["quoted_false","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_false","()",""],["quoted_false","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_false","()",""],["quoted_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-quoted_locking_column","()","<p>Quote the column name used for optimistic locking.\n"],["quoted_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-quoted_primary_key","()","<p>Returns a quoted version of the primary key name, used to construct SQL\nstatements.\n"],["quoted_table_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-quoted_table_name","()","<p>Returns a quoted version of the table name, used to construct SQL\nstatements.\n"],["quoted_true","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_true","()",""],["quoted_true","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_true","()",""],["raw_connection","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-raw_connection","()","<p>Provides access to the underlying database driver for this adapter. For\nexample, this method returns …\n"],["raw_write_attribute","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-raw_write_attribute","(attr_name, value)",""],["read_attribute","ActiveRecord::AttributeMethods::Read","ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["read_attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-read_attribute_before_type_cast","(attr_name)",""],["read_attribute_before_type_cast","ActiveRecord::AttributeMethods::Serialization","ActiveRecord/AttributeMethods/Serialization.html#method-i-read_attribute_before_type_cast","(attr_name)",""],["readonly","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-readonly","(value = true)",""],["readonly!","ActiveRecord::Base","ActiveRecord/Base.html#method-i-readonly-21","()","<p>Marks this record as read only.\n"],["readonly?","ActiveRecord::Base","ActiveRecord/Base.html#method-i-readonly-3F","()","<p>Returns <code>true</code> if the record is read only. Records loaded\nthrough joins with piggy-back attributes will …\n"],["readonly_attributes","ActiveRecord::ReadonlyAttributes::ClassMethods","ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-readonly_attributes","()","<p>Returns an array of all the attributes that have been specified as\nreadonly.\n"],["reconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reconnect-21","()","<p>Disconnects from the database if already connected, and establishes a new\nconnection with the database. …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reconnect-21","()","<p>Close then reopen the connection.\n"],["record","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-record","(*command)","<p>record <code>command</code>. <code>command</code> should be a method name\nand arguments. For example:\n\n<pre>recorder.record(:method_name, ...</pre>\n"],["recreate_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-recreate_database","(name, options = {})","<p>Drops the database specified on the <code>name</code> attribute and creates\nit again using the provided <code>options</code>.\n"],["references","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-references","(*args)","<p>Adds a reference. Optionally adds a <code>type</code> column, if\n<code>:polymorphic</code> option is provided. <code>references</code> and \n…\n"],["references","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references","(*args)",""],["reflect_on_aggregation","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_aggregation","(aggregation)","<p>Returns the AggregateReflection object for the named\n<code>aggregation</code> (use the symbol).\n\n<pre>Account.reflect_on_aggregation(:balance) ...</pre>\n"],["reflect_on_all_aggregations","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_aggregations","()","<p>Returns an array of AggregateReflection objects for all the aggregations in\nthe class.\n"],["reflect_on_all_associations","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_associations","(macro = nil)","<p>Returns an array of AssociationReflection objects for all the associations\nin the class. If you only …\n"],["reflect_on_all_autosave_associations","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations","()","<p>Returns an array of AssociationReflection objects for all associations\nwhich have <code>:autosave</code> enabled. …\n"],["reflect_on_association","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_association","(association)","<p>Returns the AssociationReflection object for the <code>association</code>\n(use the symbol).\n\n<pre>Account.reflect_on_association(:owner) ...</pre>\n"],["reinit_with","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-i-reinit_with","(coder)","<p>Reinitialize an Identity Map model object from <code>coder</code>.\n<code>coder</code> must contain the attributes necessary for …\n"],["release_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release_connection","(with_id = current_connection_id)","<p>Signal that the thread is finished with the current connection.\n#release_connection releases the connection-thread …\n"],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-release_savepoint","()",""],["reload","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-reload","(options = nil)","<p>Reloads the attributes of the object as usual and clears\n<code>marked_for_destruction</code> flag.\n"],["reload","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-reload","(options = nil)","<p>Reloads the attributes of this object from the database. The optional\noptions argument is passed to find …\n"],["reload","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-reload","()",""],["remove","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove","(*column_names)","<p>Removes the column(s) from the table definition.\n<p>Examples\n\n<pre>t.remove(:qualification)\nt.remove(:qualification, ...</pre>\n"],["remove","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-remove","(record)",""],["remove_belongs_to","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_belongs_to","(*args)",""],["remove_by_id","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-remove_by_id","(symbolized_sti_name, id)",""],["remove_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_column","(table_name, *column_names)","<p>Removes the column(s) from the table definition.\n<p>Examples\n\n<pre>remove_column(:suppliers, :qualification)\nremove_columns(:suppliers, ...</pre>\n"],["remove_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_column_sql","(table_name, *column_names)",""],["remove_columns","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_columns","(table_name, *column_names)",""],["remove_connection","ActiveRecord::Base","ActiveRecord/Base.html#method-c-remove_connection","(klass = self)",""],["remove_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-remove_connection","(klass)","<p>Remove the connection for this class. This will close the active connection\nand the defined connection …\n"],["remove_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_index","(table_name, options = {})","<p>Remove the given index from the table.\n<p>Remove the index_accounts_on_column in the accounts table.\n\n<pre>remove_index ...</pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_index","(options = {})","<p>Removes the given index from the table.\n<p>Examples\n<p>Remove the index_table_name_on_column in the table_name …\n"],["remove_index_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_index_sql","(table_name, options = {})",""],["remove_references","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_references","(*args)","<p>Removes a reference. Optionally removes a <code>type</code> column.\n<code>remove_references</code> and <code>remove_belongs_to</code> are\nacceptable. …\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_timestamps","(table_name)","<p>Removes the timestamp columns (created_at and updated_at) from the table\ndefinition.\n<p>Examples\n\n<pre>remove_timestamps(:suppliers)</pre>\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_timestamps","()","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table.\n<p>Example\n\n<pre>t.remove_timestamps</pre>\n"],["remove_timestamps_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_timestamps_sql","(table_name)",""],["rename","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-rename","(column_name, new_column_name)","<p>Renames a column.\n<p>Example\n\n<pre>t.rename(:description, :name)</pre>\n"],["rename_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column in a table.\n"],["rename_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column.\n<p>Example\n\n<pre>rename_column(:suppliers, :description, :name)</pre>\n"],["rename_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_column_sql","(table_name, column_name, new_column_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_index","(table_name, old_name, new_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Rename an index.\n<p>Rename the index_people_on_last_name index to index_users_on_last_name\n\n<pre>rename_index :people, ...</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table('octopuses', 'octopi')</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rename_table","(name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table('octopuses', 'octopi')</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-rename_table","(name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table('octopuses', 'octopi')</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example\n\n<pre>rename_table('octopuses', 'octopi')</pre>\n"],["reorder","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-reorder","(*args)","<p>Replaces any existing order defined on the relation with the specified\norder.\n\n<pre>User.order('email DESC').reorder('id ...</pre>\n"],["repository","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-repository","()",""],["require_fixture_classes","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-require_fixture_classes","(fixture_names = nil)",""],["requires_reloading?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-requires_reloading-3F","()","<p>Returns true if its required to reload the connection between requests for\ndevelopment mode. This is …\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-requires_reloading-3F","()",""],["reset","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-reset","()",""],["reset!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reset-21","()","<p>Reset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related …\n"],["reset!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reset-21","()",""],["reset_cache","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-c-reset_cache","()",""],["reset_column_information","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-reset_column_information","()","<p>Resets all the cached information about columns, which will cause them to\nbe reloaded on the next request. …\n"],["reset_counters","ActiveRecord::CounterCache","ActiveRecord/CounterCache.html#method-i-reset_counters","(id, *counters)","<p>Resets one or more counter caches to their correct value using an SQL count\nquery. This is useful when …\n"],["reset_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-reset_locking_column","()","<p>Reset the column used for optimistic locking back to the\n<code>lock_version</code> default.\n"],["reset_runtime","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-reset_runtime","()",""],["reset_sequence!","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-reset_sequence-21","(table, column, sequence = nil)","<p>Set the sequence to the max value of the table’s column.\n"],["respond_to?","ActiveRecord::Delegation","ActiveRecord/Delegation.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","ActiveRecord::DynamicMatchers","ActiveRecord/DynamicMatchers.html#method-i-respond_to-3F","(method_id, include_private = false)",""],["retrieve_connection","ActiveRecord::Base","ActiveRecord/Base.html#method-c-retrieve_connection","()",""],["retrieve_connection_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-retrieve_connection_pool","(klass)",""],["reverse_order","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-reverse_order","()",""],["revert","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-revert","()",""],["reverting?","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-reverting-3F","()",""],["rollback_active_record_state!","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-rollback_active_record_state-21","()","<p>Reset id and @new_record if the transaction rolls back.\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Rolls back the transaction (and turns on auto-committing). Must be done if\nthe transaction block raises …\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rollback_db_transaction","()","<p>Aborts a transaction.\n"],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_transaction_records","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_transaction_records","(rollback)","<p>Send a rollback message to all records after they have been rolled back. If\nrollback is false, only rollback …\n"],["run_in_transaction?","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-run_in_transaction-3F","()",""],["runtime","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-runtime","()",""],["runtime=","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-runtime-3D","(value)",""],["sanitize_conditions","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_conditions","(condition, table_name = self.table_name)",""],["sanitize_limit","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sanitize_limit","(limit)","<p>Sanitizes the given LIMIT parameter in order to prevent SQL injection.\n<p>The <code>limit</code> may be anything that …\n"],["sanitize_sql","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql","(condition, table_name = self.table_name)",""],["sanitize_sql_array","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_array","(ary)","<p>Accepts an array of conditions. The array has each value sanitized and\ninterpolated into the SQL statement. …\n"],["sanitize_sql_for_assignment","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_assignment","(assignments)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_for_conditions","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_conditions","(condition, table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_hash","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash","(attrs, default_table_name = self.table_name)",""],["sanitize_sql_hash_for_assignment","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_assignment","(attrs)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET\nclause.\n\n<pre class=\"ruby\">{ :<span class=\"ruby-identifier\">status</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">nil</span>, :<span class=\"ruby-identifier\">group_id</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sanitize_sql_hash_for_conditions","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_conditions","(attrs, default_table_name = self.table_name)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a WHERE\nclause.\n\n<pre class=\"ruby\">{ :<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;foo'bar&quot;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["save","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-save","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-i-save","()",""],["save","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-save","(options={})","<p>The validation process on save can be skipped by passing <code>:validate\n=&gt; false</code>. The regular Base#save …\n"],["save!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-save-21","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save!","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-save-21","(options={})","<p>Attempts to save the record just like Base#save but will raise a\n<code>RecordInvalid</code> exception instead of returning …\n"],["save_method","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-i-save_method","()",""],["save_record?","ActiveRecord::DynamicFinderMatch","ActiveRecord/DynamicFinderMatch.html#method-i-save_record-3F","()",""],["say","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-say","(message, subitem=false)",""],["say_with_time","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-say_with_time","(message)",""],["schema_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_exists-3F","(name)","<p>Returns true if schema exists.\n"],["schema_format","ActiveRecord::Base","ActiveRecord/Base.html#method-c-schema_format","","<p>Specifies the format to use when dumping the database schema with Rails’\nRakefile. If :sql, the schema …\n"],["schema_search_path","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_search_path","()","<p>Returns the active schema search path.\n"],["schema_search_path=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_search_path-3D","(schema_csv)","<p>Sets the schema search path to a string of comma-separated schema names.\nNames beginning with $ have …\n"],["scope","ActiveRecord::Scoping::Named::ClassMethods","ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scope","(name, scope_options = {})","<p>Adds a class method for retrieving and querying objects. A scope represents\na narrowing of a database …\n"],["scope_for_create","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-scope_for_create","()",""],["scoped","ActiveRecord::Scoping::Named::ClassMethods","ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scoped","(options = nil)","<p>Returns an anonymous scope.\n\n<pre>posts = Post.scoped\nposts.size # Fires &quot;select count(*) from  posts&quot; and returns ...</pre>\n"],["scoping","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-scoping","()","<p>Scope all queries to the current scope.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Comment</span>.<span class=\"ruby-identifier\">where</span>(:<span class=\"ruby-identifier\">post_id</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">scoping</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-constant\">Comment</span>.<span class=\"ruby-identifier\">first</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["select","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select","(sql, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-select","(sql, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-select","(value = Proc.new)","<p>Works in two unique ways.\n<p>First: takes a block so it can be used just like Array#select.\n\n<pre>Model.scoped.select ...</pre>\n"],["select_all","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_all","(arel, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select_all","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-select_all","(arel, name = nil, binds = [])",""],["select_one","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_one","(arel, name = nil)","<p>Returns a record hash with the column names as keys and column values as\nvalues.\n"],["select_rows","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_rows","(sql, name = nil)","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-select_rows","(sql, name = nil)","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-select_rows","(sql, name = nil)","<p>DATABASE STATEMENTS ======================================\n"],["select_rows","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-select_rows","(sql, name = nil)","<p>Executes a SELECT query and returns an array of rows. Each row is an array\nof field values.\n"],["select_rows","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-select_rows","(sql, name = nil)",""],["select_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_value","(arel, name = nil)","<p>Returns a single value from a record\n"],["select_values","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_values","(arel, name = nil)","<p>Returns an array of the values of the first column in a select:\n\n<pre>select_values(&quot;SELECT id FROM companies ...</pre>\n"],["sequence_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name","()",""],["sequence_name=","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name-3D","(value)","<p>Sets the name of the sequence to use when generating ids to the given\nvalue, or (if the value is nil …\n"],["serial_sequence","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-serial_sequence","(table, column)",""],["serializable_hash","ActiveRecord::Serialization","ActiveRecord/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serialize","ActiveRecord::AttributeMethods::Serialization::Attribute","ActiveRecord/AttributeMethods/Serialization/Attribute.html#method-i-serialize","()",""],["serialize","ActiveRecord::AttributeMethods::Serialization::ClassMethods","ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialize","(attr_name, class_name = Object)","<p>If you have an attribute that needs to be saved to the database as an\nobject, and retrieved as the same …\n"],["serialized_value","ActiveRecord::AttributeMethods::Serialization::Attribute","ActiveRecord/AttributeMethods/Serialization/Attribute.html#method-i-serialized_value","()",""],["session_auth=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-session_auth-3D","(user)","<p>Set the authorized user for this session\n"],["session_id_column","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-session_id_column","","<p>The session id field defaults to ‘session_id’.\n"],["session_table_name","ActiveRecord::Generators::SessionMigrationGenerator","ActiveRecord/Generators/SessionMigrationGenerator.html#method-i-session_table_name","()",""],["set_fixture_class","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-set_fixture_class","(class_names = {})",""],["set_local_assigns!","ActiveRecord::Generators::MigrationGenerator","ActiveRecord/Generators/MigrationGenerator.html#method-i-set_local_assigns-21","()",""],["set_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-set_locking_column","(value = nil, &block)","<p>Set the column to use for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["set_standard_conforming_strings","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-set_standard_conforming_strings","()","<p>Enable standard-conforming strings if available.\n"],["setup","ActiveRecord::Validations::UniquenessValidator","ActiveRecord/Validations/UniquenessValidator.html#method-i-setup","(klass)","<p>Unfortunately, we have to tie Uniqueness validators to a class.\n"],["setup_fixture_accessors","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-setup_fixture_accessors","(fixture_names = nil)",""],["setup_fixtures","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-setup_fixtures","()",""],["show_variable","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-show_variable","(name)","<p>SHOW VARIABLES LIKE ‘name’\n"],["silence_auto_explain","ActiveRecord::Explain","ActiveRecord/Explain.html#method-i-silence_auto_explain","()","<p>Silences automatic EXPLAIN logging for the duration of the block.\n<p>This has high priority, no EXPLAINs …\n"],["size","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-i-size","()",""],["size","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-size","()","<p>Returns size of the records.\n"],["sql","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-sql","(event)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_query_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-sql_query_length","()","<p>Returns the maximum length of an SQL query.\n"],["sqlite_version","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-sqlite_version","()",""],["sti_name","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-sti_name","()",""],["store","ActiveRecord::Store::ClassMethods","ActiveRecord/Store/ClassMethods.html#method-i-store","(store_attribute, options = {})",""],["store_accessor","ActiveRecord::Store::ClassMethods","ActiveRecord/Store/ClassMethods.html#method-i-store_accessor","(store_attribute, *keys)",""],["structure_dump","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-structure_dump","()","<p>Returns a string of <code>CREATE TABLE</code> SQL statement(s) for\nrecreating the entire structure of the database. …\n"],["substitute_at","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-substitute_at","(column, index)","<p>Returns a bind substitution value given a <code>column</code> and list of\ncurrent <code>binds</code>\n"],["substitute_at","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-substitute_at","(column, index)",""],["sum","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-sum","(*args)","<p>Calculates the sum of values on a given column. The value is returned with\nthe same data type of the …\n"],["supports_add_column?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_add_column-3F","()","<p>Returns true if SQLite version is ‘3.1.6’ or greater, false otherwise.\n"],["supports_bulk_alter?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_bulk_alter-3F","()",""],["supports_count_distinct?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_count_distinct-3F","()","<p>Does this adapter support using DISTINCT within COUNT? This is\n<code>true</code> for all adapters except sqlite.\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Does this adapter support DDL rollbacks in transactions? That is, would\nCREATE TABLE or ALTER TABLE get …\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Returns true if SQLite version is ‘2.0.0’ or greater, false otherwise.\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_explain-3F","()","<p>Does this adapter support explain? As of this writing sqlite3, mysql2, and\npostgresql are the only ones …\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_explain-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_explain-3F","()","<p>Returns true.\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_explain-3F","()","<p>Returns true.\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Does this adapter support index sort order?\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Technically MySQL allows to create indexes with the sort order syntax but\nat the moment (5.5) it doesn’t …\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_insert_with_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_with_returning-3F","()",""],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_migrations-3F","()","<p>Does this adapter support migrations? Backend specific, as the abstract\nadapter always returns <code>false</code> …\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_primary_key-3F","()","<p>Can this adapter determine the primary key for tables not attached to an\nActive Record class, such as …\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_primary_key-3F","()",""],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_savepoints-3F","()","<p>Does this adapter support savepoints? PostgreSQL and MySQL do, SQLite &lt;\n3.6.8 does not.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_savepoints-3F","()","<p>Returns true, since this connection adapter supports savepoints.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_savepoints-3F","()","<p>Returns true, since this connection adapter supports savepoints.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_savepoints-3F","()","<p>Returns true if SQLite version is ‘3.6.8’ or greater, false otherwise.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code> when the connection adapter supports prepared\nstatement caching, otherwise returns <code>false</code> …\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code>, since this connection adapter supports prepared\nstatement caching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["suppress_messages","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-suppress_messages","()",""],["symbolized_base_class","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-symbolized_base_class","()",""],["symbolized_sti_name","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-symbolized_sti_name","()",""],["table_alias_for","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_alias_for","(table_name)","<p>Truncates a table alias according to the limits of the current adapter.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_alias_length","()","<p>Returns the maximum length of a table alias.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_alias_length","()","<p>Returns the configured supported identifier length supported by PostgreSQL\n"],["table_exists?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_exists-3F","(name)","<p>Returns true if table exists. If the schema is not specified as part of\n<code>name</code> then it will only find tables …\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-table_exists-3F","(name)","<p>A cached lookup for table existence.\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_exists-3F","(table_name)","<p>Checks to see if the table <code>table_name</code> exists on the database.\n<p>Example\n\n<pre>table_exists?(:developers)</pre>\n"],["table_exists?","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_exists-3F","()","<p>Indicates whether the table associated with this class exists\n"],["table_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name","()","<p>Guesses the table name (in forced lower-case) based on the name of the\nclass in the inheritance hierarchy …\n"],["table_name","ActiveRecord::SessionStore::SqlBypass","ActiveRecord/SessionStore/SqlBypass.html#method-c-table_name","","<p>The table name defaults to ‘sessions’.\n"],["table_name=","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name-3D","(value)","<p>Sets the table name explicitly. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Project</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">table_name</span> = <span class=\"ruby-string\">&quot;project&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["table_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_name_length","()","<p>Returns the maximum length of a table name.\n"],["table_rows","ActiveRecord::Fixtures","ActiveRecord/Fixtures.html#method-i-table_rows","()","<p>Return a hash of rows to be inserted. The key is the table, the value is a\nlist of rows to insert to …\n"],["table_structure","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-table_structure","(table_name)",""],["tables","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-tables","(name = nil)","<p>Returns the list of all tables in the schema search path or a specified\nschema.\n"],["teardown_fixtures","ActiveRecord::TestFixtures","ActiveRecord/TestFixtures.html#method-i-teardown_fixtures","()",""],["timestamped_migrations","ActiveRecord::Base","ActiveRecord/Base.html#method-c-timestamped_migrations","","<p>Specify whether or not to use timestamps for migration versions\n"],["timestamps","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-timestamps","()","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to the table. See SchemaStatements#add_timestamps …\n"],["timestamps","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-timestamps","(*args)","<p>Appends <code>:datetime</code> columns <code>:created_at</code> and\n<code>:updated_at</code> to the table.\n"],["to_a","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-to_a","()",""],["to_date","Mysql::Time","Mysql/Time.html#method-i-to_date","()","<p>This monkey patch is for test_additional_columns_from_join_table\n"],["to_hash","ActiveRecord::Result","ActiveRecord/Result.html#method-i-to_hash","()",""],["to_key","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-to_key","()","<p>Returns this record’s primary key value wrapped in an Array if one is\navailable\n"],["to_param","ActiveRecord::Integration","ActiveRecord/Integration.html#method-i-to_param","()","<p>Returns a String, which Action Pack uses for constructing an URL to this\nobject. The default implementation …\n"],["to_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-to_sql","(arel, binds = [])","<p>Converts an arel AST to SQL\n"],["to_sql","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-to_sql","()","<p>Returns a String whose contents are the column definitions concatenated\ntogether. This string can then …\n"],["to_sql","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-to_sql","()",""],["to_xml","ActiveRecord::Serialization","ActiveRecord/Serialization.html#method-i-to_xml","(options = {}, &block)","<p>Builds an XML document to represent the model. Some configuration is\navailable through <code>options</code>. However …\n"],["toggle","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-toggle","(attribute)","<p>Assigns to <code>attribute</code> the boolean opposite of\n<code>attribute?</code>. So if the predicate returns <code>true</code> the\nattribute …\n"],["toggle!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-toggle-21","(attribute)","<p>Wrapper around <code>toggle</code> that saves the record. This method\ndiffers from its non-bang version in that it …\n"],["touch","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-touch","(name = nil)","<p>Saves the record with the updated_at/on attributes set to the current time.\nPlease note that no validation …\n"],["transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction","(options = {})","<p>Runs the given block in a database transaction, and returns the result of\nthe block.\n<p>Nested transactions …\n"],["transaction","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction_joinable=","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-transaction_joinable-3D","(joinable)",""],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-translate_exception","(e, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-translate_exception","(exception, message)",""],["try_to_load_dependency","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-try_to_load_dependency","(file_name)",""],["tsvector","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-tsvector","(*args)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-type_cast","(value, column)","<p>QUOTING ==================================================\n"],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-type_cast","(value, column)",""],["type_cast","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-type_cast","(value, column)","<p>Cast a <code>value</code> to a type that the database understands. For\nexample, SQLite does not understand dates, …\n"],["type_cast_attribute_for_write","ActiveRecord::AttributeMethods::Serialization","ActiveRecord/AttributeMethods/Serialization.html#method-i-type_cast_attribute_for_write","(column, value)",""],["type_to_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to MySQL-specific data types.\n"],["type_to_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to PostgreSQL-specific data types.\n"],["uncached","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-uncached","()","<p>Disable the query cache within the block.\n"],["uncached","ActiveRecord::QueryCache::ClassMethods","ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached","(&block)","<p>Disable the query cache within the block if Active Record is configured.\n"],["undefine_attribute_methods","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods","()",""],["undefine_attribute_methods","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-undefine_attribute_methods","()",""],["unescape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-unescape_bytea","(value)","<p>Unescapes bytea output from a database to the binary string it represents.\nNOTE: This is NOT an inverse …\n"],["uniq","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-uniq","(value = true)","<p>Specifies whether the records should be unique or not. For example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">select</span>(:<span class=\"ruby-identifier\">name</span>)\n<span class=\"ruby-comment\"># =&gt; Might return ...</span>\n</pre>\n"],["unserialize","ActiveRecord::AttributeMethods::Serialization::Attribute","ActiveRecord/AttributeMethods/Serialization/Attribute.html#method-i-unserialize","()",""],["unserialized_value","ActiveRecord::AttributeMethods::Serialization::Attribute","ActiveRecord/AttributeMethods/Serialization/Attribute.html#method-i-unserialized_value","()",""],["up","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-up","()",""],["update","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update","(arel, name = nil, binds = [])","<p>Executes the update statement and returns the number of rows affected.\n"],["update","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-update","(id, attributes)","<p>Updates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["update_all","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-update_all","(updates, conditions = nil, options = {})","<p>Updates all records with details given if they match a set of conditions\nsupplied, limits and order can …\n"],["update_attribute","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and saves the record. This is especially useful\nfor boolean flags on existing …\n"],["update_attributes","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_attributes","(attributes, options = {})","<p>Updates the attributes of the model from the passed-in hash and saves the\nrecord, all wrapped in a transaction. …\n"],["update_attributes!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_attributes-21","(attributes, options = {})","<p>Updates its receiver just like <code>update_attributes</code> but calls\n<code>save!</code> instead of <code>save</code>, so an exception is …\n"],["update_column","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_column","(name, value)","<p>Updates a single attribute of an object, without calling save.\n<p>Validation is skipped.\n<p>Callbacks are skipped. …\n"],["update_counters","ActiveRecord::CounterCache","ActiveRecord/CounterCache.html#method-i-update_counters","(id, counters)","<p>A generic “counter updater” implementation, intended primarily to be used\nby increment_counter …\n"],["update_counters","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-update_counters","(id, counters)","<p>Make sure the lock version column gets updated when counters are updated.\n"],["update_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update_sql","(sql, name = nil)","<p>Executes the update statement and returns the number of rows affected.\n"],["update_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-update_sql","(sql, name = nil)","<p>Executes an UPDATE query and returns the number of affected tuples.\n"],["use","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-use","()",""],["uses_transaction","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction","(*methods)",""],["uses_transaction?","ActiveRecord::TestFixtures::ClassMethods","ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction-3F","(method)",""],["using_limitable_reflections?","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-using_limitable_reflections-3F","(reflections)",""],["valid?","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the validations within the specified context. Returns true if no\nerrors are found, false otherwise. …\n"],["valid_alter_table_options","ActiveRecord::ConnectionAdapters::SQLiteAdapter","ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#method-i-valid_alter_table_options","( type, options)","<p>See: www.sqlite.org/lang_altertable.html SQLite has an additional\nrestriction on the ALTER TABLE statement …\n"],["valid_scope_name?","ActiveRecord::Scoping::Named::ClassMethods","ActiveRecord/Scoping/Named/ClassMethods.html#method-i-valid_scope_name-3F","(name)",""],["validate_each","ActiveRecord::Validations::AssociatedValidator","ActiveRecord/Validations/AssociatedValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveRecord::Validations::UniquenessValidator","ActiveRecord/Validations/UniquenessValidator.html#method-i-validate_each","(record, attribute, value)",""],["validates_associated","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated","(*attr_names)","<p>Validates whether the associated object or objects are all valid\nthemselves. Works with any kind of association. …\n"],["validates_uniqueness_of","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of","(*attr_names)","<p>Validates whether the value of the specified attributes are unique across\nthe system. Useful for making …\n"],["verify!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-verify-21","(*ignored)","<p>Checks whether the connection to the database is still active (i.e. not\nstale). This is done under the …\n"],["where","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-where","(opts, *rest)",""],["where_values_hash","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-where_values_hash","()",""],["with_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_connection","()","<p>If a connection already exists yield it to the block. If no connection\nexists checkout a connection, …\n"],["with_exclusive_scope","ActiveRecord::Scoping::ClassMethods","ActiveRecord/Scoping/ClassMethods.html#method-i-with_exclusive_scope","(method_scoping = {}, &block)","<p>Works like with_scope, but discards any nested properties.\n"],["with_lock","ActiveRecord::Locking::Pessimistic","ActiveRecord/Locking/Pessimistic.html#method-i-with_lock","(lock = true)","<p>Wraps the passed block in a transaction, locking the object before\nyielding. You pass can the SQL locking …\n"],["with_scope","ActiveRecord::Scoping::ClassMethods","ActiveRecord/Scoping/ClassMethods.html#method-i-with_scope","(scope = {}, action = :merge, &block)","<p>with_scope lets you apply options to inner block incrementally. It takes a\nhash and the keys must be …\n"],["with_transaction_returning_status","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-with_transaction_returning_status","()","<p>Executes <code>method</code> within a transaction and captures its return\nvalue as a status flag. If the status is …\n"],["without","ActiveRecord::IdentityMap","ActiveRecord/IdentityMap.html#method-c-without","()",""],["write","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-write","(text=\"\")",""],["write_attribute","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. Empty strings for fixnum and …\n"],["xml","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-xml","(*args)",""],["xml","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-xml","(*args)",""],["README","","README_rdoc.html","","<p>Active Record – Object-relational mapping put on rails\n<p>Active Record connects classes to relational database …\n"]]}}