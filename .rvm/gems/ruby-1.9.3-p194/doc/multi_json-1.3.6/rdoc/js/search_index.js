var search_data = {"index":{"searchIndex":["multijson","adapters","jsoncommon","jsongem","jsonpure","nsjsonserialization","parseerror","oj","okjson","parseerror","yajl","decodeerror","okjson","error","utf8error","abbrev()","arrenc()","arrparse()","decode()","default_adapter()","dump()","dump()","eat()","encode()","falsetok()","hexdec4()","keyenc()","lex()","load()","load()","new()","nibble()","nulltok()","numenc()","numtok()","objenc()","objparse()","pairparse()","process_options()","strenc()","strtok()","subst()","surrogate?()","textparse()","tok()","truetok()","ucharcopy()","ucharenc()","unquote()","valenc()","valparse()"],"longSearchIndex":["multijson","multijson::adapters","multijson::adapters::jsoncommon","multijson::adapters::jsongem","multijson::adapters::jsonpure","multijson::adapters::nsjsonserialization","multijson::adapters::nsjsonserialization::parseerror","multijson::adapters::oj","multijson::adapters::okjson","multijson::adapters::okjson::parseerror","multijson::adapters::yajl","multijson::decodeerror","multijson::okjson","multijson::okjson::error","multijson::okjson::utf8error","multijson::okjson#abbrev()","multijson::okjson#arrenc()","multijson::okjson#arrparse()","multijson::okjson#decode()","multijson::default_adapter()","multijson::adapters::jsoncommon#dump()","multijson::adapters::nsjsonserialization::dump()","multijson::okjson#eat()","multijson::okjson#encode()","multijson::okjson#falsetok()","multijson::okjson#hexdec4()","multijson::okjson#keyenc()","multijson::okjson#lex()","multijson::adapters::jsoncommon#load()","multijson::adapters::nsjsonserialization::load()","multijson::decodeerror::new()","multijson::okjson#nibble()","multijson::okjson#nulltok()","multijson::okjson#numenc()","multijson::okjson#numtok()","multijson::okjson#objenc()","multijson::okjson#objparse()","multijson::okjson#pairparse()","multijson::adapters::jsoncommon#process_options()","multijson::okjson#strenc()","multijson::okjson#strtok()","multijson::okjson#subst()","multijson::okjson#surrogate?()","multijson::okjson#textparse()","multijson::okjson#tok()","multijson::okjson#truetok()","multijson::okjson#ucharcopy()","multijson::okjson#ucharenc()","multijson::okjson#unquote()","multijson::okjson#valenc()","multijson::okjson#valparse()"],"info":[["MultiJson","","MultiJson.html","","<p>Some parts adapted from golang.org/src/pkg/json/decode.go and\ngolang.org/src/pkg/utf8/utf8.go\n"],["MultiJson::Adapters","","MultiJson/Adapters.html","",""],["MultiJson::Adapters::JsonCommon","","MultiJson/Adapters/JsonCommon.html","",""],["MultiJson::Adapters::JsonGem","","MultiJson/Adapters/JsonGem.html","","<p>Use the JSON gem to dump/load.\n"],["MultiJson::Adapters::JsonPure","","MultiJson/Adapters/JsonPure.html","","<p>Use JSON pure to dump/load.\n"],["MultiJson::Adapters::Nsjsonserialization","","MultiJson/Adapters/Nsjsonserialization.html","",""],["MultiJson::Adapters::Nsjsonserialization::ParseError","","MultiJson/OkJson/Error.html","",""],["MultiJson::Adapters::Oj","","MultiJson/Adapters/Oj.html","","<p>Use the Oj library to dump/load.\n"],["MultiJson::Adapters::OkJson","","MultiJson/Adapters/OkJson.html","",""],["MultiJson::Adapters::OkJson::ParseError","","MultiJson/OkJson/Error.html","",""],["MultiJson::Adapters::Yajl","","MultiJson/Adapters/Yajl.html","","<p>Use the Yajl-Ruby library to dump/load.\n"],["MultiJson::DecodeError","","MultiJson/DecodeError.html","",""],["MultiJson::OkJson","","MultiJson/OkJson.html","",""],["MultiJson::OkJson::Error","","MultiJson/OkJson/Error.html","",""],["MultiJson::OkJson::Utf8Error","","MultiJson/OkJson/Utf8Error.html","",""],["abbrev","MultiJson::OkJson","MultiJson/OkJson.html#method-i-abbrev","(s)",""],["arrenc","MultiJson::OkJson","MultiJson/OkJson.html#method-i-arrenc","(a)",""],["arrparse","MultiJson::OkJson","MultiJson/OkJson.html#method-i-arrparse","(ts)","<p>Parses an “array” in the sense of RFC 4627. Returns the parsed value and\nany trailing tokens. …\n"],["decode","MultiJson::OkJson","MultiJson/OkJson.html#method-i-decode","(s)","<p>Decodes a json document in string s and returns the corresponding ruby\nvalue. String s must be valid …\n"],["default_adapter","MultiJson","MultiJson.html#method-c-default_adapter","()","<p>The default adapter based on what you currently have loaded and installed.\nFirst checks to see if any …\n"],["dump","MultiJson::Adapters::JsonCommon","MultiJson/Adapters/JsonCommon.html#method-i-dump","(object, options={})",""],["dump","MultiJson::Adapters::Nsjsonserialization","MultiJson/Adapters/Nsjsonserialization.html#method-c-dump","(object, options={})",""],["eat","MultiJson::OkJson","MultiJson/OkJson.html#method-i-eat","(typ, ts)",""],["encode","MultiJson::OkJson","MultiJson/OkJson.html#method-i-encode","(x)","<p>Encodes x into a json text. It may contain only Array, Hash, String,\nNumeric, true, false, nil. (Note …\n"],["falsetok","MultiJson::OkJson","MultiJson/OkJson.html#method-i-falsetok","(s)",""],["hexdec4","MultiJson::OkJson","MultiJson/OkJson.html#method-i-hexdec4","(s)",""],["keyenc","MultiJson::OkJson","MultiJson/OkJson.html#method-i-keyenc","(k)",""],["lex","MultiJson::OkJson","MultiJson/OkJson.html#method-i-lex","(s)","<p>Scans s and returns a list of json tokens, excluding white space (as\ndefined in RFC 4627).\n"],["load","MultiJson::Adapters::JsonCommon","MultiJson/Adapters/JsonCommon.html#method-i-load","(string, options={})",""],["load","MultiJson::Adapters::Nsjsonserialization","MultiJson/Adapters/Nsjsonserialization.html#method-c-load","(string, options={})",""],["new","MultiJson::DecodeError","MultiJson/DecodeError.html#method-c-new","(message, backtrace, data)",""],["nibble","MultiJson::OkJson","MultiJson/OkJson.html#method-i-nibble","(c)",""],["nulltok","MultiJson::OkJson","MultiJson/OkJson.html#method-i-nulltok","(s)",""],["numenc","MultiJson::OkJson","MultiJson/OkJson.html#method-i-numenc","(x)",""],["numtok","MultiJson::OkJson","MultiJson/OkJson.html#method-i-numtok","(s)",""],["objenc","MultiJson::OkJson","MultiJson/OkJson.html#method-i-objenc","(x)",""],["objparse","MultiJson::OkJson","MultiJson/OkJson.html#method-i-objparse","(ts)","<p>Parses an “object” in the sense of RFC 4627. Returns the parsed value and\nany trailing tokens. …\n"],["pairparse","MultiJson::OkJson","MultiJson/OkJson.html#method-i-pairparse","(ts)","<p>Parses a “member” in the sense of RFC 4627. Returns the parsed values and\nany trailing tokens. …\n"],["process_options","MultiJson::Adapters::JsonCommon","MultiJson/Adapters/JsonCommon.html#method-i-process_options","(options={})",""],["strenc","MultiJson::OkJson","MultiJson/OkJson.html#method-i-strenc","(s)",""],["strtok","MultiJson::OkJson","MultiJson/OkJson.html#method-i-strtok","(s)",""],["subst","MultiJson::OkJson","MultiJson/OkJson.html#method-i-subst","(u1, u2)",""],["surrogate?","MultiJson::OkJson","MultiJson/OkJson.html#method-i-surrogate-3F","(u)",""],["textparse","MultiJson::OkJson","MultiJson/OkJson.html#method-i-textparse","(ts)","<p>Parses a “json text” in the sense of RFC 4627. Returns the parsed value and\nany trailing tokens. …\n"],["tok","MultiJson::OkJson","MultiJson/OkJson.html#method-i-tok","(s)","<p>Scans the first token in s and returns a 3-element list, or nil if s does\nnot begin with a valid token. …\n"],["truetok","MultiJson::OkJson","MultiJson/OkJson.html#method-i-truetok","(s)",""],["ucharcopy","MultiJson::OkJson","MultiJson/OkJson.html#method-i-ucharcopy","(t, s, i)","<p>Copies the valid UTF-8 bytes of a single character from string s at\nposition i to I/O object t, and returns …\n"],["ucharenc","MultiJson::OkJson","MultiJson/OkJson.html#method-i-ucharenc","(a, i, u)","<p>Encodes unicode character u as UTF-8 bytes in string a at position i.\nReturns the number of bytes written. …\n"],["unquote","MultiJson::OkJson","MultiJson/OkJson.html#method-i-unquote","(q)","<p>Converts a quoted json string literal q into a UTF-8-encoded string. The\nrules are different than for …\n"],["valenc","MultiJson::OkJson","MultiJson/OkJson.html#method-i-valenc","(x)",""],["valparse","MultiJson::OkJson","MultiJson/OkJson.html#method-i-valparse","(ts)","<p>Parses a “value” in the sense of RFC 4627. Returns the parsed value and any\ntrailing tokens. …\n"]]}}