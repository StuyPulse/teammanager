var search_data = {"index":{"searchIndex":["activeresource","base","connection","custommethods","classmethods","errors","formats","jsonformat","xmlformat","httpmock","invalidrequesterror","logsubscriber","observing","railtie","request","response","sslerror","timeouterror","validations","==()","==()","==()","[]()","[]()","[]=()","all()","auth_type()","auth_type=()","auth_type=()","build()","clone()","collection_name()","collection_path()","collection_path()","connection()","connection()","create()","create()","custom_method_collection_url()","decode()","decode()","delete()","delete()","delete()","delete()","delete_responses_to_replace()","destroy()","dup()","element_name()","element_path()","element_path()","encode()","encode()","encode()","eql?()","errors()","exists?()","exists?()","extension()","extension()","find()","first()","format()","format=()","from_array()","from_json()","from_xml()","get()","get()","get()","hash()","head()","headers()","id()","id=()","id_from_response()","known_attributes()","known_attributes()","last()","load()","load_attributes_from_response()","logger()","logger()","mime_type()","mime_type()","new()","new()","new()","new()","new()","new()","new?()","new_element_path()","new_element_path()","new_record?()","orig_delete()","password()","password=()","password=()","persisted?()","post()","post()","post()","prefix()","prefix=()","prefix_source()","primary_key()","proxy()","proxy=()","proxy=()","put()","put()","put()","reload()","remove_root()","request()","requests()","requests()","reset!()","respond_to()","respond_to?()","respond_to_without_attributes?()","responses()","save()","save!()","save_with_validation()","schema()","schema()","schema=()","set_prefix()","site()","site=()","site=()","ssl_options()","ssl_options=()","ssl_options=()","success?()","timeout()","timeout=()","timeout=()","to_json()","to_s()","to_s()","to_s()","to_xml()","update()","update_attribute()","update_attributes()","user()","user=()","user=()","valid?()","readme"],"longSearchIndex":["activeresource","activeresource::base","activeresource::connection","activeresource::custommethods","activeresource::custommethods::classmethods","activeresource::errors","activeresource::formats","activeresource::formats::jsonformat","activeresource::formats::xmlformat","activeresource::httpmock","activeresource::invalidrequesterror","activeresource::logsubscriber","activeresource::observing","activeresource::railtie","activeresource::request","activeresource::response","activeresource::sslerror","activeresource::timeouterror","activeresource::validations","activeresource::base#==()","activeresource::request#==()","activeresource::response#==()","activeresource::formats::[]()","activeresource::response#[]()","activeresource::response#[]=()","activeresource::base::all()","activeresource::base::auth_type()","activeresource::base::auth_type=()","activeresource::connection#auth_type=()","activeresource::base::build()","activeresource::base#clone()","activeresource::base::collection_name()","activeresource::base::collection_path()","activeresource::base#collection_path()","activeresource::base::connection()","activeresource::base#connection()","activeresource::base::create()","activeresource::base#create()","activeresource::custommethods::classmethods#custom_method_collection_url()","activeresource::formats::jsonformat#decode()","activeresource::formats::xmlformat#decode()","activeresource::base::delete()","activeresource::connection#delete()","activeresource::custommethods#delete()","activeresource::custommethods::delete()","activeresource::httpmock::delete_responses_to_replace()","activeresource::base#destroy()","activeresource::base#dup()","activeresource::base::element_name()","activeresource::base::element_path()","activeresource::base#element_path()","activeresource::base#encode()","activeresource::formats::jsonformat#encode()","activeresource::formats::xmlformat#encode()","activeresource::base#eql?()","activeresource::validations#errors()","activeresource::base#exists?()","activeresource::base::exists?()","activeresource::formats::jsonformat#extension()","activeresource::formats::xmlformat#extension()","activeresource::base::find()","activeresource::base::first()","activeresource::base::format()","activeresource::base::format=()","activeresource::errors#from_array()","activeresource::errors#from_json()","activeresource::errors#from_xml()","activeresource::connection#get()","activeresource::custommethods::get()","activeresource::custommethods#get()","activeresource::base#hash()","activeresource::connection#head()","activeresource::base::headers()","activeresource::base#id()","activeresource::base#id=()","activeresource::base#id_from_response()","activeresource::base#known_attributes()","activeresource::base::known_attributes()","activeresource::base::last()","activeresource::base#load()","activeresource::base#load_attributes_from_response()","activeresource::base::logger()","activeresource::logsubscriber#logger()","activeresource::formats::jsonformat#mime_type()","activeresource::formats::xmlformat#mime_type()","activeresource::base::new()","activeresource::connection::new()","activeresource::request::new()","activeresource::response::new()","activeresource::sslerror::new()","activeresource::timeouterror::new()","activeresource::base#new?()","activeresource::base#new_element_path()","activeresource::base::new_element_path()","activeresource::base#new_record?()","activeresource::custommethods::orig_delete()","activeresource::base::password()","activeresource::base::password=()","activeresource::connection#password=()","activeresource::base#persisted?()","activeresource::connection#post()","activeresource::custommethods::post()","activeresource::custommethods#post()","activeresource::base::prefix()","activeresource::base::prefix=()","activeresource::base::prefix_source()","activeresource::base::primary_key()","activeresource::base::proxy()","activeresource::base::proxy=()","activeresource::connection#proxy=()","activeresource::connection#put()","activeresource::custommethods::put()","activeresource::custommethods#put()","activeresource::base#reload()","activeresource::formats::remove_root()","activeresource::logsubscriber#request()","activeresource::connection::requests()","activeresource::httpmock::requests()","activeresource::httpmock::reset!()","activeresource::httpmock::respond_to()","activeresource::base#respond_to?()","activeresource::base#respond_to_without_attributes?()","activeresource::httpmock::responses()","activeresource::base#save()","activeresource::base#save!()","activeresource::validations#save_with_validation()","activeresource::base::schema()","activeresource::base#schema()","activeresource::base::schema=()","activeresource::base::set_prefix()","activeresource::base::site()","activeresource::base::site=()","activeresource::connection#site=()","activeresource::base::ssl_options()","activeresource::base::ssl_options=()","activeresource::connection#ssl_options=()","activeresource::response#success?()","activeresource::base::timeout()","activeresource::base::timeout=()","activeresource::connection#timeout=()","activeresource::base#to_json()","activeresource::request#to_s()","activeresource::sslerror#to_s()","activeresource::timeouterror#to_s()","activeresource::base#to_xml()","activeresource::base#update()","activeresource::base#update_attribute()","activeresource::base#update_attributes()","activeresource::base::user()","activeresource::base::user=()","activeresource::connection#user=()","activeresource::validations#valid?()",""],"info":[["ActiveResource","","ActiveResource.html","",""],["ActiveResource::Base","","ActiveResource/Base.html","","<p>ActiveResource::Base is the main class for mapping RESTful resources as\nmodels in a Rails application. …\n"],["ActiveResource::Connection","","ActiveResource/Connection.html","","<p>Class to handle connections to remote web services. This class is used by\nActiveResource::Base to interface …\n"],["ActiveResource::CustomMethods","","ActiveResource/CustomMethods.html","","<p>A module to support custom REST methods and sub-resources, allowing you to\nbreak out of the “default” …\n"],["ActiveResource::CustomMethods::ClassMethods","","ActiveResource/CustomMethods/ClassMethods.html","",""],["ActiveResource::Errors","","ActiveResource/Errors.html","","<p>Active Resource validation is reported to and from this object, which is\nused by Base#save to determine …\n"],["ActiveResource::Formats","","ActiveResource/Formats.html","",""],["ActiveResource::Formats::JsonFormat","","ActiveResource/Formats/JsonFormat.html","",""],["ActiveResource::Formats::XmlFormat","","ActiveResource/Formats/XmlFormat.html","",""],["ActiveResource::HttpMock","","ActiveResource/HttpMock.html","","<p>One thing that has always been a pain with remote web services is testing. \nThe HttpMock class makes …\n"],["ActiveResource::InvalidRequestError","","ActiveResource/InvalidRequestError.html","",""],["ActiveResource::LogSubscriber","","ActiveResource/LogSubscriber.html","",""],["ActiveResource::Observing","","ActiveResource/Observing.html","",""],["ActiveResource::Railtie","","ActiveResource/Railtie.html","",""],["ActiveResource::Request","","ActiveResource/Request.html","",""],["ActiveResource::Response","","ActiveResource/Response.html","",""],["ActiveResource::SSLError","","ActiveResource/SSLError.html","","<p>Raised when a OpenSSL::SSL::SSLError occurs.\n"],["ActiveResource::TimeoutError","","ActiveResource/TimeoutError.html","","<p>Raised when a Timeout::Error occurs.\n"],["ActiveResource::Validations","","ActiveResource/Validations.html","","<p>Module to support validation and errors with Active Resource objects. The\nmodule overrides Base#save …\n"],["==","ActiveResource::Base","ActiveResource/Base.html#method-i-3D-3D","(other)","<p>Test for equality.  Resource are equal if and only if <code>other</code> is\nthe same object or is an instance of the …\n"],["==","ActiveResource::Request","ActiveResource/Request.html#method-i-3D-3D","(req)",""],["==","ActiveResource::Response","ActiveResource/Response.html#method-i-3D-3D","(other)","<p>Returns true if the other is a Response with an equal body, equal message\nand equal headers. Otherwise …\n"],["[]","ActiveResource::Formats","ActiveResource/Formats.html#method-c-5B-5D","(mime_type_reference)","<p>Lookup the format class from a mime type reference symbol. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveResource</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Formats</span>[:<span class=\"ruby-identifier\">xml</span>]  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["[]","ActiveResource::Response","ActiveResource/Response.html#method-i-5B-5D","(key)",""],["[]=","ActiveResource::Response","ActiveResource/Response.html#method-i-5B-5D-3D","(key, value)",""],["all","ActiveResource::Base","ActiveResource/Base.html#method-c-all","(*args)","<p>This is an alias for find(:all).  You can pass in all the same arguments to\nthis method as you can to …\n"],["auth_type","ActiveResource::Base","ActiveResource/Base.html#method-c-auth_type","()",""],["auth_type=","ActiveResource::Base","ActiveResource/Base.html#method-c-auth_type-3D","(auth_type)",""],["auth_type=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-auth_type-3D","(auth_type)","<p>Sets the auth type for remote service.\n"],["build","ActiveResource::Base","ActiveResource/Base.html#method-c-build","(attributes = {})","<p>Builds a new, unsaved record using the default values from the remote\nserver so that it can be used with …\n"],["clone","ActiveResource::Base","ActiveResource/Base.html#method-i-clone","()","<p>Returns a clone of the resource that hasn’t been assigned an\n<code>id</code> yet and is treated as a new resource. …\n"],["collection_name","ActiveResource::Base","ActiveResource/Base.html#method-c-collection_name","()",""],["collection_path","ActiveResource::Base","ActiveResource/Base.html#method-c-collection_path","(prefix_options = {}, query_options = nil)","<p>Gets the collection path for the REST resources.  If the\n<code>query_options</code> parameter is omitted, Rails will …\n"],["collection_path","ActiveResource::Base","ActiveResource/Base.html#method-i-collection_path","(options = nil)",""],["connection","ActiveResource::Base","ActiveResource/Base.html#method-c-connection","(refresh = false)","<p>An instance of ActiveResource::Connection that is the base connection to\nthe remote service. The <code>refresh</code> …\n"],["connection","ActiveResource::Base","ActiveResource/Base.html#method-i-connection","(refresh = false)",""],["create","ActiveResource::Base","ActiveResource/Base.html#method-c-create","(attributes = {})","<p>Creates a new resource instance and makes a request to the remote service\nthat it be saved, making it …\n"],["create","ActiveResource::Base","ActiveResource/Base.html#method-i-create","()","<p>Create (i.e., save to the remote service) the new resource.\n"],["custom_method_collection_url","ActiveResource::CustomMethods::ClassMethods","ActiveResource/CustomMethods/ClassMethods.html#method-i-custom_method_collection_url","(method_name, options = {})",""],["decode","ActiveResource::Formats::JsonFormat","ActiveResource/Formats/JsonFormat.html#method-i-decode","(json)",""],["decode","ActiveResource::Formats::XmlFormat","ActiveResource/Formats/XmlFormat.html#method-i-decode","(xml)",""],["delete","ActiveResource::Base","ActiveResource/Base.html#method-c-delete","(id, options = {})","<p>Deletes the resources with the ID in the <code>id</code> parameter.\n<p>Options\n<p>All options specify prefix and query parameters. …\n"],["delete","ActiveResource::Connection","ActiveResource/Connection.html#method-i-delete","(path, headers = {})","<p>Executes a DELETE request (see HTTP protocol documentation if unfamiliar).\nUsed to delete resources. …\n"],["delete","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-i-delete","(method_name, options = {})",""],["delete","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-c-delete","(custom_method_name, options = {})",""],["delete_responses_to_replace","ActiveResource::HttpMock","ActiveResource/HttpMock.html#method-c-delete_responses_to_replace","(new_responses)",""],["destroy","ActiveResource::Base","ActiveResource/Base.html#method-i-destroy","()","<p>Deletes the resource from the remote service.\n<p>Examples\n\n<pre>my_id = 3\nmy_person = Person.find(my_id)\nmy_person.destroy ...</pre>\n"],["dup","ActiveResource::Base","ActiveResource/Base.html#method-i-dup","()","<p>Duplicates the current resource without saving it.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">my_invoice</span> = <span class=\"ruby-constant\">Invoice</span>.<span class=\"ruby-identifier\">create</span>(:<span class=\"ruby-identifier\">customer</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'That ...\n</span></pre>\n"],["element_name","ActiveResource::Base","ActiveResource/Base.html#method-c-element_name","()",""],["element_path","ActiveResource::Base","ActiveResource/Base.html#method-c-element_path","(id, prefix_options = {}, query_options = nil)","<p>Gets the element path for the given ID in <code>id</code>.  If the\n<code>query_options</code> parameter is omitted, Rails will …\n"],["element_path","ActiveResource::Base","ActiveResource/Base.html#method-i-element_path","(options = nil)",""],["encode","ActiveResource::Base","ActiveResource/Base.html#method-i-encode","(options={})","<p>Returns the serialized string representation of the resource in the\nconfigured serialization format specified …\n"],["encode","ActiveResource::Formats::JsonFormat","ActiveResource/Formats/JsonFormat.html#method-i-encode","(hash, options = nil)",""],["encode","ActiveResource::Formats::XmlFormat","ActiveResource/Formats/XmlFormat.html#method-i-encode","(hash, options={})",""],["eql?","ActiveResource::Base","ActiveResource/Base.html#method-i-eql-3F","(other)","<p>Tests for equality (delegates to ==).\n"],["errors","ActiveResource::Validations","ActiveResource/Validations.html#method-i-errors","()","<p>Returns the Errors object that holds all information about attribute error\nmessages.\n"],["exists?","ActiveResource::Base","ActiveResource/Base.html#method-i-exists-3F","()","<p>Evaluates to <code>true</code> if this resource is not <code>new?</code>\nand is found on the remote service.  Using this method, …\n"],["exists?","ActiveResource::Base","ActiveResource/Base.html#method-c-exists-3F","(id, options = {})","<p>Asserts the existence of a resource, returning <code>true</code> if the\nresource is found.\n<p>Examples\n\n<pre>Note.create(:title ...</pre>\n"],["extension","ActiveResource::Formats::JsonFormat","ActiveResource/Formats/JsonFormat.html#method-i-extension","()",""],["extension","ActiveResource::Formats::XmlFormat","ActiveResource/Formats/XmlFormat.html#method-i-extension","()",""],["find","ActiveResource::Base","ActiveResource/Base.html#method-c-find","(*arguments)","<p>Core method for finding resources.  Used similarly to Active Record’s\n<code>find</code> method.\n<p>Arguments\n<p>The first …\n"],["first","ActiveResource::Base","ActiveResource/Base.html#method-c-first","(*args)","<p>A convenience wrapper for <code>find(:first, *args)</code>. You can pass in\nall the same arguments to this method …\n"],["format","ActiveResource::Base","ActiveResource/Base.html#method-c-format","()","<p>Returns the current format, default is ActiveResource::Formats::JsonFormat.\n"],["format=","ActiveResource::Base","ActiveResource/Base.html#method-c-format-3D","(mime_type_reference_or_format)","<p>Sets the format that attributes are sent and received in from a mime type\nreference:\n\n<pre>Person.format = :json ...</pre>\n"],["from_array","ActiveResource::Errors","ActiveResource/Errors.html#method-i-from_array","(messages, save_cache = false)","<p>Grabs errors from an array of messages (like ActiveRecord::Validations).\nThe second parameter directs …\n"],["from_json","ActiveResource::Errors","ActiveResource/Errors.html#method-i-from_json","(json, save_cache = false)","<p>Grabs errors from a json response.\n"],["from_xml","ActiveResource::Errors","ActiveResource/Errors.html#method-i-from_xml","(xml, save_cache = false)","<p>Grabs errors from an XML response.\n"],["get","ActiveResource::Connection","ActiveResource/Connection.html#method-i-get","(path, headers = {})","<p>Executes a GET request. Used to get (find) resources.\n"],["get","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-c-get","(custom_method_name, options = {})","<p>Invokes a GET to a given custom REST method. For example:\n\n<pre>Person.get(:active)  # GET /people/active.json ...</pre>\n"],["get","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-i-get","(method_name, options = {})",""],["hash","ActiveResource::Base","ActiveResource/Base.html#method-i-hash","()","<p>Delegates to id in order to allow two resources of the same type and id to\nwork with something like: …\n"],["head","ActiveResource::Connection","ActiveResource/Connection.html#method-i-head","(path, headers = {})","<p>Executes a HEAD request. Used to obtain meta-information about resources,\nsuch as whether they exist …\n"],["headers","ActiveResource::Base","ActiveResource/Base.html#method-c-headers","()",""],["id","ActiveResource::Base","ActiveResource/Base.html#method-i-id","()","<p>Gets the <code>\\id</code> attribute of the resource.\n"],["id=","ActiveResource::Base","ActiveResource/Base.html#method-i-id-3D","(id)","<p>Sets the <code>\\id</code> attribute of the resource.\n"],["id_from_response","ActiveResource::Base","ActiveResource/Base.html#method-i-id_from_response","(response)","<p>Takes a response from a typical create post and pulls the ID out\n"],["known_attributes","ActiveResource::Base","ActiveResource/Base.html#method-i-known_attributes","()","<p>This is a list of known attributes for this resource. Either gathered from\nthe provided <code>schema</code>, or from …\n"],["known_attributes","ActiveResource::Base","ActiveResource/Base.html#method-c-known_attributes","()","<p>Returns the list of known attributes for this resource, gathered from the\nprovided <code>schema</code> Attributes …\n"],["last","ActiveResource::Base","ActiveResource/Base.html#method-c-last","(*args)","<p>A convenience wrapper for <code>find(:last, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["load","ActiveResource::Base","ActiveResource/Base.html#method-i-load","(attributes, remove_root = false)","<p>A method to manually load attributes from a hash. Recursively loads\ncollections of resources.  This method …\n"],["load_attributes_from_response","ActiveResource::Base","ActiveResource/Base.html#method-i-load_attributes_from_response","(response)",""],["logger","ActiveResource::Base","ActiveResource/Base.html#method-c-logger","","<p>The logger for diagnosing and tracing Active Resource calls.\n"],["logger","ActiveResource::LogSubscriber","ActiveResource/LogSubscriber.html#method-i-logger","()",""],["mime_type","ActiveResource::Formats::JsonFormat","ActiveResource/Formats/JsonFormat.html#method-i-mime_type","()",""],["mime_type","ActiveResource::Formats::XmlFormat","ActiveResource/Formats/XmlFormat.html#method-i-mime_type","()",""],["new","ActiveResource::Base","ActiveResource/Base.html#method-c-new","(attributes = {}, persisted = false)","<p>Constructor method for new resources; the optional <code>attributes</code>\nparameter takes a hash of attributes for …\n"],["new","ActiveResource::Connection","ActiveResource/Connection.html#method-c-new","(site, format = ActiveResource::Formats::JsonFormat)","<p>The <code>site</code> parameter is required and will set the\n<code>site</code> attribute to the URI for the remote resource service. …\n"],["new","ActiveResource::Request","ActiveResource/Request.html#method-c-new","(method, path, body = nil, headers = {})",""],["new","ActiveResource::Response","ActiveResource/Response.html#method-c-new","(body, message = 200, headers = {})",""],["new","ActiveResource::SSLError","ActiveResource/SSLError.html#method-c-new","(message)",""],["new","ActiveResource::TimeoutError","ActiveResource/TimeoutError.html#method-c-new","(message)",""],["new?","ActiveResource::Base","ActiveResource/Base.html#method-i-new-3F","()","<p>Returns <code>true</code> if this object hasn’t yet been saved, otherwise,\nreturns <code>false</code>.\n<p>Examples\n\n<pre>not_new = Computer.create(:brand ...</pre>\n"],["new_element_path","ActiveResource::Base","ActiveResource/Base.html#method-i-new_element_path","()",""],["new_element_path","ActiveResource::Base","ActiveResource/Base.html#method-c-new_element_path","(prefix_options = {})","<p>Gets the new element path for REST resources.\n<p>Options\n<p><code>prefix_options</code> - A hash to add a prefix to the request ...\n"],["new_record?","ActiveResource::Base","ActiveResource/Base.html#method-i-new_record-3F","()",""],["orig_delete","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-c-orig_delete","(custom_method_name, options = {})",""],["password","ActiveResource::Base","ActiveResource/Base.html#method-c-password","()","<p>Gets the password for REST HTTP authentication.\n"],["password=","ActiveResource::Base","ActiveResource/Base.html#method-c-password-3D","(password)","<p>Sets the password for REST HTTP authentication.\n"],["password=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-password-3D","(password)","<p>Sets the password for remote service.\n"],["persisted?","ActiveResource::Base","ActiveResource/Base.html#method-i-persisted-3F","()","<p>Returns <code>true</code> if this object has been saved, otherwise returns\n<code>false</code>.\n<p>Examples\n\n<pre>persisted = Computer.create(:brand ...</pre>\n"],["post","ActiveResource::Connection","ActiveResource/Connection.html#method-i-post","(path, body = '', headers = {})","<p>Executes a POST request. Used to create new resources.\n"],["post","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-c-post","(custom_method_name, options = {}, body = '')",""],["post","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-i-post","(method_name, options = {}, body = nil)",""],["prefix","ActiveResource::Base","ActiveResource/Base.html#method-c-prefix","(options={})","<p>Gets the prefix for a resource’s nested URL (e.g.,\n<code>prefix/collectionname/1.json</code>) This method is regenerated …\n"],["prefix=","ActiveResource::Base","ActiveResource/Base.html#method-c-prefix-3D","(value = '/')","<p>Sets the prefix for a resource’s nested URL (e.g.,\n<code>prefix/collectionname/1.json</code>). Default value is\n<code>site.path</code> …\n"],["prefix_source","ActiveResource::Base","ActiveResource/Base.html#method-c-prefix_source","()","<p>An attribute reader for the source string for the resource path prefix. \nThis method is regenerated at …\n"],["primary_key","ActiveResource::Base","ActiveResource/Base.html#method-c-primary_key","()",""],["proxy","ActiveResource::Base","ActiveResource/Base.html#method-c-proxy","()","<p>Gets the proxy variable if a proxy is required\n"],["proxy=","ActiveResource::Base","ActiveResource/Base.html#method-c-proxy-3D","(proxy)","<p>Sets the URI of the http proxy to the value in the <code>proxy</code>\nargument.\n"],["proxy=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-proxy-3D","(proxy)","<p>Set the proxy for remote service.\n"],["put","ActiveResource::Connection","ActiveResource/Connection.html#method-i-put","(path, body = '', headers = {})","<p>Executes a PUT request (see HTTP protocol documentation if unfamiliar).\nUsed to update resources.\n"],["put","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-c-put","(custom_method_name, options = {}, body = '')",""],["put","ActiveResource::CustomMethods","ActiveResource/CustomMethods.html#method-i-put","(method_name, options = {}, body = '')",""],["reload","ActiveResource::Base","ActiveResource/Base.html#method-i-reload","()","<p>A method to reload the attributes of this object from the remote web\nservice.\n<p>Examples\n\n<pre>my_branch = Branch.find(:first) ...</pre>\n"],["remove_root","ActiveResource::Formats","ActiveResource/Formats.html#method-c-remove_root","(data)",""],["request","ActiveResource::LogSubscriber","ActiveResource/LogSubscriber.html#method-i-request","(event)",""],["requests","ActiveResource::Connection","ActiveResource/Connection.html#method-c-requests","()",""],["requests","ActiveResource::HttpMock","ActiveResource/HttpMock.html#method-c-requests","()","<p>Returns an array of all request objects that have been sent to the mock.\nYou can use this to check if …\n"],["reset!","ActiveResource::HttpMock","ActiveResource/HttpMock.html#method-c-reset-21","()","<p>Deletes all logged requests and responses.\n"],["respond_to","ActiveResource::HttpMock","ActiveResource/HttpMock.html#method-c-respond_to","(*args)","<p>Accepts a block which declares a set of requests and responses for the\nHttpMock to respond to in the …\n"],["respond_to?","ActiveResource::Base","ActiveResource/Base.html#method-i-respond_to-3F","(method, include_priv = false)","<p>A method to determine if an object responds to a message (e.g., a method\ncall). In Active Resource, a …\n"],["respond_to_without_attributes?","ActiveResource::Base","ActiveResource/Base.html#method-i-respond_to_without_attributes-3F","(method, include_priv = false)","<p>For checking <code>respond_to?</code> without searching the attributes\n(which is faster).\n"],["responses","ActiveResource::HttpMock","ActiveResource/HttpMock.html#method-c-responses","()","<p>Returns the list of requests and their mocked responses. Look up a response\nfor a request using <code>responses.assoc</code> …\n"],["save","ActiveResource::Base","ActiveResource/Base.html#method-i-save","()","<p>Saves (<code>POST</code>) or updates (<code>PUT</code>) a resource. \nDelegates to <code>create</code> if the object is new, <code>update</code>\nif it exists. …\n"],["save!","ActiveResource::Base","ActiveResource/Base.html#method-i-save-21","()","<p>Saves the resource.\n<p>If the resource is new, it is created via <code>POST</code>, otherwise the\nexisting resource is …\n"],["save_with_validation","ActiveResource::Validations","ActiveResource/Validations.html#method-i-save_with_validation","(options={})","<p>Validate a resource and save (POST) it to the remote web service. If any\nlocal validations fail - the …\n"],["schema","ActiveResource::Base","ActiveResource/Base.html#method-c-schema","(&block)","<p>Creates a schema for this resource - setting the attributes that are known\nprior to fetching an instance …\n"],["schema","ActiveResource::Base","ActiveResource/Base.html#method-i-schema","()","<p>If no schema has been defined for the class (see\n<code>ActiveResource::schema=</code>), the default automatic schema …\n"],["schema=","ActiveResource::Base","ActiveResource/Base.html#method-c-schema-3D","(the_schema)","<p>Alternative, direct way to specify a <code>schema</code> for this Resource.\n<code>schema</code> is more flexible, but this is quick …\n"],["set_prefix","ActiveResource::Base","ActiveResource/Base.html#method-c-set_prefix","(value = '/')",""],["site","ActiveResource::Base","ActiveResource/Base.html#method-c-site","()","<p>Gets the URI of the REST resources to map for this class.  The site\nvariable is required for Active Resource’s …\n"],["site=","ActiveResource::Base","ActiveResource/Base.html#method-c-site-3D","(site)","<p>Sets the URI of the REST resources to map for this class to the value in\nthe <code>site</code> argument. The site …\n"],["site=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-site-3D","(site)","<p>Set URI for remote service.\n"],["ssl_options","ActiveResource::Base","ActiveResource/Base.html#method-c-ssl_options","()","<p>Returns the SSL options hash.\n"],["ssl_options=","ActiveResource::Base","ActiveResource/Base.html#method-c-ssl_options-3D","(opts={})","<p>Options that will get applied to an SSL connection.\n<p><code>:key</code> - An OpenSSL::PKey::RSA or OpenSSL::PKey::DSA ...\n"],["ssl_options=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-ssl_options-3D","(opts={})","<p>Hash of options applied to Net::HTTP instance when <code>site</code>\nprotocol is ‘https’.\n"],["success?","ActiveResource::Response","ActiveResource/Response.html#method-i-success-3F","()","<p>Returns true if code is 2xx, false otherwise.\n"],["timeout","ActiveResource::Base","ActiveResource/Base.html#method-c-timeout","()","<p>Gets the number of seconds after which requests to the REST API should time\nout.\n"],["timeout=","ActiveResource::Base","ActiveResource/Base.html#method-c-timeout-3D","(timeout)","<p>Sets the number of seconds after which requests to the REST API should time\nout.\n"],["timeout=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-timeout-3D","(timeout)","<p>Sets the number of seconds after which HTTP requests to the remote service\nshould time out.\n"],["to_json","ActiveResource::Base","ActiveResource/Base.html#method-i-to_json","(options={})",""],["to_s","ActiveResource::Request","ActiveResource/Request.html#method-i-to_s","()",""],["to_s","ActiveResource::SSLError","ActiveResource/SSLError.html#method-i-to_s","()",""],["to_s","ActiveResource::TimeoutError","ActiveResource/TimeoutError.html#method-i-to_s","()",""],["to_xml","ActiveResource::Base","ActiveResource/Base.html#method-i-to_xml","(options={})",""],["update","ActiveResource::Base","ActiveResource/Base.html#method-i-update","()","<p>Update the resource on the remote service.\n"],["update_attribute","ActiveResource::Base","ActiveResource/Base.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and then saves the object.\n<p>Note: Unlike ActiveRecord::Base.update_attribute …\n"],["update_attributes","ActiveResource::Base","ActiveResource/Base.html#method-i-update_attributes","(attributes)","<p>Updates this resource with all the attributes from the passed-in Hash and\nrequests that the record be …\n"],["user","ActiveResource::Base","ActiveResource/Base.html#method-c-user","()","<p>Gets the user for REST HTTP authentication.\n"],["user=","ActiveResource::Base","ActiveResource/Base.html#method-c-user-3D","(user)","<p>Sets the user for REST HTTP authentication.\n"],["user=","ActiveResource::Connection","ActiveResource/Connection.html#method-i-user-3D","(user)","<p>Sets the user for remote service.\n"],["valid?","ActiveResource::Validations","ActiveResource/Validations.html#method-i-valid-3F","()","<p>Checks for errors on an object (i.e., is resource.errors empty?).\n<p>Runs all the specified local validations …\n"],["README","","README_rdoc.html","","<p>Active Resource\n<p>Active Resource (ARes) connects business objects and Representational State\nTransfer ( …\n"]]}}