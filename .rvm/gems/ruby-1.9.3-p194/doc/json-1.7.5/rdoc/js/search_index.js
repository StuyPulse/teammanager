var search_data = {"index":{"searchIndex":["bigdecimal","class","complex","date","datetime","exception","json","circulardatastructure","ext","generatorerror","genericobject","jsonerror","missingunicodesupport","nestingerror","parsererror","pure","generator","generatormethods","array","falseclass","float","hash","integer","nilclass","object","string","extend","trueclass","state","parser","unparsererror","kernel","openstruct","range","rational","regexp","struct","symbol","time","[]()","[]()","[]()","[]=()","allow_nan?()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","ascii_only?()","check_circular?()","configure()","const_defined_in?()","dump()","fast_generate()","from_state()","generate()","generate()","iconv()","included()","json_creatable?()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","load()","merge()","new()","new()","parse()","parse()","parse!()","pretty_generate()","quirks_mode?()","quirks_mode?()","recurse_proc()","reset()","restore()","to_h()","to_hash()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json_raw()","to_json_raw_object()","wrap()","|()","readme"],"longSearchIndex":["bigdecimal","class","complex","date","datetime","exception","json","json::circulardatastructure","json::ext","json::generatorerror","json::genericobject","json::jsonerror","json::missingunicodesupport","json::nestingerror","json::parsererror","json::pure","json::pure::generator","json::pure::generator::generatormethods","json::pure::generator::generatormethods::array","json::pure::generator::generatormethods::falseclass","json::pure::generator::generatormethods::float","json::pure::generator::generatormethods::hash","json::pure::generator::generatormethods::integer","json::pure::generator::generatormethods::nilclass","json::pure::generator::generatormethods::object","json::pure::generator::generatormethods::string","json::pure::generator::generatormethods::string::extend","json::pure::generator::generatormethods::trueclass","json::pure::generator::state","json::pure::parser","json::unparsererror","kernel","openstruct","range","rational","regexp","struct","symbol","time","json::[]()","json::genericobject#[]()","json::pure::generator::state#[]()","json::genericobject#[]=()","json::pure::generator::state#allow_nan?()","bigdecimal#as_json()","complex#as_json()","date#as_json()","datetime#as_json()","exception#as_json()","json::genericobject#as_json()","openstruct#as_json()","range#as_json()","rational#as_json()","regexp#as_json()","struct#as_json()","symbol#as_json()","time#as_json()","json::pure::generator::state#ascii_only?()","json::pure::generator::state#check_circular?()","json::pure::generator::state#configure()","json::const_defined_in?()","json#dump()","json#fast_generate()","json::pure::generator::state::from_state()","json#generate()","json::pure::generator::state#generate()","json::iconv()","json::pure::generator::generatormethods::string::included()","class#json_creatable?()","bigdecimal::json_create()","complex::json_create()","date::json_create()","datetime::json_create()","exception::json_create()","json::genericobject::json_create()","json::pure::generator::generatormethods::string::extend#json_create()","openstruct::json_create()","range::json_create()","rational::json_create()","regexp::json_create()","struct::json_create()","symbol::json_create()","time::json_create()","json#load()","json::pure::generator::state#merge()","json::pure::generator::state::new()","json::pure::parser::new()","json#parse()","json::pure::parser#parse()","json#parse!()","json#pretty_generate()","json::pure::generator::state#quirks_mode?()","json::pure::parser#quirks_mode?()","json#recurse_proc()","json::pure::parser#reset()","json::restore()","json::pure::generator::state#to_h()","json::genericobject#to_hash()","bigdecimal#to_json()","complex#to_json()","date#to_json()","datetime#to_json()","exception#to_json()","json::genericobject#to_json()","json::pure::generator::generatormethods::array#to_json()","json::pure::generator::generatormethods::falseclass#to_json()","json::pure::generator::generatormethods::float#to_json()","json::pure::generator::generatormethods::hash#to_json()","json::pure::generator::generatormethods::integer#to_json()","json::pure::generator::generatormethods::nilclass#to_json()","json::pure::generator::generatormethods::object#to_json()","json::pure::generator::generatormethods::string#to_json()","json::pure::generator::generatormethods::trueclass#to_json()","openstruct#to_json()","range#to_json()","rational#to_json()","regexp#to_json()","struct#to_json()","symbol#to_json()","time#to_json()","json::pure::generator::generatormethods::string#to_json_raw()","json::pure::generator::generatormethods::string#to_json_raw_object()","json::jsonerror::wrap()","json::genericobject#|()",""],"info":[["BigDecimal","","BigDecimal.html","",""],["Class","","Class.html","","<p>Extends any Class to include <em>json_creatable?</em> method.\n"],["Complex","","Complex.html","",""],["Date","","Date.html","","<p>Date serialization/deserialization\n"],["DateTime","","DateTime.html","","<p>DateTime serialization/deserialization\n"],["Exception","","Exception.html","","<p>Exception serialization/deserialization\n"],["JSON","","JSON.html","",""],["JSON::CircularDatastructure","","JSON/CircularDatastructure.html","",""],["JSON::Ext","","JSON/Ext.html","","<p>This module holds all the modules/classes that implement JSON’s\nfunctionality as C extensions.\n"],["JSON::GeneratorError","","JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["JSON::GenericObject","","JSON/GenericObject.html","",""],["JSON::JSONError","","JSON/JSONError.html","","<p>The base exception for JSON errors.\n"],["JSON::MissingUnicodeSupport","","JSON/MissingUnicodeSupport.html","","<p>This exception is raised if the required unicode support is missing on the\nsystem. Usually this means …\n"],["JSON::NestingError","","JSON/NestingError.html","","<p>This exception is raised if the nesting of parsed data structures is too\ndeep.\n"],["JSON::ParserError","","JSON/ParserError.html","","<p>This exception is raised if a parser error occurs.\n"],["JSON::Pure","","JSON/Pure.html","","<p>This module holds all the modules/classes that implement JSON’s\nfunctionality in pure ruby.\n"],["JSON::Pure::Generator","","JSON/Pure/Generator.html","",""],["JSON::Pure::Generator::GeneratorMethods","","JSON/Pure/Generator/GeneratorMethods.html","",""],["JSON::Pure::Generator::GeneratorMethods::Array","","JSON/Pure/Generator/GeneratorMethods/Array.html","",""],["JSON::Pure::Generator::GeneratorMethods::FalseClass","","JSON/Pure/Generator/GeneratorMethods/FalseClass.html","",""],["JSON::Pure::Generator::GeneratorMethods::Float","","JSON/Pure/Generator/GeneratorMethods/Float.html","",""],["JSON::Pure::Generator::GeneratorMethods::Hash","","JSON/Pure/Generator/GeneratorMethods/Hash.html","",""],["JSON::Pure::Generator::GeneratorMethods::Integer","","JSON/Pure/Generator/GeneratorMethods/Integer.html","",""],["JSON::Pure::Generator::GeneratorMethods::NilClass","","JSON/Pure/Generator/GeneratorMethods/NilClass.html","",""],["JSON::Pure::Generator::GeneratorMethods::Object","","JSON/Pure/Generator/GeneratorMethods/Object.html","",""],["JSON::Pure::Generator::GeneratorMethods::String","","JSON/Pure/Generator/GeneratorMethods/String.html","",""],["JSON::Pure::Generator::GeneratorMethods::String::Extend","","JSON/Pure/Generator/GeneratorMethods/String/Extend.html","","<p>Module that holds the extinding methods if, the String module is included.\n"],["JSON::Pure::Generator::GeneratorMethods::TrueClass","","JSON/Pure/Generator/GeneratorMethods/TrueClass.html","",""],["JSON::Pure::Generator::State","","JSON/Pure/Generator/State.html","","<p>This class is used to create State instances, that are use to hold data\nwhile generating a JSON text …\n"],["JSON::Pure::Parser","","JSON/Pure/Parser.html","","<p>This class implements the JSON parser that is used to parse a JSON string\ninto a Ruby data structure. …\n"],["JSON::UnparserError","","JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["Kernel","","Kernel.html","",""],["OpenStruct","","OpenStruct.html","","<p>OpenStruct serialization/deserialization\n"],["Range","","Range.html","","<p>Range serialization/deserialization\n"],["Rational","","Rational.html","",""],["Regexp","","Regexp.html","","<p>Regexp serialization/deserialization\n"],["Struct","","Struct.html","","<p>Struct serialization/deserialization\n"],["Symbol","","Symbol.html","","<p>Symbol serialization/deserialization\n"],["Time","","Time.html","","<p>Time serialization/deserialization\n"],["[]","JSON","JSON.html#method-c-5B-5D","(object, opts = {})","<p>If <em>object</em> is string-like, parse the string and return the parsed\nresult as a Ruby data structure. Otherwise …\n"],["[]","JSON::GenericObject","JSON/GenericObject.html#method-i-5B-5D","(name)",""],["[]","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-5B-5D","(name)","<p>Return the value returned by method <code>name</code>.\n"],["[]=","JSON::GenericObject","JSON/GenericObject.html#method-i-5B-5D-3D","(name, value)",""],["allow_nan?","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-allow_nan-3F","()","<p>Returns true if NaN, Infinity, and -Infinity should be considered as valid\nJSON and output.\n"],["as_json","BigDecimal","BigDecimal.html#method-i-as_json","(*)",""],["as_json","Complex","Complex.html#method-i-as_json","(*)",""],["as_json","Date","Date.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","DateTime","DateTime.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Exception","Exception.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","JSON::GenericObject","JSON/GenericObject.html#method-i-as_json","(*)",""],["as_json","OpenStruct","OpenStruct.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Range","Range.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Rational","Rational.html#method-i-as_json","(*)",""],["as_json","Regexp","Regexp.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Struct","Struct.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Symbol","Symbol.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Time","Time.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["ascii_only?","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-ascii_only-3F","()","<p>Returns true, if only ASCII characters should be generated. Otherwise\nreturns false.\n"],["check_circular?","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-check_circular-3F","()","<p>Returns true, if circular data structures are checked, otherwise returns\nfalse.\n"],["configure","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-configure","(opts)","<p>Configure this State instance with the Hash <em>opts</em>, and return\nitself.\n"],["const_defined_in?","JSON","JSON.html#method-c-const_defined_in-3F","(modul, constant)",""],["dump","JSON","JSON.html#method-i-dump","(obj, anIO = nil, limit = nil)","<p>Dumps <em>obj</em> as a JSON string, i.e. calls generate on the object and\nreturns the result.\n<p>If anIO (an IO-like …\n"],["fast_generate","JSON","JSON.html#method-i-fast_generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. This method disables the checks …\n"],["from_state","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-c-from_state","(opts)","<p>Creates a State object from <em>opts</em>, which ought to be Hash to create\na new State instance configured by …\n"],["generate","JSON","JSON.html#method-i-generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. <em>state</em> is * a JSON::State object, …\n"],["generate","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-generate","(obj)","<p>Generates a valid JSON document from object <code>obj</code> and returns\nthe result. If no valid JSON document can …\n"],["iconv","JSON","JSON.html#method-c-iconv","(to, from, string)","<p>Encodes string using Ruby’s <em>String.encode</em>\n"],["included","JSON::Pure::Generator::GeneratorMethods::String","JSON/Pure/Generator/GeneratorMethods/String.html#method-c-included","(modul)","<p>Extends <em>modul</em> with the String::Extend module.\n"],["json_creatable?","Class","Class.html#method-i-json_creatable-3F","()","<p>Returns true if this class can be used to create an instance from a\nserialised JSON string. The class …\n"],["json_create","BigDecimal","BigDecimal.html#method-c-json_create","(object)",""],["json_create","Complex","Complex.html#method-c-json_create","(object)",""],["json_create","Date","Date.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code> and Day of Calendar Reform\n<code>sg</code> to …\n"],["json_create","DateTime","DateTime.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting year <code>y</code>, month\n<code>m</code>, day <code>d</code>, hour <code>H</code>, minute\n<code>M</code>, second <code>S</code>, offset <code>of</code> …\n"],["json_create","Exception","Exception.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Exception object with message\n<code>m</code> and backtrace <code>b</code> serialized …\n"],["json_create","JSON::GenericObject","JSON/GenericObject.html#method-c-json_create","(data)",""],["json_create","JSON::Pure::Generator::GeneratorMethods::String::Extend","JSON/Pure/Generator/GeneratorMethods/String/Extend.html#method-i-json_create","(o)","<p>Raw Strings are JSON Objects (the raw bytes are stored in an array for the\nkey “raw”). The …\n"],["json_create","OpenStruct","OpenStruct.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Struct object with values\n<code>v</code> serialized by <code>to_json</code>.\n"],["json_create","Range","Range.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Range object with arguments\n<code>a</code> serialized by <code>to_json</code>.\n"],["json_create","Rational","Rational.html#method-c-json_create","(object)",""],["json_create","Regexp","Regexp.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Regexp object with source\n<code>s</code> (Regexp or String) and options …\n"],["json_create","Struct","Struct.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Struct object with values\n<code>v</code> serialized by <code>to_json</code>.\n"],["json_create","Symbol","Symbol.html#method-c-json_create","(o)","<p>Deserializes JSON string by converting the <code>string</code> value stored\nin the object to a Symbol\n"],["json_create","Time","Time.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting time since epoch to Time\n"],["load","JSON","JSON.html#method-i-load","(source, proc = nil)","<p>Load a ruby data structure from a JSON <em>source</em> and return it. A\nsource can either be a string-like object, …\n"],["merge","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-merge","(opts)",""],["new","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-c-new","(opts = {})","<p>Instantiates a new State object, configured by <em>opts</em>.\n<p><em>opts</em> can have the following keys:\n<p><strong>indent</strong>: a string ...\n"],["new","JSON::Pure::Parser","JSON/Pure/Parser.html#method-c-new","(source, opts = {})","<p>Creates a new JSON::Pure::Parser instance for the string <em>source</em>.\n<p>It will be configured by the <em>opts</em> hash. …\n"],["parse","JSON","JSON.html#method-i-parse","(source, opts = {})","<p>Parse the JSON document <em>source</em> into a Ruby data structure and\nreturn it.\n<p><em>opts</em> can have the following keys: ...\n"],["parse","JSON::Pure::Parser","JSON/Pure/Parser.html#method-i-parse","()","<p>Parses the current JSON string <em>source</em> and returns the complete\ndata structure as a result.\n"],["parse!","JSON","JSON.html#method-i-parse-21","(source, opts = {})","<p>Parse the JSON document <em>source</em> into a Ruby data structure and\nreturn it. The bang version of the parse …\n"],["pretty_generate","JSON","JSON.html#method-i-pretty_generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. The returned document is a prettier …\n"],["quirks_mode?","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-quirks_mode-3F","()","<p>Returns true, if quirks mode is enabled. Otherwise returns false.\n"],["quirks_mode?","JSON::Pure::Parser","JSON/Pure/Parser.html#method-i-quirks_mode-3F","()",""],["recurse_proc","JSON","JSON.html#method-i-recurse_proc","(result, &proc)","<p>Recursively calls passed <em>Proc</em> if the parsed data structure is an\n<em>Array</em> or <em>Hash</em>\n"],["reset","JSON::Pure::Parser","JSON/Pure/Parser.html#method-i-reset","()",""],["restore","JSON","JSON.html#method-c-restore","(source, proc = nil)",""],["to_h","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-to_h","()","<p>Returns the configuration instance variables as a hash, that can be passed\nto the configure method.\n"],["to_hash","JSON::GenericObject","JSON/GenericObject.html#method-i-to_hash","()",""],["to_json","BigDecimal","BigDecimal.html#method-i-to_json","(*)",""],["to_json","Complex","Complex.html#method-i-to_json","(*)",""],["to_json","Date","Date.html#method-i-to_json","(*args)","<p>Stores class name (Date) with Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code> and Day of Calendar Reform\n<code>sg</code> as JSON string …\n"],["to_json","DateTime","DateTime.html#method-i-to_json","(*args)","<p>Stores class name (DateTime) with Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code>, hour <code>H</code>, minute\n<code>M</code>, second <code>S</code>, offset  …\n"],["to_json","Exception","Exception.html#method-i-to_json","(*args)","<p>Stores class name (Exception) with message <code>m</code> and backtrace\narray <code>b</code> as JSON string\n"],["to_json","JSON::GenericObject","JSON/GenericObject.html#method-i-to_json","(*a)",""],["to_json","JSON::Pure::Generator::GeneratorMethods::Array","JSON/Pure/Generator/GeneratorMethods/Array.html#method-i-to_json","(state = nil, *)","<p>Returns a JSON string containing a JSON array, that is unparsed from this\nArray instance. <em>state</em> is a …\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::FalseClass","JSON/Pure/Generator/GeneratorMethods/FalseClass.html#method-i-to_json","(*)","<p>Returns a JSON string for false: ‘false’.\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::Float","JSON/Pure/Generator/GeneratorMethods/Float.html#method-i-to_json","(state = nil, *)","<p>Returns a JSON string representation for this Float number.\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::Hash","JSON/Pure/Generator/GeneratorMethods/Hash.html#method-i-to_json","(state = nil, *)","<p>Returns a JSON string containing a JSON object, that is unparsed from this\nHash instance. <em>state</em> is a …\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::Integer","JSON/Pure/Generator/GeneratorMethods/Integer.html#method-i-to_json","(*)","<p>Returns a JSON string representation for this Integer number.\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::NilClass","JSON/Pure/Generator/GeneratorMethods/NilClass.html#method-i-to_json","(*)","<p>Returns a JSON string for nil: ‘null’.\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::Object","JSON/Pure/Generator/GeneratorMethods/Object.html#method-i-to_json","(*)","<p>Converts this object to a string (calling #to_s), converts it to a JSON\nstring, and returns the result. …\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::String","JSON/Pure/Generator/GeneratorMethods/String.html#method-i-to_json","(state = nil, *args)","<p>This string should be encoded with UTF-8 A call to this method returns a\nJSON string encoded with UTF16 …\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::TrueClass","JSON/Pure/Generator/GeneratorMethods/TrueClass.html#method-i-to_json","(*)","<p>Returns a JSON string for true: ‘true’.\n"],["to_json","OpenStruct","OpenStruct.html#method-i-to_json","(*args)","<p>Stores class name (OpenStruct) with this struct’s values <code>v</code> as\na JSON string.\n"],["to_json","Range","Range.html#method-i-to_json","(*args)","<p>Stores class name (Range) with JSON array of arguments <code>a</code> which\ninclude <code>first</code> (integer), <code>last</code> (integer), …\n"],["to_json","Rational","Rational.html#method-i-to_json","(*)",""],["to_json","Regexp","Regexp.html#method-i-to_json","(*)","<p>Stores class name (Regexp) with options <code>o</code> and source\n<code>s</code> (Regexp or String) as JSON string\n"],["to_json","Struct","Struct.html#method-i-to_json","(*args)","<p>Stores class name (Struct) with Struct values <code>v</code> as a JSON\nstring. Only named structs are supported.\n"],["to_json","Symbol","Symbol.html#method-i-to_json","(*a)","<p>Stores class name (Symbol) with String representation of Symbol as a JSON\nstring.\n"],["to_json","Time","Time.html#method-i-to_json","(*args)","<p>Stores class name (Time) with number of seconds since epoch and number of\nmicroseconds for Time as JSON …\n"],["to_json_raw","JSON::Pure::Generator::GeneratorMethods::String","JSON/Pure/Generator/GeneratorMethods/String.html#method-i-to_json_raw","(*args)","<p>This method creates a JSON text from the result of a call to\nto_json_raw_object of this String.\n"],["to_json_raw_object","JSON::Pure::Generator::GeneratorMethods::String","JSON/Pure/Generator/GeneratorMethods/String.html#method-i-to_json_raw_object","()","<p>This method creates a raw object hash, that can be nested into other data\nstructures and will be unparsed …\n"],["wrap","JSON::JSONError","JSON/JSONError.html#method-c-wrap","(exception)",""],["|","JSON::GenericObject","JSON/GenericObject.html#method-i-7C","(other)",""],["README","","README_rdoc.html","","<p>JSON implementation for Ruby <img src=\"https://secure.travis-ci.org/flori/json.png\" />\n<p>Description\n<p>This …\n"]]}}