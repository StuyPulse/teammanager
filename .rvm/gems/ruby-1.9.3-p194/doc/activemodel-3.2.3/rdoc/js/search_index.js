var search_data = {"index":{"searchIndex":["activemodel","attributemethods","classmethods","attributemethodmatcher","blockvalidator","callbacks","conversion","dirty","eachvalidator","errors","lint","tests","massassignmentsecurity","blacklist","classmethods","error","loggersanitizer","permissionset","sanitizer","strictsanitizer","whitelist","missingattributeerror","name","naming","observer","observerarray","observing","classmethods","securepassword","classmethods","instancemethodsonactivation","serialization","serializers","json","xml","strictvalidationfailed","translation","validations","acceptancevalidator","callbacks","classmethods","classmethods","confirmationvalidator","exclusionvalidator","formatvalidator","helpermethods","inclusionvalidator","lengthvalidator","numericalityvalidator","presencevalidator","withvalidator","validator","+()","[]()","[]=()","_validates_default_keys()","accessible_attributes()","active_authorizer()","active_authorizers()","add()","add_observer()","add_on_blank()","add_on_empty()","added?()","after_validation()","alias_attribute()","as_json()","as_json()","attr_accessible()","attr_protected()","attribute_method?()","attribute_method?()","attribute_method_affix()","attribute_method_prefix()","attribute_method_suffix()","attribute_missing()","attributes_protected_by_default()","attributes_protected_by_default()","authenticate()","before_validation()","blank?()","changed()","changed?()","changed_attributes()","changes()","check_validity!()","check_validity!()","check_validity!()","check_validity!()","check_validity!()","check_validity!()","clear()","count()","count_observers()","debug_protected_attribute_removal()","define_attribute_method()","define_attribute_methods()","define_model_callbacks()","delete()","deny?()","deny?()","deny?()","disable()","disabled_for?()","disabled_for?()","disabled_observer_stack()","disabled_observers()","each()","each_subclass_array()","empty?()","enable()","end_transaction()","errors()","extended()","filtered_options()","from_json()","from_xml()","full_message()","full_messages()","generate_message()","get()","has_key?()","has_secure_password()","human()","human_attribute_name()","i18n_scope()","include?()","include?()","inherited()","inherited()","initialize_dup()","insensitive_attributes()","instance_method_already_implemented?()","instantiate_observers()","invalid?()","keys()","kind()","kind()","logger?()","lookup_ancestors()","mass_assignment_authorizer()","mass_assignment_sanitizer=()","match()","method_missing()","method_name()","model_name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","notify_observers()","observe()","observed_class()","observed_classes()","observer_class_for()","observer_instances()","observers()","observers=()","param_key()","parse_raw_value_as_a_number()","parse_raw_value_as_an_integer()","password=()","plain?()","plural()","previous_changes()","process_removed_attributes()","process_removed_attributes()","process_removed_attributes()","protected_attributes()","remove_multiparameter_id()","respond_to?()","respond_to_without_attributes?()","route_key()","run_validations!()","run_validations!()","sanitize()","sanitize_for_mass_assignment()","serializable_hash()","set()","set_enablement()","setup()","setup()","singular()","singular_route_key()","size()","start_transaction()","test_errors_aref()","test_errors_full_messages()","test_model_naming()","test_persisted?()","test_to_key()","test_to_param()","test_to_partial_path()","test_valid?()","to_a()","to_hash()","to_key()","to_model()","to_param()","to_partial_path()","to_xml()","to_xml()","transaction()","uncountable?()","undefine_attribute_methods()","valid?()","validate()","validate()","validate()","validate()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validate_each()","validates()","validates!()","validates_acceptance_of()","validates_confirmation_of()","validates_each()","validates_exclusion_of()","validates_format_of()","validates_inclusion_of()","validates_length_of()","validates_numericality_of()","validates_presence_of()","validates_size_of()","validates_with()","validates_with()","validators()","validators_on()","values()"],"longSearchIndex":["activemodel","activemodel::attributemethods","activemodel::attributemethods::classmethods","activemodel::attributemethods::classmethods::attributemethodmatcher","activemodel::blockvalidator","activemodel::callbacks","activemodel::conversion","activemodel::dirty","activemodel::eachvalidator","activemodel::errors","activemodel::lint","activemodel::lint::tests","activemodel::massassignmentsecurity","activemodel::massassignmentsecurity::blacklist","activemodel::massassignmentsecurity::classmethods","activemodel::massassignmentsecurity::error","activemodel::massassignmentsecurity::loggersanitizer","activemodel::massassignmentsecurity::permissionset","activemodel::massassignmentsecurity::sanitizer","activemodel::massassignmentsecurity::strictsanitizer","activemodel::massassignmentsecurity::whitelist","activemodel::missingattributeerror","activemodel::name","activemodel::naming","activemodel::observer","activemodel::observerarray","activemodel::observing","activemodel::observing::classmethods","activemodel::securepassword","activemodel::securepassword::classmethods","activemodel::securepassword::instancemethodsonactivation","activemodel::serialization","activemodel::serializers","activemodel::serializers::json","activemodel::serializers::xml","activemodel::strictvalidationfailed","activemodel::translation","activemodel::validations","activemodel::validations::acceptancevalidator","activemodel::validations::callbacks","activemodel::validations::callbacks::classmethods","activemodel::validations::classmethods","activemodel::validations::confirmationvalidator","activemodel::validations::exclusionvalidator","activemodel::validations::formatvalidator","activemodel::validations::helpermethods","activemodel::validations::inclusionvalidator","activemodel::validations::lengthvalidator","activemodel::validations::numericalityvalidator","activemodel::validations::presencevalidator","activemodel::validations::withvalidator","activemodel::validator","activemodel::massassignmentsecurity::permissionset#+()","activemodel::errors#[]()","activemodel::errors#[]=()","activemodel::validations::classmethods#_validates_default_keys()","activemodel::massassignmentsecurity::classmethods#accessible_attributes()","activemodel::massassignmentsecurity::classmethods#active_authorizer()","activemodel::massassignmentsecurity::classmethods#active_authorizers()","activemodel::errors#add()","activemodel::observing::classmethods#add_observer()","activemodel::errors#add_on_blank()","activemodel::errors#add_on_empty()","activemodel::errors#added?()","activemodel::validations::callbacks::classmethods#after_validation()","activemodel::attributemethods::classmethods#alias_attribute()","activemodel::errors#as_json()","activemodel::serializers::json#as_json()","activemodel::massassignmentsecurity::classmethods#attr_accessible()","activemodel::massassignmentsecurity::classmethods#attr_protected()","activemodel::attributemethods#attribute_method?()","activemodel::validations::classmethods#attribute_method?()","activemodel::attributemethods::classmethods#attribute_method_affix()","activemodel::attributemethods::classmethods#attribute_method_prefix()","activemodel::attributemethods::classmethods#attribute_method_suffix()","activemodel::attributemethods#attribute_missing()","activemodel::massassignmentsecurity::classmethods#attributes_protected_by_default()","activemodel::securepassword::classmethods::attributes_protected_by_default()","activemodel::securepassword::instancemethodsonactivation#authenticate()","activemodel::validations::callbacks::classmethods#before_validation()","activemodel::errors#blank?()","activemodel::dirty#changed()","activemodel::dirty#changed?()","activemodel::dirty#changed_attributes()","activemodel::dirty#changes()","activemodel::eachvalidator#check_validity!()","activemodel::validations::exclusionvalidator#check_validity!()","activemodel::validations::formatvalidator#check_validity!()","activemodel::validations::inclusionvalidator#check_validity!()","activemodel::validations::lengthvalidator#check_validity!()","activemodel::validations::numericalityvalidator#check_validity!()","activemodel::errors#clear()","activemodel::errors#count()","activemodel::observing::classmethods#count_observers()","activemodel::massassignmentsecurity::sanitizer#debug_protected_attribute_removal()","activemodel::attributemethods::classmethods#define_attribute_method()","activemodel::attributemethods::classmethods#define_attribute_methods()","activemodel::callbacks#define_model_callbacks()","activemodel::errors#delete()","activemodel::massassignmentsecurity::blacklist#deny?()","activemodel::massassignmentsecurity::permissionset#deny?()","activemodel::massassignmentsecurity::whitelist#deny?()","activemodel::observerarray#disable()","activemodel::observer#disabled_for?()","activemodel::observerarray#disabled_for?()","activemodel::observerarray#disabled_observer_stack()","activemodel::observerarray#disabled_observers()","activemodel::errors#each()","activemodel::observerarray#each_subclass_array()","activemodel::errors#empty?()","activemodel::observerarray#enable()","activemodel::observerarray#end_transaction()","activemodel::validations#errors()","activemodel::callbacks::extended()","activemodel::validations::numericalityvalidator#filtered_options()","activemodel::serializers::json#from_json()","activemodel::serializers::xml#from_xml()","activemodel::errors#full_message()","activemodel::errors#full_messages()","activemodel::errors#generate_message()","activemodel::errors#get()","activemodel::errors#has_key?()","activemodel::securepassword::classmethods#has_secure_password()","activemodel::name#human()","activemodel::translation#human_attribute_name()","activemodel::translation#i18n_scope()","activemodel::errors#include?()","activemodel::massassignmentsecurity::permissionset#include?()","activemodel::observing::classmethods#inherited()","activemodel::validations::classmethods#inherited()","activemodel::errors#initialize_dup()","activemodel::massassignmentsecurity::strictsanitizer#insensitive_attributes()","activemodel::attributemethods::classmethods#instance_method_already_implemented?()","activemodel::observing::classmethods#instantiate_observers()","activemodel::validations#invalid?()","activemodel::errors#keys()","activemodel::validator::kind()","activemodel::validator#kind()","activemodel::massassignmentsecurity::loggersanitizer#logger?()","activemodel::translation#lookup_ancestors()","activemodel::massassignmentsecurity#mass_assignment_authorizer()","activemodel::massassignmentsecurity::classmethods#mass_assignment_sanitizer=()","activemodel::attributemethods::classmethods::attributemethodmatcher#match()","activemodel::attributemethods#method_missing()","activemodel::attributemethods::classmethods::attributemethodmatcher#method_name()","activemodel::naming#model_name()","activemodel::attributemethods::classmethods::attributemethodmatcher::new()","activemodel::blockvalidator::new()","activemodel::eachvalidator::new()","activemodel::errors::new()","activemodel::massassignmentsecurity::loggersanitizer::new()","activemodel::massassignmentsecurity::sanitizer::new()","activemodel::name::new()","activemodel::observer::new()","activemodel::observerarray::new()","activemodel::validations::acceptancevalidator::new()","activemodel::validations::lengthvalidator::new()","activemodel::validator::new()","activemodel::observing::classmethods#notify_observers()","activemodel::observer::observe()","activemodel::observer::observed_class()","activemodel::observer::observed_classes()","activemodel::observerarray#observer_class_for()","activemodel::observing::classmethods#observer_instances()","activemodel::observing::classmethods#observers()","activemodel::observing::classmethods#observers=()","activemodel::naming::param_key()","activemodel::validations::numericalityvalidator#parse_raw_value_as_a_number()","activemodel::validations::numericalityvalidator#parse_raw_value_as_an_integer()","activemodel::securepassword::instancemethodsonactivation#password=()","activemodel::attributemethods::classmethods::attributemethodmatcher#plain?()","activemodel::naming::plural()","activemodel::dirty#previous_changes()","activemodel::massassignmentsecurity::loggersanitizer#process_removed_attributes()","activemodel::massassignmentsecurity::sanitizer#process_removed_attributes()","activemodel::massassignmentsecurity::strictsanitizer#process_removed_attributes()","activemodel::massassignmentsecurity::classmethods#protected_attributes()","activemodel::massassignmentsecurity::permissionset#remove_multiparameter_id()","activemodel::attributemethods#respond_to?()","activemodel::attributemethods#respond_to_without_attributes?()","activemodel::naming::route_key()","activemodel::validations#run_validations!()","activemodel::validations::callbacks#run_validations!()","activemodel::massassignmentsecurity::sanitizer#sanitize()","activemodel::massassignmentsecurity#sanitize_for_mass_assignment()","activemodel::serialization#serializable_hash()","activemodel::errors#set()","activemodel::observerarray#set_enablement()","activemodel::validations::acceptancevalidator#setup()","activemodel::validations::confirmationvalidator#setup()","activemodel::naming::singular()","activemodel::naming::singular_route_key()","activemodel::errors#size()","activemodel::observerarray#start_transaction()","activemodel::lint::tests#test_errors_aref()","activemodel::lint::tests#test_errors_full_messages()","activemodel::lint::tests#test_model_naming()","activemodel::lint::tests#test_persisted?()","activemodel::lint::tests#test_to_key()","activemodel::lint::tests#test_to_param()","activemodel::lint::tests#test_to_partial_path()","activemodel::lint::tests#test_valid?()","activemodel::errors#to_a()","activemodel::errors#to_hash()","activemodel::conversion#to_key()","activemodel::conversion#to_model()","activemodel::conversion#to_param()","activemodel::conversion#to_partial_path()","activemodel::errors#to_xml()","activemodel::serializers::xml#to_xml()","activemodel::observerarray#transaction()","activemodel::naming::uncountable?()","activemodel::attributemethods::classmethods#undefine_attribute_methods()","activemodel::validations#valid?()","activemodel::eachvalidator#validate()","activemodel::validations::classmethods#validate()","activemodel::validations::presencevalidator#validate()","activemodel::validator#validate()","activemodel::eachvalidator#validate_each()","activemodel::validations::acceptancevalidator#validate_each()","activemodel::validations::confirmationvalidator#validate_each()","activemodel::validations::exclusionvalidator#validate_each()","activemodel::validations::formatvalidator#validate_each()","activemodel::validations::inclusionvalidator#validate_each()","activemodel::validations::lengthvalidator#validate_each()","activemodel::validations::numericalityvalidator#validate_each()","activemodel::validations::withvalidator#validate_each()","activemodel::validations::classmethods#validates()","activemodel::validations::classmethods#validates!()","activemodel::validations::helpermethods#validates_acceptance_of()","activemodel::validations::helpermethods#validates_confirmation_of()","activemodel::validations::classmethods#validates_each()","activemodel::validations::helpermethods#validates_exclusion_of()","activemodel::validations::helpermethods#validates_format_of()","activemodel::validations::helpermethods#validates_inclusion_of()","activemodel::validations::helpermethods#validates_length_of()","activemodel::validations::helpermethods#validates_numericality_of()","activemodel::validations::helpermethods#validates_presence_of()","activemodel::validations::helpermethods#validates_size_of()","activemodel::validations#validates_with()","activemodel::validations::classmethods#validates_with()","activemodel::validations::classmethods#validators()","activemodel::validations::classmethods#validators_on()","activemodel::errors#values()"],"info":[["ActiveModel","","ActiveModel.html","",""],["ActiveModel::AttributeMethods","","ActiveModel/AttributeMethods.html","","<p>Active Model Attribute Methods\n<p><code>ActiveModel::AttributeMethods</code> provides a way to add prefixes\nand suffixes ...\n"],["ActiveModel::AttributeMethods::ClassMethods","","ActiveModel/AttributeMethods/ClassMethods.html","",""],["ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","","ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html","",""],["ActiveModel::BlockValidator","","ActiveModel/BlockValidator.html","","<p><code>BlockValidator</code> is a special <code>EachValidator</code> which\nreceives a block on initialization and call this block ...\n"],["ActiveModel::Callbacks","","ActiveModel/Callbacks.html","","<p>Active Model Callbacks\n<p>Provides an interface for any class to have Active Record like callbacks.\n<p>Like the …\n"],["ActiveModel::Conversion","","ActiveModel/Conversion.html","","<p>Active Model Conversions\n<p>Handles default conversions: to_model, to_key, to_param, and\nto_partial_path. …\n"],["ActiveModel::Dirty","","ActiveModel/Dirty.html","","<p>Active Model Dirty\n<p>Provides a way to track changes in your object in the same way as Active\nRecord does. …\n"],["ActiveModel::EachValidator","","ActiveModel/EachValidator.html","","<p><code>EachValidator</code> is a validator which iterates through the\nattributes given in the options hash invoking ...\n"],["ActiveModel::Errors","","ActiveModel/Errors.html","","<p>Active Model Errors\n<p>Provides a modified <code>OrderedHash</code> that you can include in your\nobject for handling error …\n"],["ActiveModel::Lint","","ActiveModel/Lint.html","",""],["ActiveModel::Lint::Tests","","ActiveModel/Lint/Tests.html","","<p>Active Model Lint Tests\n<p>You can test whether an object is compliant with the Active Model API by\nincluding …\n"],["ActiveModel::MassAssignmentSecurity","","ActiveModel/MassAssignmentSecurity.html","","<p>Active Model Mass-Assignment Security\n"],["ActiveModel::MassAssignmentSecurity::BlackList","","ActiveModel/MassAssignmentSecurity/BlackList.html","",""],["ActiveModel::MassAssignmentSecurity::ClassMethods","","ActiveModel/MassAssignmentSecurity/ClassMethods.html","","<p>Mass assignment security provides an interface for protecting attributes\nfrom end-user assignment. For …\n"],["ActiveModel::MassAssignmentSecurity::Error","","ActiveModel/MassAssignmentSecurity/Error.html","",""],["ActiveModel::MassAssignmentSecurity::LoggerSanitizer","","ActiveModel/MassAssignmentSecurity/LoggerSanitizer.html","",""],["ActiveModel::MassAssignmentSecurity::PermissionSet","","ActiveModel/MassAssignmentSecurity/PermissionSet.html","",""],["ActiveModel::MassAssignmentSecurity::Sanitizer","","ActiveModel/MassAssignmentSecurity/Sanitizer.html","",""],["ActiveModel::MassAssignmentSecurity::StrictSanitizer","","ActiveModel/MassAssignmentSecurity/StrictSanitizer.html","",""],["ActiveModel::MassAssignmentSecurity::WhiteList","","ActiveModel/MassAssignmentSecurity/WhiteList.html","",""],["ActiveModel::MissingAttributeError","","ActiveModel/MissingAttributeError.html","",""],["ActiveModel::Name","","ActiveModel/Name.html","",""],["ActiveModel::Naming","","ActiveModel/Naming.html","","<p>Active Model Naming\n<p>Creates a <code>model_name</code> method on your object.\n<p>To implement, just extend ActiveModel::Naming …\n"],["ActiveModel::Observer","","ActiveModel/Observer.html","","<p>Active Model Observers\n<p>Observer classes respond to life cycle callbacks to implement trigger-like\nbehavior …\n"],["ActiveModel::ObserverArray","","ActiveModel/ObserverArray.html","","<p>Stores the enabled/disabled state of individual observers for a particular\nmodel class.\n"],["ActiveModel::Observing","","ActiveModel/Observing.html","",""],["ActiveModel::Observing::ClassMethods","","ActiveModel/Observing/ClassMethods.html","",""],["ActiveModel::SecurePassword","","ActiveModel/SecurePassword.html","",""],["ActiveModel::SecurePassword::ClassMethods","","ActiveModel/SecurePassword/ClassMethods.html","",""],["ActiveModel::SecurePassword::InstanceMethodsOnActivation","","ActiveModel/SecurePassword/InstanceMethodsOnActivation.html","",""],["ActiveModel::Serialization","","ActiveModel/Serialization.html","","<p>Active Model Serialization\n<p>Provides a basic serialization to a serializable_hash for your object.\n<p>A minimal …\n"],["ActiveModel::Serializers","","ActiveModel/Serializers.html","","<p>Active Model JSON Serializer\n<p>Active Model XML Serializer\n"],["ActiveModel::Serializers::JSON","","ActiveModel/Serializers/JSON.html","",""],["ActiveModel::Serializers::Xml","","ActiveModel/Serializers/Xml.html","",""],["ActiveModel::StrictValidationFailed","","ActiveModel/StrictValidationFailed.html","",""],["ActiveModel::Translation","","ActiveModel/Translation.html","","<p>Active Model Translation\n<p>Provides integration between your object and the Rails internationalization\n(i18n) …\n"],["ActiveModel::Validations","","ActiveModel/Validations.html","","<p>Active Model Validations\n<p>Provides a full validation framework to your objects.\n<p>A minimal implementation …\n"],["ActiveModel::Validations::AcceptanceValidator","","ActiveModel/Validations/AcceptanceValidator.html","",""],["ActiveModel::Validations::Callbacks","","ActiveModel/Validations/Callbacks.html","",""],["ActiveModel::Validations::Callbacks::ClassMethods","","ActiveModel/Validations/Callbacks/ClassMethods.html","",""],["ActiveModel::Validations::ClassMethods","","ActiveModel/Validations/ClassMethods.html","",""],["ActiveModel::Validations::ConfirmationValidator","","ActiveModel/Validations/ConfirmationValidator.html","",""],["ActiveModel::Validations::ExclusionValidator","","ActiveModel/Validations/ExclusionValidator.html","",""],["ActiveModel::Validations::FormatValidator","","ActiveModel/Validations/FormatValidator.html","",""],["ActiveModel::Validations::HelperMethods","","ActiveModel/Validations/HelperMethods.html","",""],["ActiveModel::Validations::InclusionValidator","","ActiveModel/Validations/InclusionValidator.html","",""],["ActiveModel::Validations::LengthValidator","","ActiveModel/Validations/LengthValidator.html","",""],["ActiveModel::Validations::NumericalityValidator","","ActiveModel/Validations/NumericalityValidator.html","",""],["ActiveModel::Validations::PresenceValidator","","ActiveModel/Validations/PresenceValidator.html","",""],["ActiveModel::Validations::WithValidator","","ActiveModel/Validations/WithValidator.html","",""],["ActiveModel::Validator","","ActiveModel/Validator.html","","<p>Active Model Validator\n<p>A simple base class that can be used along with\nActiveModel::Validations::ClassMethods.validates_with …\n"],["+","ActiveModel::MassAssignmentSecurity::PermissionSet","ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-2B","(values)",""],["[]","ActiveModel::Errors","ActiveModel/Errors.html#method-i-5B-5D","(attribute)","<p>When passed a symbol or a name of a method, returns an array of errors for\nthe method.\n\n<pre>p.errors[:name] ...</pre>\n"],["[]=","ActiveModel::Errors","ActiveModel/Errors.html#method-i-5B-5D-3D","(attribute, error)","<p>Adds to the supplied attribute the supplied error message.\n\n<pre>p.errors[:name] = &quot;must be set&quot;\np.errors[:name] ...</pre>\n"],["_validates_default_keys","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-_validates_default_keys","()","<p>When creating custom validators, it might be useful to be able to specify\nadditional default keys. This …\n"],["accessible_attributes","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-accessible_attributes","(role = :default)",""],["active_authorizer","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-active_authorizer","()",""],["active_authorizers","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-active_authorizers","()",""],["add","ActiveModel::Errors","ActiveModel/Errors.html#method-i-add","(attribute, message = nil, options = {})","<p>Adds <code>message</code> to the error messages on <code>attribute</code>.\nMore than one error can be added to the same <code>attribute</code> …\n"],["add_observer","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-add_observer","(observer)","<p>Add a new observer to the pool. The new observer needs to respond to\n‘update’, otherwise it raises an …\n"],["add_on_blank","ActiveModel::Errors","ActiveModel/Errors.html#method-i-add_on_blank","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is blank (using Object#blank? …\n"],["add_on_empty","ActiveModel::Errors","ActiveModel/Errors.html#method-i-add_on_empty","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is empty.\n"],["added?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-added-3F","(attribute, message = nil, options = {})","<p>Returns true if an error on the attribute with the given message is\npresent, false otherwise. <code>message</code> …\n"],["after_validation","ActiveModel::Validations::Callbacks::ClassMethods","ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-after_validation","(*args, &block)",""],["alias_attribute","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-alias_attribute","(new_name, old_name)",""],["as_json","ActiveModel::Errors","ActiveModel/Errors.html#method-i-as_json","(options=nil)","<p>Returns an ActiveSupport::OrderedHash that can be used as the JSON\nrepresentation for this object.\n"],["as_json","ActiveModel::Serializers::JSON","ActiveModel/Serializers/JSON.html#method-i-as_json","(options = nil)","<p>Returns a hash representing the model. Some configuration can be passed\nthrough <code>options</code>.\n<p>The option <code>include_root_in_json</code> …\n"],["attr_accessible","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_accessible","(*args)","<p>Specifies a white list of model attributes that can be set via\nmass-assignment.\n<p>Like <code>attr_protected</code>, a …\n"],["attr_protected","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_protected","(*args)","<p>Attributes named in this macro are protected from mass-assignment whenever\nattributes are sanitized before …\n"],["attribute_method?","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-attribute_method-3F","(attr_name)",""],["attribute_method?","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Check if method is an attribute method or not.\n"],["attribute_method_affix","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_affix","(*affixes)","<p>Declares a method available for all attributes with the given prefix and\nsuffix. Uses <code>method_missing</code> …\n"],["attribute_method_prefix","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_prefix","(*prefixes)","<p>Declares a method available for all attributes with the given prefix. Uses\n<code>method_missing</code> and <code>respond_to</code> …\n"],["attribute_method_suffix","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_suffix","(*suffixes)","<p>Declares a method available for all attributes with the given suffix. Uses\n<code>method_missing</code> and <code>respond_to</code> …\n"],["attribute_missing","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-attribute_missing","(match, *args, &block)","<p>attribute_missing is like method_missing, but for attributes. When\nmethod_missing is called we check …\n"],["attributes_protected_by_default","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attributes_protected_by_default","()",""],["attributes_protected_by_default","ActiveModel::SecurePassword::ClassMethods","ActiveModel/SecurePassword/ClassMethods.html#method-c-attributes_protected_by_default","()",""],["authenticate","ActiveModel::SecurePassword::InstanceMethodsOnActivation","ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-authenticate","(unencrypted_password)","<p>Returns self if the password is correct, otherwise false.\n"],["before_validation","ActiveModel::Validations::Callbacks::ClassMethods","ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-before_validation","(*args, &block)",""],["blank?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-blank-3F","()",""],["changed","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changed","()","<p>List of attributes with unsaved changes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed</span> <span class=\"ruby-comment\"># =&gt; []</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">'bob'</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["changed?","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changed-3F","()","<p>Returns true if any attribute have unsaved changes, false otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["changed_attributes","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changed_attributes","()","<p>Map of change <code>attr =&gt; original value</code>.\n"],["changes","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-changes","()","<p>Map of changed attrs =&gt; [original value, new value].\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changes</span> <span class=\"ruby-comment\"># =&gt; {}</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">'bob'</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changes</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["check_validity!","ActiveModel::EachValidator","ActiveModel/EachValidator.html#method-i-check_validity-21","()","<p>Hook method that gets called by the initializer allowing verification that\nthe arguments supplied are …\n"],["check_validity!","ActiveModel::Validations::ExclusionValidator","ActiveModel/Validations/ExclusionValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::FormatValidator","ActiveModel/Validations/FormatValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::InclusionValidator","ActiveModel/Validations/InclusionValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::LengthValidator","ActiveModel/Validations/LengthValidator.html#method-i-check_validity-21","()",""],["check_validity!","ActiveModel::Validations::NumericalityValidator","ActiveModel/Validations/NumericalityValidator.html#method-i-check_validity-21","()",""],["clear","ActiveModel::Errors","ActiveModel/Errors.html#method-i-clear","()","<p>Clear the messages\n"],["count","ActiveModel::Errors","ActiveModel/Errors.html#method-i-count","()","<p>Returns the number of error messages.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-string\">&quot;can't be blank&quot;</span>)\n<span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">count</span> <span class=\"ruby-comment\"># =&gt; 1</span>\n<span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["count_observers","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-count_observers","()","<p>Total number of observers.\n"],["debug_protected_attribute_removal","ActiveModel::MassAssignmentSecurity::Sanitizer","ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-i-debug_protected_attribute_removal","(attributes, sanitized_attributes)",""],["define_attribute_method","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_method","(attr_name)",""],["define_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","(attr_names)","<p>Declares the attributes that should be prefixed and suffixed by\nActiveModel::AttributeMethods.\n<p>To use, …\n"],["define_model_callbacks","ActiveModel::Callbacks","ActiveModel/Callbacks.html#method-i-define_model_callbacks","(*callbacks)","<p>define_model_callbacks accepts the same options define_callbacks does, in\ncase you want to overwrite …\n"],["delete","ActiveModel::Errors","ActiveModel/Errors.html#method-i-delete","(key)","<p>Delete messages for <code>key</code>\n"],["deny?","ActiveModel::MassAssignmentSecurity::BlackList","ActiveModel/MassAssignmentSecurity/BlackList.html#method-i-deny-3F","(key)",""],["deny?","ActiveModel::MassAssignmentSecurity::PermissionSet","ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-deny-3F","(key)",""],["deny?","ActiveModel::MassAssignmentSecurity::WhiteList","ActiveModel/MassAssignmentSecurity/WhiteList.html#method-i-deny-3F","(key)",""],["disable","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-disable","(*observers, &block)","<p>Disables one or more observers. This supports multiple forms:\n\n<pre>ORM.observers.disable :user_observer\n  # ...</pre>\n"],["disabled_for?","ActiveModel::Observer","ActiveModel/Observer.html#method-i-disabled_for-3F","(object)",""],["disabled_for?","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-disabled_for-3F","(observer)","<p>Returns true if the given observer is disabled for the model class.\n"],["disabled_observer_stack","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-disabled_observer_stack","()",""],["disabled_observers","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-disabled_observers","()",""],["each","ActiveModel::Errors","ActiveModel/Errors.html#method-i-each","()","<p>Iterates through each error key, value pair in the error messages hash.\nYields the attribute and the …\n"],["each_subclass_array","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-each_subclass_array","()",""],["empty?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-empty-3F","()","<p>Returns true if no errors are found, false otherwise. If the error message\nis a string it can be empty. …\n"],["enable","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-enable","(*observers, &block)","<p>Enables one or more observers. This supports multiple forms:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ORM</span>.<span class=\"ruby-identifier\">observers</span>.<span class=\"ruby-identifier\">enable</span> :<span class=\"ruby-identifier\">user_observer</span>\n  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["end_transaction","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-end_transaction","()",""],["errors","ActiveModel::Validations","ActiveModel/Validations.html#method-i-errors","()","<p>Returns the <code>Errors</code> object that holds all information about\nattribute error messages.\n"],["extended","ActiveModel::Callbacks","ActiveModel/Callbacks.html#method-c-extended","(base)",""],["filtered_options","ActiveModel::Validations::NumericalityValidator","ActiveModel/Validations/NumericalityValidator.html#method-i-filtered_options","(value)",""],["from_json","ActiveModel::Serializers::JSON","ActiveModel/Serializers/JSON.html#method-i-from_json","(json, include_root=include_root_in_json)",""],["from_xml","ActiveModel::Serializers::Xml","ActiveModel/Serializers/Xml.html#method-i-from_xml","(xml)",""],["full_message","ActiveModel::Errors","ActiveModel/Errors.html#method-i-full_message","(attribute, message)","<p>Returns a full message for a given attribute.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">company</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">full_message</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-string\">&quot;is invalid&quot;</span>)  <span class=\"ruby-comment\"># =&gt;</span>\n <span class=\"ruby-operator\">...</span>\n</pre>\n"],["full_messages","ActiveModel::Errors","ActiveModel/Errors.html#method-i-full_messages","()","<p>Returns all the full error messages in an array.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Company</span>\n  <span class=\"ruby-identifier\">validates_presence_of</span> :<span class=\"ruby-identifier\">name</span>, :<span class=\"ruby-identifier\">address</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["generate_message","ActiveModel::Errors","ActiveModel/Errors.html#method-i-generate_message","(attribute, type = :invalid, options = {})","<p>Translates an error message in its default scope\n(<code>activemodel.errors.messages</code>).\n<p>Error messages are first …\n"],["get","ActiveModel::Errors","ActiveModel/Errors.html#method-i-get","(key)","<p>Get messages for <code>key</code>\n"],["has_key?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-has_key-3F","(error)",""],["has_secure_password","ActiveModel::SecurePassword::ClassMethods","ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password","()","<p>Adds methods to set and authenticate against a BCrypt password. This\nmechanism requires you to have a …\n"],["human","ActiveModel::Name","ActiveModel/Name.html#method-i-human","(options={})","<p>Transform the model name into a more humane format, using I18n. By default,\nit will underscore then humanize …\n"],["human_attribute_name","ActiveModel::Translation","ActiveModel/Translation.html#method-i-human_attribute_name","(attribute, options = {})","<p>Transforms attribute names into a more human format, such as “First name”\ninstead of “ …\n"],["i18n_scope","ActiveModel::Translation","ActiveModel/Translation.html#method-i-i18n_scope","()","<p>Returns the <code>i18n_scope</code> for the class. Overwrite if you want\ncustom lookup.\n"],["include?","ActiveModel::Errors","ActiveModel/Errors.html#method-i-include-3F","(error)","<p>Do the error messages include an error with key <code>error</code>?\n"],["include?","ActiveModel::MassAssignmentSecurity::PermissionSet","ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-include-3F","(key)",""],["inherited","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-inherited","(subclass)","<p>Notify observers when the observed class is subclassed.\n"],["inherited","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-inherited","(base)","<p>Copy validators on inheritance.\n"],["initialize_dup","ActiveModel::Errors","ActiveModel/Errors.html#method-i-initialize_dup","(other)",""],["insensitive_attributes","ActiveModel::MassAssignmentSecurity::StrictSanitizer","ActiveModel/MassAssignmentSecurity/StrictSanitizer.html#method-i-insensitive_attributes","()",""],["instance_method_already_implemented?","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)",""],["instantiate_observers","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-instantiate_observers","()","<p>Instantiate the global observers.\n"],["invalid?","ActiveModel::Validations","ActiveModel/Validations.html#method-i-invalid-3F","(context = nil)","<p>Performs the opposite of <code>valid?</code>. Returns true if errors were\nadded, false otherwise.\n"],["keys","ActiveModel::Errors","ActiveModel/Errors.html#method-i-keys","()","<p>Returns all message keys\n"],["kind","ActiveModel::Validator","ActiveModel/Validator.html#method-c-kind","()","<p>Returns the kind of the validator. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">PresenceValidator</span>.<span class=\"ruby-identifier\">kind</span>   <span class=\"ruby-comment\"># =&gt; :presence</span>\n<span class=\"ruby-constant\">UniquenessValidator</span>.<span class=\"ruby-identifier\">kind</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["kind","ActiveModel::Validator","ActiveModel/Validator.html#method-i-kind","()","<p>Return the kind for this validator.\n"],["logger?","ActiveModel::MassAssignmentSecurity::LoggerSanitizer","ActiveModel/MassAssignmentSecurity/LoggerSanitizer.html#method-i-logger-3F","()",""],["lookup_ancestors","ActiveModel::Translation","ActiveModel/Translation.html#method-i-lookup_ancestors","()","<p>When localizing a string, it goes through the lookup returned by this\nmethod, which is used in ActiveModel::Name#human …\n"],["mass_assignment_authorizer","ActiveModel::MassAssignmentSecurity","ActiveModel/MassAssignmentSecurity.html#method-i-mass_assignment_authorizer","(role)",""],["mass_assignment_sanitizer=","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-mass_assignment_sanitizer-3D","(value)",""],["match","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-i-match","(method_name)",""],["method_missing","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-method_missing","(method, *args, &block)","<p>Allows access to the object attributes, which are held in the\n<code>@attributes</code> hash, as though they were first-class …\n"],["method_name","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-i-method_name","(attr_name)",""],["model_name","ActiveModel::Naming","ActiveModel/Naming.html#method-i-model_name","()","<p>Returns an ActiveModel::Name object for module. It can be used to retrieve\nall kinds of naming-related …\n"],["new","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-c-new","(options = {})",""],["new","ActiveModel::BlockValidator","ActiveModel/BlockValidator.html#method-c-new","(options, &block)",""],["new","ActiveModel::EachValidator","ActiveModel/EachValidator.html#method-c-new","(options)","<p>Returns a new validator instance. All options will be available via the\n<code>options</code> reader, however the  …\n"],["new","ActiveModel::Errors","ActiveModel/Errors.html#method-c-new","(base)","<p>Pass in the instance of the object that is using the errors object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">initialize</span>\n    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","ActiveModel::MassAssignmentSecurity::LoggerSanitizer","ActiveModel/MassAssignmentSecurity/LoggerSanitizer.html#method-c-new","(target)",""],["new","ActiveModel::MassAssignmentSecurity::Sanitizer","ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-c-new","(target=nil)",""],["new","ActiveModel::Name","ActiveModel/Name.html#method-c-new","(klass, namespace = nil, name = nil)",""],["new","ActiveModel::Observer","ActiveModel/Observer.html#method-c-new","()","<p>Start observing the declared classes and their subclasses.\n"],["new","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-c-new","(model_class, *args)",""],["new","ActiveModel::Validations::AcceptanceValidator","ActiveModel/Validations/AcceptanceValidator.html#method-c-new","(options)",""],["new","ActiveModel::Validations::LengthValidator","ActiveModel/Validations/LengthValidator.html#method-c-new","(options)",""],["new","ActiveModel::Validator","ActiveModel/Validator.html#method-c-new","(options)","<p>Accepts options that will be made available through the\n<code>options</code> reader.\n"],["notify_observers","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-notify_observers","(*arg)","<p>Notify list of observers of a change.\n"],["observe","ActiveModel::Observer","ActiveModel/Observer.html#method-c-observe","(*models)","<p>Attaches the observer to the supplied model classes.\n"],["observed_class","ActiveModel::Observer","ActiveModel/Observer.html#method-c-observed_class","()","<p>The class observed by default is inferred from the observer’s class name:\n\n<pre>assert_equal Person, PersonObserver.observed_class</pre>\n"],["observed_classes","ActiveModel::Observer","ActiveModel/Observer.html#method-c-observed_classes","()","<p>Returns an array of Classes to observe.\n<p>You can override this instead of using the <code>observe</code> helper.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["observer_class_for","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-observer_class_for","(observer)",""],["observer_instances","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-observer_instances","()","<p>Gets the current observer instances.\n"],["observers","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-observers","()","<p>Gets an array of observers observing this model. The array also provides\n<code>enable</code> and <code>disable</code> methods that …\n"],["observers=","ActiveModel::Observing::ClassMethods","ActiveModel/Observing/ClassMethods.html#method-i-observers-3D","(*values)","<p>Active Model Observers Activation\n<p>Activates the observers assigned. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">ORM</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Observing</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["param_key","ActiveModel::Naming","ActiveModel/Naming.html#method-c-param_key","(record_or_class)","<p>Returns string to use for params names. It differs for namespaced models\nregarding whether it’s inside …\n"],["parse_raw_value_as_a_number","ActiveModel::Validations::NumericalityValidator","ActiveModel/Validations/NumericalityValidator.html#method-i-parse_raw_value_as_a_number","(raw_value)",""],["parse_raw_value_as_an_integer","ActiveModel::Validations::NumericalityValidator","ActiveModel/Validations/NumericalityValidator.html#method-i-parse_raw_value_as_an_integer","(raw_value)",""],["password=","ActiveModel::SecurePassword::InstanceMethodsOnActivation","ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password-3D","(unencrypted_password)","<p>Encrypts the password into the password_digest attribute.\n"],["plain?","ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher","ActiveModel/AttributeMethods/ClassMethods/AttributeMethodMatcher.html#method-i-plain-3F","()",""],["plural","ActiveModel::Naming","ActiveModel/Naming.html#method-c-plural","(record_or_class)","<p>Returns the plural class name of a record or class. Examples:\n\n<pre>ActiveModel::Naming.plural(post)        ...</pre>\n"],["previous_changes","ActiveModel::Dirty","ActiveModel/Dirty.html#method-i-previous_changes","()","<p>Map of attributes that were changed when the model was saved.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; 'bob'</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">'robert'</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["process_removed_attributes","ActiveModel::MassAssignmentSecurity::LoggerSanitizer","ActiveModel/MassAssignmentSecurity/LoggerSanitizer.html#method-i-process_removed_attributes","(attrs)",""],["process_removed_attributes","ActiveModel::MassAssignmentSecurity::Sanitizer","ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-i-process_removed_attributes","(attrs)",""],["process_removed_attributes","ActiveModel::MassAssignmentSecurity::StrictSanitizer","ActiveModel/MassAssignmentSecurity/StrictSanitizer.html#method-i-process_removed_attributes","(attrs)",""],["protected_attributes","ActiveModel::MassAssignmentSecurity::ClassMethods","ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-protected_attributes","(role = :default)",""],["remove_multiparameter_id","ActiveModel::MassAssignmentSecurity::PermissionSet","ActiveModel/MassAssignmentSecurity/PermissionSet.html#method-i-remove_multiparameter_id","(key)",""],["respond_to?","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-respond_to-3F","(method, include_private_methods = false)",""],["respond_to_without_attributes?","ActiveModel::AttributeMethods","ActiveModel/AttributeMethods.html#method-i-respond_to_without_attributes-3F","(method, include_private_methods = false)","<p>A Person object with a name attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code>, …\n"],["route_key","ActiveModel::Naming","ActiveModel/Naming.html#method-c-route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["run_validations!","ActiveModel::Validations","ActiveModel/Validations.html#method-i-run_validations-21","()",""],["run_validations!","ActiveModel::Validations::Callbacks","ActiveModel/Validations/Callbacks.html#method-i-run_validations-21","()","<p>Overwrite run validations to include callbacks.\n"],["sanitize","ActiveModel::MassAssignmentSecurity::Sanitizer","ActiveModel/MassAssignmentSecurity/Sanitizer.html#method-i-sanitize","(attributes, authorizer)","<p>Returns all attributes not denied by the authorizer.\n"],["sanitize_for_mass_assignment","ActiveModel::MassAssignmentSecurity","ActiveModel/MassAssignmentSecurity.html#method-i-sanitize_for_mass_assignment","(attributes, role = nil)",""],["serializable_hash","ActiveModel::Serialization","ActiveModel/Serialization.html#method-i-serializable_hash","(options = nil)",""],["set","ActiveModel::Errors","ActiveModel/Errors.html#method-i-set","(key, value)","<p>Set messages for <code>key</code> to <code>value</code>\n"],["set_enablement","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-set_enablement","(enabled, observers)",""],["setup","ActiveModel::Validations::AcceptanceValidator","ActiveModel/Validations/AcceptanceValidator.html#method-i-setup","(klass)",""],["setup","ActiveModel::Validations::ConfirmationValidator","ActiveModel/Validations/ConfirmationValidator.html#method-i-setup","(klass)",""],["singular","ActiveModel::Naming","ActiveModel/Naming.html#method-c-singular","(record_or_class)","<p>Returns the singular class name of a record or class. Examples:\n\n<pre>ActiveModel::Naming.singular(post)    ...</pre>\n"],["singular_route_key","ActiveModel::Naming","ActiveModel/Naming.html#method-c-singular_route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["size","ActiveModel::Errors","ActiveModel/Errors.html#method-i-size","()","<p>Returns the number of error messages.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-string\">&quot;can't be blank&quot;</span>)\n<span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">size</span> <span class=\"ruby-comment\"># =&gt; 1</span>\n<span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["start_transaction","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-start_transaction","()",""],["test_errors_aref","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_errors_aref","()","<p>Errors Testing\n<p>Returns an object that has :[] and :full_messages defined on it. See below\nfor more details. …\n"],["test_errors_full_messages","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_errors_full_messages","()","<p>Returns an Array of all error messages for the object. Each message should\ncontain information about …\n"],["test_model_naming","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_model_naming","()","<p>Naming\n<p>Model.model_name must return a string with some convenience methods:\n:human, :singular, and :plural. …\n"],["test_persisted?","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_persisted-3F","()","<p>Responds to persisted?\n<p>Returns a boolean that specifies whether the object has been persisted yet.\nThis …\n"],["test_to_key","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_to_key","()","<p>Responds to to_key\n<p>Returns an Enumerable of all (primary) key attributes or nil if\nmodel.persisted? is …\n"],["test_to_param","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_to_param","()","<p>Responds to to_param\n<p>Returns a string representing the object’s key suitable for use in URLs or\nnil if …\n"],["test_to_partial_path","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_to_partial_path","()","<p>Responds to to_partial_path\n<p>Returns a string giving a relative path.  This is used for looking up\npartials. …\n"],["test_valid?","ActiveModel::Lint::Tests","ActiveModel/Lint/Tests.html#method-i-test_valid-3F","()","<p>Responds to valid?\n<p>Returns a boolean that specifies whether the object is in a valid or\ninvalid state. …\n"],["to_a","ActiveModel::Errors","ActiveModel/Errors.html#method-i-to_a","()","<p>Returns an array of error messages, with the attribute name included\n\n<pre>p.errors.add(:name, &quot;can't be blank&quot;) ...</pre>\n"],["to_hash","ActiveModel::Errors","ActiveModel/Errors.html#method-i-to_hash","()",""],["to_key","ActiveModel::Conversion","ActiveModel/Conversion.html#method-i-to_key","()","<p>Returns an Enumerable of all key attributes if any is set, regardless if\nthe object is persisted or not. …\n"],["to_model","ActiveModel::Conversion","ActiveModel/Conversion.html#method-i-to_model","()","<p>If your object is already designed to implement all of the Active Model you\ncan use the default <code>:to_model</code> …\n"],["to_param","ActiveModel::Conversion","ActiveModel/Conversion.html#method-i-to_param","()","<p>Returns a string representing the object’s key suitable for use in URLs, or\nnil if <code>persisted?</code> is false. …\n"],["to_partial_path","ActiveModel::Conversion","ActiveModel/Conversion.html#method-i-to_partial_path","()","<p>Returns a string identifying the path associated with the object.\nActionPack uses this to find a suitable …\n"],["to_xml","ActiveModel::Errors","ActiveModel/Errors.html#method-i-to_xml","(options={})","<p>Returns an xml formatted representation of the Errors hash.\n\n<pre>p.errors.add(:name, &quot;can't be blank&quot;)\np.errors.add(:name, ...</pre>\n"],["to_xml","ActiveModel::Serializers::Xml","ActiveModel/Serializers/Xml.html#method-i-to_xml","(options = {}, &block)","<p>Returns XML representing the model. Configuration can be passed through\n<code>options</code>.\n<p>Without any <code>options</code>, …\n"],["transaction","ActiveModel::ObserverArray","ActiveModel/ObserverArray.html#method-i-transaction","()",""],["uncountable?","ActiveModel::Naming","ActiveModel/Naming.html#method-c-uncountable-3F","(record_or_class)","<p>Identifies whether the class name of a record or class is uncountable.\nExamples:\n\n<pre>ActiveModel::Naming.uncountable?(Sheep) ...</pre>\n"],["undefine_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","ActiveModel/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods","()","<p>Removes all the previously dynamically defined methods from the class\n"],["valid?","ActiveModel::Validations","ActiveModel/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the specified validations and returns true if no errors were added\notherwise false. Context …\n"],["validate","ActiveModel::EachValidator","ActiveModel/EachValidator.html#method-i-validate","(record)","<p>Performs validation on the supplied record. By default this will call\n<code>validates_each</code> to determine validity …\n"],["validate","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validate","(*args, &block)","<p>Adds a validation method or block to the class. This is useful when\noverriding the <code>validate</code> instance …\n"],["validate","ActiveModel::Validations::PresenceValidator","ActiveModel/Validations/PresenceValidator.html#method-i-validate","(record)",""],["validate","ActiveModel::Validator","ActiveModel/Validator.html#method-i-validate","(record)","<p>Override this method in subclasses with validation logic, adding errors to\nthe records <code>errors</code> array where …\n"],["validate_each","ActiveModel::EachValidator","ActiveModel/EachValidator.html#method-i-validate_each","(record, attribute, value)","<p>Override this method in subclasses with the validation logic, adding errors\nto the records <code>errors</code> array …\n"],["validate_each","ActiveModel::Validations::AcceptanceValidator","ActiveModel/Validations/AcceptanceValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::ConfirmationValidator","ActiveModel/Validations/ConfirmationValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::ExclusionValidator","ActiveModel/Validations/ExclusionValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::FormatValidator","ActiveModel/Validations/FormatValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::InclusionValidator","ActiveModel/Validations/InclusionValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::LengthValidator","ActiveModel/Validations/LengthValidator.html#method-i-validate_each","(record, attribute, value)",""],["validate_each","ActiveModel::Validations::NumericalityValidator","ActiveModel/Validations/NumericalityValidator.html#method-i-validate_each","(record, attr_name, value)",""],["validate_each","ActiveModel::Validations::WithValidator","ActiveModel/Validations/WithValidator.html#method-i-validate_each","(record, attr, val)",""],["validates","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validates","(*attributes)","<p>This method is a shortcut to all default validators and any custom\nvalidator classes ending in ‘Validator’. …\n"],["validates!","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validates-21","(*attributes)","<p>This method is used to define validation that cannot be corrected by end\nuser and is considered exceptional. …\n"],["validates_acceptance_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_acceptance_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate the acceptance of a terms\nof service check box (or similar …\n"],["validates_confirmation_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate a password or email address\nfield with a confirmation. …\n"],["validates_each","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validates_each","(*attr_names, &block)","<p>Validates each attribute against a block.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Validations</span>\n\n  <span class=\"ruby-identifier\">attr_accessor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["validates_exclusion_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_exclusion_of","(*attr_names)","<p>Validates that the value of the specified attribute is not in a particular\nenumerable object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["validates_format_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_format_of","(*attr_names)","<p>Validates whether the value of the specified attribute is of the correct\nform, going by the regular expression …\n"],["validates_inclusion_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_inclusion_of","(*attr_names)","<p>Validates whether the value of the specified attribute is available in a\nparticular enumerable object. …\n"],["validates_length_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_length_of","(*attr_names)","<p>Validates that the specified attribute matches the length restrictions\nsupplied. Only one option can …\n"],["validates_numericality_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_numericality_of","(*attr_names)","<p>Validates whether the value of the specified attribute is numeric by trying\nto convert it to a float …\n"],["validates_presence_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?). Happens by default …\n"],["validates_size_of","ActiveModel::Validations::HelperMethods","ActiveModel/Validations/HelperMethods.html#method-i-validates_size_of","(*attr_names)",""],["validates_with","ActiveModel::Validations","ActiveModel/Validations.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validates_with","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validates_with","(*args, &block)","<p>If you pass any additional configuration options, they will be passed to\nthe class and available as  …\n"],["validators","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validators","()","<p>List all validators that are being used to validate the model using\n<code>validates_with</code> method.\n"],["validators_on","ActiveModel::Validations::ClassMethods","ActiveModel/Validations/ClassMethods.html#method-i-validators_on","(*attributes)","<p>List all validators that being used to validate a specific attribute.\n"],["values","ActiveModel::Errors","ActiveModel/Errors.html#method-i-values","()","<p>Returns all message values\n"]]}}