var search_data = {"index":{"searchIndex":["abstractcontroller","actionnotfound","assetpaths","base","callbacks","classmethods","collector","doublerendererror","error","helpers","classmethods","layouts","classmethods","layoutconditions","logger","railties","routeshelpers","rendering","classmethods","translation","urlfor","classmethods","viewpaths","classmethods","actioncontroller","base","caching","actions","actioncachepath","classmethods","configmethods","fragments","pages","classmethods","sweeping","compatibility","conditionalget","cookies","datastreaming","flash","forcessl","classmethods","head","helpers","classmethods","hideactions","classmethods","httpauthentication","basic","controllermethods","classmethods","digest","controllermethods","token","controllermethods","implicitrender","instrumentation","classmethods","logsubscriber","metal","middleware","actionmiddleware","mimeresponds","classmethods","paramswrapper","classmethods","rackdelegation","railtie","railties","paths","recordidentifier","redirecting","renderers","all","classmethods","rendering","requestforgeryprotection","classmethods","rescue","responder","sessionmanagement","classmethods","streaming","templateassertions","testcase","behavior","classmethods","raiseactionexceptions","testresponse","testing","classmethods","urlfor","actiondispatch","assertions","domassertions","responseassertions","routingassertions","selectorassertions","tagassertions","beststandardssupport","bodyproxy","callbacks","cookies","cookieoverflow","debugexceptions","exceptionwrapper","filehandler","flash","flashhash","head","http","cache","request","response","filterparameters","headers","mimenegotiation","parameterfilter","parameters","url","upload","uploadedfile","integration","requesthelpers","runner","session","integrationtest","middlewarestack","middleware","paramsparser","performancetest","publicexceptions","railsentitystore","railsmetastore","railtie","reloader","remoteip","getip","ipspoofattackerror","request","requestid","rescue","response","routing","mapper","base","httphelpers","resources","scoping","polymorphicroutes","redirection","routeset","mountedhelpers","urlfor","session","abstractstore","cachestore","compatibility","cookiestore","destroyablesession","memcachestore","stalesessioncheck","showexceptions","static","testprocess","testrequest","testresponse","actionpack","actionview","base","context","filesystemresolver","fixtureresolver","helpers","activemodelhelper","activemodelinstancetag","assetpaths","assettaghelper","assetincludetag","javascriptincludetag","javascripttaghelpers","classmethods","stylesheetincludetag","stylesheettaghelpers","classmethods","atomfeedhelper","atombuilder","atomfeedbuilder","cachehelper","capturehelper","csrfhelper","datehelper","datehelperinstancetag","debughelper","formbuilder","formhelper","formoptionshelper","formtaghelper","instancetag","javascripthelper","numberhelper","invalidnumbererror","outputsafetyhelper","recordtaghelper","renderinghelper","sanitizehelper","taghelper","texthelper","translationhelper","urlhelper","logsubscriber","lookupcontext","detailscache","viewpaths","nullresolver","partialrenderer","railtie","renderer","resolver","path","template","handlers","builder","erb","erubis","testcase","behavior","classmethods","locals","testcontroller","html","fullsanitizer","linksanitizer","sanitizer","selector","tag","whitelistsanitizer","i18n","exceptionhandler","mime","mimes","type","object","rack","sprockets","bootstrap","compressors","helpers","isolatedhelper","railshelper","assetpaths","assetnotprecompilederror","railtie","staticcompiler","==()","==()","==()","===()","=~()","get()","post()","[]()","[]()","[]()","[]()","_handle_method_missing()","_handle_render_options()","_implied_layout_name()","_insert_callbacks()","_layout_for()","_layout_for()","_normalize_callback_options()","_normalize_options()","_normalize_options()","_prefixes()","_prepare_context()","_routes()","_routes()","_routes_context()","_routes_context()","_save_fragment()","_set_detail()","_set_wrapper_defaults()","_to_partial_path()","_with_routes()","_write_layout_method()","abstract!()","accept=()","accepts()","action()","action=()","action_has_layout?()","action_methods()","action_methods()","action_methods()","action_methods()","add()","add_expr_escaped()","add_expr_literal()","add_postamble()","add_preamble()","add_renderer()","add_text()","after()","after_filter()","alert()","alert=()","all_helpers_from_path()","api_behavior()","api_location()","app()","app()","app()","app=()","append_after_filter()","append_around_filter()","append_before_filter()","append_view_path()","append_view_path()","application_trace()","around_filter()","assert_dom_equal()","assert_dom_not_equal()","assert_generates()","assert_index()","assert_no_tag()","assert_recognizes()","assert_redirected_to()","assert_response()","assert_routing()","assert_select()","assert_select_email()","assert_select_encoded()","assert_tag()","assert_template()","asset_name()","asset_name()","asset_name()","asset_path()","asset_paths()","asset_tag()","asset_tag()","asset_tag()","assign_shortcuts()","assigns()","atom_feed()","attribute_match()","audio_path()","audio_tag()","authenticate()","authenticate()","authenticate()","authenticate_or_request_with_http_basic()","authenticate_or_request_with_http_digest()","authenticate_or_request_with_http_token()","authenticate_with_http_basic()","authenticate_with_http_digest()","authenticate_with_http_token()","authentication_header()","authentication_request()","authentication_request()","authentication_request()","authorization()","auto_discovery_link_tag()","available_action?()","before()","before_filter()","before_filters()","body()","body()","body=()","body_parts()","build()","build()","build()","build()","button()","button_tag()","button_to()","button_to_function()","cache()","cache()","cache_page()","cache_page()","cache_store()","cache_store=()","cache_template_loading()","cache_template_loading=()","caches_action()","caches_page()","caching_allowed?()","calculate_ip()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","capture()","cdata_section()","check_box()","check_box()","check_box_checked?()","check_box_tag()","cleanup!()","clear()","clear_action_methods!()","clear_cache()","clear_helpers()","clear_respond_to()","close()","close()","closed?()","code()","collection()","collection_select()","collection_select()","compile()","compile_path?()","concat()","conditional_layout?()","conditional_layout?()","config()","config()","constraints()","contains_bad_protocols?()","content_for()","content_for?()","content_length()","content_mime_type()","content_tag()","content_tag_for()","content_type()","content_type()","content_type=()","controller()","controller()","controller_class()","controller_class=()","controller_name()","controller_name()","controller_path()","controller_path()","controller_path=()","convert_to_model()","cookie_jar()","cookies()","cookies()","cookies()","cookies()","csrf_meta_tag()","csrf_meta_tags()","css_select()","current_cycle()","current_page?()","custom_dir()","custom_dir()","custom_dir()","cycle()","date_select()","date_select()","datetime_select()","datetime_select()","debug()","decode_credentials()","decode_credentials()","decode_credentials_header()","default_action()","default_charset=()","default_render()","default_render()","default_url_options()","default_url_options()","default_url_options=()","defaults()","delete()","delete()","delete()","delete()","delete()","delete?()","delete_cookie()","delete_via_redirect()","destroy()","destroy_session()","detail_args_for()","details_for_lookup()","determine_default_controller_class()","determine_default_helper_class()","disable_cache()","discard()","dispatch()","display()","display_errors()","distance_of_time_in_words()","distance_of_time_in_words_to_now()","div_for()","dom_class()","dom_id()","domain()","each()","each()","email_field()","email_field_tag()","emitted_hidden_id?()","empty?()","encode!()","encode_credentials()","encode_credentials()","encode_credentials()","entry()","env()","env_filter()","eql?()","error_message()","error_wrapping()","escape_glob_chars()","escape_javascript()","escape_once()","etag=()","etag_matches?()","excerpt()","exist?()","exists?()","expected_response()","expire_action()","expire_fragment()","expire_page()","expire_page()","expires_in()","expires_now()","ext()","extension()","extension()","extension()","extract_domain()","extract_session_id()","extract_subdomain()","extract_subdomains()","favicon_link_tag()","field_set_tag()","fields_for()","fields_for()","file_field()","file_field()","file_field_tag()","filter()","filtered_env()","filtered_parameters()","filtered_path()","filtered_query_string()","find()","find_all()","find_all()","find_all_tag()","find_tag()","find_template()","fixture_file_upload()","flash()","flash()","follow_redirect!()","font_path()","font_path()","for_class()","for_id()","force_ssl()","form_authenticity_param()","form_authenticity_token()","form_data?()","form_for()","form_tag()","format()","format=()","formats()","fragment_cache_key()","fragment_exist?()","framework_trace()","fresh?()","fresh_when()","from_rails_root()","from_response()","full_trace()","fullpath()","generate_method_for_mime()","generate_sid()","get()","get()","get()","get?()","get_session()","get_via_redirect()","grouped_collection_select()","grouped_collection_select()","grouped_options_for_select()","ha1()","halted_callback()","handle_unverified_request()","handles_encoding?()","has_errors?()","head()","head()","head()","head?()","headers()","headers=()","helper()","helper_attr()","helper_class()","helper_method()","helper_method()","helpers()","hidden_actions()","hidden_field()","hidden_field()","hidden_field_tag()","hide_action()","highlight()","host()","host()","host=()","host_with_port()","html?()","html_document()","http_basic_authenticate_with()","https!()","https?()","if_modified_since()","if_modified_since=()","if_none_match()","if_none_match=()","image_alt()","image_path()","image_path()","image_submit_tag()","image_tag()","include_tag()","included()","index()","inherited()","inherited()","inherited()","inherited()","inherited()","initialize_copy()","initialize_copy()","initialize_sid()","initialize_template_class()","insert()","insert_after()","insert_before()","inspect()","inspect()","instrument_fragment_cache()","internal_methods()","ip()","ips_from()","j()","javascript_include_tag()","javascript_include_tag()","javascript_path()","javascript_path()","javascript_tag()","json_resource_errors()","keep()","key?()","key?()","keys()","klass()","l()","l()","label()","label()","label_tag()","last()","last_modified()","last_modified=()","last_modified?()","layout()","link_to()","link_to_function()","link_to_if()","link_to_unless()","link_to_unless_current()","load_session()","local?()","localize()","localize()","locals()","location()","location()","location=()","location=()","logger()","logger()","lookup()","lookup_by_extension()","lookup_context()","mail_to()","match()","match()","match()","match?()","media_type()","member()","message()","method()","method_added()","method_for_action()","method_for_action()","method_missing()","method_missing()","method_missing()","method_missing()","method_symbol()","middleware()","mime_type()","modules_for_helpers()","modules_for_helpers()","mount()","multipart=()","namespace()","namespace()","navigation_behavior()","navigation_location()","negotiate_mime()","nested()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_element()","next_selector()","nonce()","normalize_name()","normalize_path()","not_modified?()","notice()","notice=()","now()","now_is_loaded?()","nth_child()","number_field()","number_field_tag()","number_to_currency()","number_to_human()","number_to_human_size()","number_to_percentage()","number_to_phone()","number_with_delimiter()","number_with_precision()","object()","only_child()","opaque()","open()","open_session()","option_groups_from_collection_for_select()","optional_port()","options_for_select()","options_from_collection_for_select()","original_fullpath()","original_url()","parameter_filter()","parameter_filter_for()","parameters()","paramify_values()","params()","params()","params=()","parent_prefixes()","parse()","parse_data_with_trailing_star()","password_field()","password_field_tag()","path=()","path_for()","path_parameters()","path_to_asset()","path_to_audio()","path_to_font()","path_to_font()","path_to_image()","path_to_image()","path_to_javascript()","path_to_javascript()","path_to_stylesheet()","path_to_stylesheet()","path_to_video()","performed?()","phone_field()","phone_field_tag()","pluralize()","polymorphic_path()","polymorphic_url()","port()","port=()","port_string()","post()","post()","post()","post?()","post_via_redirect()","prepare!()","prepare!()","prepare_controller_class()","prepend_after_filter()","prepend_around_filter()","prepend_before_filter()","prepend_view_path()","prepend_view_path()","process()","process()","process()","process()","process_action()","process_action()","process_action()","process_action()","process_attributes_for()","process_node()","process_node()","process_node()","process_node()","process_view_paths()","process_with_new_base_test()","protect_against_forgery?()","protect_from_forgery()","protocol()","provide()","put()","put()","put()","put?()","put_via_redirect()","query()","query_parameters()","rack_cookies()","radio_button()","radio_button()","radio_button_checked?()","radio_button_tag()","range_field()","range_field_tag()","raw()","raw_host_with_port()","raw_post()","read()","read()","read()","read_fragment()","record_key_for_dom_id()","recycle!()","recycle!()","redirect()","redirect_to()","redirect_to()","redirect_to()","redirect_to()","redirect_to_url()","redirect_url()","ref()","refresh()","register()","register_alias()","register_css_compressor()","register_javascript_expansion()","register_js_compressor()","register_stylesheet_expansion()","registered_css_compressor()","registered_js_compressor()","remote_addr=()","remote_ip()","render()","render()","render()","render()","render()","render()","render()","render()","render_body()","render_collection()","render_collection()","render_partial()","render_partial()","render_template()","render_to_body()","render_to_body()","render_to_body()","render_to_string()","render_to_string()","request_http_basic_authentication()","request_http_digest_authentication()","request_http_token_authentication()","request_method()","request_method=()","request_method_symbol()","request_parameters()","request_uri=()","request_via_redirect()","require_engine()","rescue_action()","rescue_action_without_handler()","rescue_from()","rescue_responses()","rescue_template()","rescue_templates()","rescue_with_handler()","reset!()","reset!()","reset_cycle()","reset_session()","reset_session()","resolve()","resolve()","resource()","resource_errors()","resource_location()","resourceful?()","resources()","resources_path_names()","respond()","respond_to()","respond_to()","respond_to?()","respond_to?()","respond_to?()","respond_with()","response_body=()","response_body=()","response_code()","response_from_page()","response_overridden?()","retrieve_autoindex()","retrieve_object()","root()","root()","run()","safe_concat()","safe_join()","sanitize()","sanitize()","sanitize()","sanitize_css()","sanitize_css()","sanitize_dom_id()","sanitizeable?()","sanitizeable?()","scope()","search_field()","search_field_tag()","secret_token()","select()","select()","select()","select()","select_date()","select_datetime()","select_day()","select_first()","select_hour()","select_minute()","select_month()","select_second()","select_tag()","select_time()","select_year()","selector()","send_action()","send_data()","send_data()","send_data()","send_file()","send_file()","send_file()","server_port()","server_software()","session()","session_options=()","set_cookie()","set_session()","setup_controller_request_and_response()","setup_subscriptions()","setup_with_controller()","shallow()","shallow?()","show_detailed_exceptions?()","simple_format()","simple_selector()","size()","skip_after_filter()","skip_around_filter()","skip_before_filter()","skip_filter()","stale?()","stale_session_check!()","standard_port()","standard_port?()","start_processing()","status()","status=()","status=()","status_code()","status_message()","strip_links()","strip_tags()","stylesheet_link_tag()","stylesheet_link_tag()","stylesheet_path()","stylesheet_path()","subdomain()","subdomains()","submit()","submit_tag()","supports_streaming?()","supports_streaming?()","swap()","symbolized_path_parameters()","symbols()","t()","t()","tag()","tag()","teardown_subscriptions()","telephone_field()","telephone_field_tag()","template_exists?()","tests()","tests()","text_area()","text_area_tag()","text_field()","text_field_tag()","time_ago_in_words()","time_select()","time_select()","time_tag()","time_zone_options_for_select()","time_zone_select()","time_zone_select()","to_a()","to_ary()","to_boolean_select_tag()","to_check_box_tag()","to_cleanup()","to_content_tag()","to_date_select_tag()","to_datetime_select_tag()","to_format()","to_hash()","to_html()","to_input_field_tag()","to_js()","to_label_tag()","to_model()","to_number_field_tag()","to_partial_path()","to_path()","to_path()","to_prepare()","to_radio_button_tag()","to_s()","to_s()","to_s()","to_s()","to_str()","to_sym()","to_text_area_tag()","to_time_select_tag()","token_and_options()","tokenize()","tokenize()","translate()","translate()","truncate()","unescape_path()","unregister()","updated()","url()","url_field()","url_field_tag()","url_for()","url_for()","url_for()","url_for()","url_options()","url_options()","url_options()","url_options()","use()","use()","use()","use_accept_header()","use_renderer()","use_renderers()","user_agent=()","user_name_and_password()","utf8_enforcer_tag()","uuid()","valid_accept_header()","validate_digest_response()","validate_nonce()","value()","value()","value_before_type_cast()","value_before_type_cast()","verified_request?()","verify_authenticity_token()","verify_request?()","video_path()","video_tag()","view_assigns()","view_context()","view_context_class()","view_context_class()","view_paths()","view_paths=()","view_paths=()","view_renderer()","visible_action?()","with()","with()","with_default_scope()","with_exclusive_scope()","with_fallbacks()","with_routing()","with_scope_level()","without_modules()","word_wrap()","wrap_parameters()","write()","write()","write_asset()","write_fragment()","write_manifest()","xhr()","xhr()","xhr?()","xml_http_request()","xml_http_request()","xml_http_request?()"],"longSearchIndex":["abstractcontroller","abstractcontroller::actionnotfound","abstractcontroller::assetpaths","abstractcontroller::base","abstractcontroller::callbacks","abstractcontroller::callbacks::classmethods","abstractcontroller::collector","abstractcontroller::doublerendererror","abstractcontroller::error","abstractcontroller::helpers","abstractcontroller::helpers::classmethods","abstractcontroller::layouts","abstractcontroller::layouts::classmethods","abstractcontroller::layouts::classmethods::layoutconditions","abstractcontroller::logger","abstractcontroller::railties","abstractcontroller::railties::routeshelpers","abstractcontroller::rendering","abstractcontroller::rendering::classmethods","abstractcontroller::translation","abstractcontroller::urlfor","abstractcontroller::urlfor::classmethods","abstractcontroller::viewpaths","abstractcontroller::viewpaths::classmethods","actioncontroller","actioncontroller::base","actioncontroller::caching","actioncontroller::caching::actions","actioncontroller::caching::actions::actioncachepath","actioncontroller::caching::actions::classmethods","actioncontroller::caching::configmethods","actioncontroller::caching::fragments","actioncontroller::caching::pages","actioncontroller::caching::pages::classmethods","actioncontroller::caching::sweeping","actioncontroller::compatibility","actioncontroller::conditionalget","actioncontroller::cookies","actioncontroller::datastreaming","actioncontroller::flash","actioncontroller::forcessl","actioncontroller::forcessl::classmethods","actioncontroller::head","actioncontroller::helpers","actioncontroller::helpers::classmethods","actioncontroller::hideactions","actioncontroller::hideactions::classmethods","actioncontroller::httpauthentication","actioncontroller::httpauthentication::basic","actioncontroller::httpauthentication::basic::controllermethods","actioncontroller::httpauthentication::basic::controllermethods::classmethods","actioncontroller::httpauthentication::digest","actioncontroller::httpauthentication::digest::controllermethods","actioncontroller::httpauthentication::token","actioncontroller::httpauthentication::token::controllermethods","actioncontroller::implicitrender","actioncontroller::instrumentation","actioncontroller::instrumentation::classmethods","actioncontroller::logsubscriber","actioncontroller::metal","actioncontroller::middleware","actioncontroller::middleware::actionmiddleware","actioncontroller::mimeresponds","actioncontroller::mimeresponds::classmethods","actioncontroller::paramswrapper","actioncontroller::paramswrapper::classmethods","actioncontroller::rackdelegation","actioncontroller::railtie","actioncontroller::railties","actioncontroller::railties::paths","actioncontroller::recordidentifier","actioncontroller::redirecting","actioncontroller::renderers","actioncontroller::renderers::all","actioncontroller::renderers::classmethods","actioncontroller::rendering","actioncontroller::requestforgeryprotection","actioncontroller::requestforgeryprotection::classmethods","actioncontroller::rescue","actioncontroller::responder","actioncontroller::sessionmanagement","actioncontroller::sessionmanagement::classmethods","actioncontroller::streaming","actioncontroller::templateassertions","actioncontroller::testcase","actioncontroller::testcase::behavior","actioncontroller::testcase::behavior::classmethods","actioncontroller::testcase::raiseactionexceptions","actioncontroller::testresponse","actioncontroller::testing","actioncontroller::testing::classmethods","actioncontroller::urlfor","actiondispatch","actiondispatch::assertions","actiondispatch::assertions::domassertions","actiondispatch::assertions::responseassertions","actiondispatch::assertions::routingassertions","actiondispatch::assertions::selectorassertions","actiondispatch::assertions::tagassertions","actiondispatch::beststandardssupport","actiondispatch::bodyproxy","actiondispatch::callbacks","actiondispatch::cookies","actiondispatch::cookies::cookieoverflow","actiondispatch::debugexceptions","actiondispatch::exceptionwrapper","actiondispatch::filehandler","actiondispatch::flash","actiondispatch::flash::flashhash","actiondispatch::head","actiondispatch::http","actiondispatch::http::cache","actiondispatch::http::cache::request","actiondispatch::http::cache::response","actiondispatch::http::filterparameters","actiondispatch::http::headers","actiondispatch::http::mimenegotiation","actiondispatch::http::parameterfilter","actiondispatch::http::parameters","actiondispatch::http::url","actiondispatch::http::upload","actiondispatch::http::uploadedfile","actiondispatch::integration","actiondispatch::integration::requesthelpers","actiondispatch::integration::runner","actiondispatch::integration::session","actiondispatch::integrationtest","actiondispatch::middlewarestack","actiondispatch::middlewarestack::middleware","actiondispatch::paramsparser","actiondispatch::performancetest","actiondispatch::publicexceptions","actiondispatch::railsentitystore","actiondispatch::railsmetastore","actiondispatch::railtie","actiondispatch::reloader","actiondispatch::remoteip","actiondispatch::remoteip::getip","actiondispatch::remoteip::ipspoofattackerror","actiondispatch::request","actiondispatch::requestid","actiondispatch::rescue","actiondispatch::response","actiondispatch::routing","actiondispatch::routing::mapper","actiondispatch::routing::mapper::base","actiondispatch::routing::mapper::httphelpers","actiondispatch::routing::mapper::resources","actiondispatch::routing::mapper::scoping","actiondispatch::routing::polymorphicroutes","actiondispatch::routing::redirection","actiondispatch::routing::routeset","actiondispatch::routing::routeset::mountedhelpers","actiondispatch::routing::urlfor","actiondispatch::session","actiondispatch::session::abstractstore","actiondispatch::session::cachestore","actiondispatch::session::compatibility","actiondispatch::session::cookiestore","actiondispatch::session::destroyablesession","actiondispatch::session::memcachestore","actiondispatch::session::stalesessioncheck","actiondispatch::showexceptions","actiondispatch::static","actiondispatch::testprocess","actiondispatch::testrequest","actiondispatch::testresponse","actionpack","actionview","actionview::base","actionview::context","actionview::filesystemresolver","actionview::fixtureresolver","actionview::helpers","actionview::helpers::activemodelhelper","actionview::helpers::activemodelinstancetag","actionview::helpers::assetpaths","actionview::helpers::assettaghelper","actionview::helpers::assettaghelper::assetincludetag","actionview::helpers::assettaghelper::javascriptincludetag","actionview::helpers::assettaghelper::javascripttaghelpers","actionview::helpers::assettaghelper::javascripttaghelpers::classmethods","actionview::helpers::assettaghelper::stylesheetincludetag","actionview::helpers::assettaghelper::stylesheettaghelpers","actionview::helpers::assettaghelper::stylesheettaghelpers::classmethods","actionview::helpers::atomfeedhelper","actionview::helpers::atomfeedhelper::atombuilder","actionview::helpers::atomfeedhelper::atomfeedbuilder","actionview::helpers::cachehelper","actionview::helpers::capturehelper","actionview::helpers::csrfhelper","actionview::helpers::datehelper","actionview::helpers::datehelperinstancetag","actionview::helpers::debughelper","actionview::helpers::formbuilder","actionview::helpers::formhelper","actionview::helpers::formoptionshelper","actionview::helpers::formtaghelper","actionview::helpers::instancetag","actionview::helpers::javascripthelper","actionview::helpers::numberhelper","actionview::helpers::numberhelper::invalidnumbererror","actionview::helpers::outputsafetyhelper","actionview::helpers::recordtaghelper","actionview::helpers::renderinghelper","actionview::helpers::sanitizehelper","actionview::helpers::taghelper","actionview::helpers::texthelper","actionview::helpers::translationhelper","actionview::helpers::urlhelper","actionview::logsubscriber","actionview::lookupcontext","actionview::lookupcontext::detailscache","actionview::lookupcontext::viewpaths","actionview::nullresolver","actionview::partialrenderer","actionview::railtie","actionview::renderer","actionview::resolver","actionview::resolver::path","actionview::template","actionview::template::handlers","actionview::template::handlers::builder","actionview::template::handlers::erb","actionview::template::handlers::erubis","actionview::testcase","actionview::testcase::behavior","actionview::testcase::behavior::classmethods","actionview::testcase::behavior::locals","actionview::testcase::testcontroller","html","html::fullsanitizer","html::linksanitizer","html::sanitizer","html::selector","html::tag","html::whitelistsanitizer","i18n","i18n::exceptionhandler","mime","mime::mimes","mime::type","object","rack","sprockets","sprockets::bootstrap","sprockets::compressors","sprockets::helpers","sprockets::helpers::isolatedhelper","sprockets::helpers::railshelper","sprockets::helpers::railshelper::assetpaths","sprockets::helpers::railshelper::assetpaths::assetnotprecompilederror","sprockets::railtie","sprockets::staticcompiler","actiondispatch::middlewarestack::middleware#==()","actionview::filesystemresolver#==()","mime::type#==()","mime::type#===()","mime::type#=~()","actiondispatch::request#get()","actiondispatch::request#post()","actiondispatch::flash::flashhash#[]()","actiondispatch::http::headers#[]()","actiondispatch::middlewarestack#[]()","mime::[]()","actioncontroller::compatibility#_handle_method_missing()","actioncontroller::renderers#_handle_render_options()","abstractcontroller::layouts::classmethods#_implied_layout_name()","abstractcontroller::callbacks::classmethods#_insert_callbacks()","actionview::context#_layout_for()","actionview::helpers::renderinghelper#_layout_for()","abstractcontroller::callbacks::classmethods#_normalize_callback_options()","abstractcontroller::layouts#_normalize_options()","actioncontroller::compatibility#_normalize_options()","abstractcontroller::viewpaths#_prefixes()","actionview::context#_prepare_context()","abstractcontroller::urlfor#_routes()","abstractcontroller::urlfor::classmethods#_routes()","actiondispatch::routing::urlfor#_routes_context()","actionview::helpers::urlhelper#_routes_context()","actioncontroller::caching::actions#_save_fragment()","actionview::lookupcontext::detailscache#_set_detail()","actioncontroller::paramswrapper::classmethods#_set_wrapper_defaults()","actionview::helpers::formbuilder::_to_partial_path()","actiondispatch::routing::urlfor#_with_routes()","abstractcontroller::layouts::classmethods#_write_layout_method()","abstractcontroller::base::abstract!()","actiondispatch::testrequest#accept=()","actiondispatch::http::mimenegotiation#accepts()","actioncontroller::metal::action()","actiondispatch::testrequest#action=()","abstractcontroller::layouts#action_has_layout?()","abstractcontroller::base#action_methods()","abstractcontroller::base::action_methods()","abstractcontroller::urlfor::classmethods#action_methods()","actioncontroller::hideactions::classmethods#action_methods()","actioncontroller::renderers::add()","actionview::template::handlers::erubis#add_expr_escaped()","actionview::template::handlers::erubis#add_expr_literal()","actionview::template::handlers::erubis#add_postamble()","actionview::template::handlers::erubis#add_preamble()","actioncontroller::add_renderer()","actionview::template::handlers::erubis#add_text()","actiondispatch::callbacks::after()","abstractcontroller::callbacks::classmethods#after_filter()","actiondispatch::flash::flashhash#alert()","actiondispatch::flash::flashhash#alert=()","actioncontroller::helpers::classmethods#all_helpers_from_path()","actioncontroller::responder#api_behavior()","actioncontroller::responder#api_location()","actiondispatch::integration::runner#app()","actiondispatch::integrationtest#app()","actiondispatch::integrationtest::app()","actiondispatch::integrationtest::app=()","abstractcontroller::callbacks::classmethods#append_after_filter()","abstractcontroller::callbacks::classmethods#append_around_filter()","abstractcontroller::callbacks::classmethods#append_before_filter()","abstractcontroller::viewpaths#append_view_path()","abstractcontroller::viewpaths::classmethods#append_view_path()","actiondispatch::exceptionwrapper#application_trace()","abstractcontroller::callbacks::classmethods#around_filter()","actiondispatch::assertions::domassertions#assert_dom_equal()","actiondispatch::assertions::domassertions#assert_dom_not_equal()","actiondispatch::assertions::routingassertions#assert_generates()","actiondispatch::middlewarestack#assert_index()","actiondispatch::assertions::tagassertions#assert_no_tag()","actiondispatch::assertions::routingassertions#assert_recognizes()","actiondispatch::assertions::responseassertions#assert_redirected_to()","actiondispatch::assertions::responseassertions#assert_response()","actiondispatch::assertions::routingassertions#assert_routing()","actiondispatch::assertions::selectorassertions#assert_select()","actiondispatch::assertions::selectorassertions#assert_select_email()","actiondispatch::assertions::selectorassertions#assert_select_encoded()","actiondispatch::assertions::tagassertions#assert_tag()","actioncontroller::templateassertions#assert_template()","actionview::helpers::assettaghelper::assetincludetag#asset_name()","actionview::helpers::assettaghelper::javascriptincludetag#asset_name()","actionview::helpers::assettaghelper::stylesheetincludetag#asset_name()","sprockets::helpers::railshelper#asset_path()","sprockets::helpers::railshelper#asset_paths()","actionview::helpers::assettaghelper::assetincludetag#asset_tag()","actionview::helpers::assettaghelper::javascriptincludetag#asset_tag()","actionview::helpers::assettaghelper::stylesheetincludetag#asset_tag()","actioncontroller::compatibility#assign_shortcuts()","actiondispatch::testprocess#assigns()","actionview::helpers::atomfeedhelper#atom_feed()","html::selector#attribute_match()","actionview::helpers::assettaghelper#audio_path()","actionview::helpers::assettaghelper#audio_tag()","actioncontroller::httpauthentication::basic#authenticate()","actioncontroller::httpauthentication::digest#authenticate()","actioncontroller::httpauthentication::token#authenticate()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_or_request_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_or_request_with_http_digest()","actioncontroller::httpauthentication::token::controllermethods#authenticate_or_request_with_http_token()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_with_http_digest()","actioncontroller::httpauthentication::token::controllermethods#authenticate_with_http_token()","actioncontroller::httpauthentication::digest#authentication_header()","actioncontroller::httpauthentication::basic#authentication_request()","actioncontroller::httpauthentication::digest#authentication_request()","actioncontroller::httpauthentication::token#authentication_request()","actiondispatch::request#authorization()","actionview::helpers::assettaghelper#auto_discovery_link_tag()","abstractcontroller::base#available_action?()","actiondispatch::callbacks::before()","abstractcontroller::callbacks::classmethods#before_filter()","actioncontroller::testing::classmethods#before_filters()","actiondispatch::request#body()","actiondispatch::response#body()","actiondispatch::response#body=()","actiondispatch::response#body_parts()","actioncontroller::middleware::build()","actiondispatch::middlewarestack#build()","actiondispatch::middlewarestack::middleware#build()","actionview::resolver::path::build()","actionview::helpers::formbuilder#button()","actionview::helpers::formtaghelper#button_tag()","actionview::helpers::urlhelper#button_to()","actionview::helpers::javascripthelper#button_to_function()","actioncontroller::caching#cache()","actionview::helpers::cachehelper#cache()","actioncontroller::caching::pages#cache_page()","actioncontroller::caching::pages::classmethods#cache_page()","actioncontroller::caching::configmethods#cache_store()","actioncontroller::caching::configmethods#cache_store=()","actionview::base::cache_template_loading()","actionview::base::cache_template_loading=()","actioncontroller::caching::actions::classmethods#caches_action()","actioncontroller::caching::pages::classmethods#caches_page()","actioncontroller::caching#caching_allowed?()","actiondispatch::remoteip::getip#calculate_ip()","actioncontroller::metal::call()","actioncontroller::middleware::actionmiddleware#call()","actioncontroller::responder::call()","actiondispatch::beststandardssupport#call()","actiondispatch::callbacks#call()","actiondispatch::cookies#call()","actiondispatch::debugexceptions#call()","actiondispatch::filehandler#call()","actiondispatch::flash#call()","actiondispatch::head#call()","actiondispatch::paramsparser#call()","actiondispatch::publicexceptions#call()","actiondispatch::reloader#call()","actiondispatch::remoteip#call()","actiondispatch::requestid#call()","actiondispatch::rescue#call()","actiondispatch::showexceptions#call()","actiondispatch::static#call()","actionview::template::handlers::builder#call()","actionview::template::handlers::erb#call()","actionview::template::handlers::erb::call()","i18n::exceptionhandler#call()","actionview::helpers::capturehelper#capture()","actionview::helpers::taghelper#cdata_section()","actionview::helpers::formbuilder#check_box()","actionview::helpers::formhelper#check_box()","actionview::helpers::instancetag::check_box_checked?()","actionview::helpers::formtaghelper#check_box_tag()","actiondispatch::reloader::cleanup!()","actiondispatch::flash::flashhash#clear()","abstractcontroller::base::clear_action_methods!()","actionview::resolver#clear_cache()","abstractcontroller::helpers::classmethods#clear_helpers()","actioncontroller::mimeresponds::classmethods#clear_respond_to()","actiondispatch::bodyproxy#close()","actiondispatch::response#close()","actiondispatch::bodyproxy#closed?()","actiondispatch::response#code()","actiondispatch::routing::mapper::resources#collection()","actionview::helpers::formbuilder#collection_select()","actionview::helpers::formoptionshelper#collection_select()","sprockets::staticcompiler#compile()","sprockets::staticcompiler#compile_path?()","actionview::helpers::texthelper#concat()","abstractcontroller::layouts#conditional_layout?()","abstractcontroller::layouts::classmethods::layoutconditions#conditional_layout?()","actionview::testcase::behavior#config()","sprockets::helpers::isolatedhelper#config()","actiondispatch::routing::mapper::scoping#constraints()","html::whitelistsanitizer#contains_bad_protocols?()","actionview::helpers::capturehelper#content_for()","actionview::helpers::capturehelper#content_for?()","actiondispatch::request#content_length()","actiondispatch::http::mimenegotiation#content_mime_type()","actionview::helpers::taghelper#content_tag()","actionview::helpers::recordtaghelper#content_tag_for()","actioncontroller::metal#content_type()","actiondispatch::http::mimenegotiation#content_type()","actioncontroller::metal#content_type=()","actiondispatch::routing::mapper::scoping#controller()","sprockets::helpers::isolatedhelper#controller()","actioncontroller::testcase::behavior::classmethods#controller_class()","actioncontroller::testcase::behavior::classmethods#controller_class=()","actioncontroller::metal::controller_name()","actioncontroller::metal#controller_name()","abstractcontroller::base::controller_path()","abstractcontroller::base#controller_path()","actionview::testcase::testcontroller#controller_path=()","actionview::helpers::formhelper#convert_to_model()","actiondispatch::request#cookie_jar()","actiondispatch::integration::session#cookies()","actiondispatch::response#cookies()","actiondispatch::testprocess#cookies()","actiondispatch::testrequest#cookies()","actionview::helpers::csrfhelper#csrf_meta_tag()","actionview::helpers::csrfhelper#csrf_meta_tags()","actiondispatch::assertions::selectorassertions#css_select()","actionview::helpers::texthelper#current_cycle()","actionview::helpers::urlhelper#current_page?()","actionview::helpers::assettaghelper::assetincludetag#custom_dir()","actionview::helpers::assettaghelper::javascriptincludetag#custom_dir()","actionview::helpers::assettaghelper::stylesheetincludetag#custom_dir()","actionview::helpers::texthelper#cycle()","actionview::helpers::datehelper#date_select()","actionview::helpers::formbuilder#date_select()","actionview::helpers::datehelper#datetime_select()","actionview::helpers::formbuilder#datetime_select()","actionview::helpers::debughelper#debug()","actioncontroller::httpauthentication::basic#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials_header()","actioncontroller::responder#default_action()","actioncontroller::compatibility::default_charset=()","actioncontroller::implicitrender#default_render()","actioncontroller::responder#default_render()","actiondispatch::integration::session#default_url_options()","actiondispatch::routing::mapper::base#default_url_options()","actiondispatch::routing::mapper::base#default_url_options=()","actiondispatch::routing::mapper::scoping#defaults()","actioncontroller::testcase::behavior#delete()","actiondispatch::flash::flashhash#delete()","actiondispatch::integration::requesthelpers#delete()","actiondispatch::middlewarestack#delete()","actiondispatch::routing::mapper::httphelpers#delete()","actiondispatch::request#delete?()","actiondispatch::response#delete_cookie()","actiondispatch::integration::requesthelpers#delete_via_redirect()","actiondispatch::session::destroyablesession#destroy()","actiondispatch::session::cachestore#destroy_session()","actionview::lookupcontext::viewpaths#detail_args_for()","abstractcontroller::viewpaths#details_for_lookup()","actioncontroller::testcase::behavior::classmethods#determine_default_controller_class()","actionview::testcase::behavior::classmethods#determine_default_helper_class()","actionview::lookupcontext::detailscache#disable_cache()","actiondispatch::flash::flashhash#discard()","actioncontroller::rackdelegation#dispatch()","actioncontroller::responder#display()","actioncontroller::responder#display_errors()","actionview::helpers::datehelper#distance_of_time_in_words()","actionview::helpers::datehelper#distance_of_time_in_words_to_now()","actionview::helpers::recordtaghelper#div_for()","actioncontroller::recordidentifier#dom_class()","actioncontroller::recordidentifier#dom_id()","actiondispatch::http::url#domain()","actiondispatch::flash::flashhash#each()","actiondispatch::middlewarestack#each()","actionview::helpers::formhelper#email_field()","actionview::helpers::formtaghelper#email_field_tag()","actionview::helpers::formbuilder#emitted_hidden_id?()","actiondispatch::flash::flashhash#empty?()","actionview::template#encode!()","actioncontroller::httpauthentication::basic#encode_credentials()","actioncontroller::httpauthentication::digest#encode_credentials()","actioncontroller::httpauthentication::token#encode_credentials()","actionview::helpers::atomfeedhelper::atomfeedbuilder#entry()","actioncontroller::metal#env()","actiondispatch::http::filterparameters#env_filter()","actionview::filesystemresolver#eql?()","actionview::helpers::activemodelinstancetag#error_message()","actionview::helpers::activemodelinstancetag#error_wrapping()","actiondispatch::filehandler#escape_glob_chars()","actionview::helpers::javascripthelper#escape_javascript()","actionview::helpers::taghelper#escape_once()","actiondispatch::http::cache::response#etag=()","actiondispatch::http::cache::request#etag_matches?()","actionview::helpers::texthelper#excerpt()","actiondispatch::railsentitystore#exist?()","actionview::lookupcontext::viewpaths#exists?()","actioncontroller::httpauthentication::digest#expected_response()","actioncontroller::caching::actions#expire_action()","actioncontroller::caching::fragments#expire_fragment()","actioncontroller::caching::pages#expire_page()","actioncontroller::caching::pages::classmethods#expire_page()","actioncontroller::conditionalget#expires_in()","actioncontroller::conditionalget#expires_now()","actiondispatch::filehandler#ext()","actionview::helpers::assettaghelper::assetincludetag#extension()","actionview::helpers::assettaghelper::javascriptincludetag#extension()","actionview::helpers::assettaghelper::stylesheetincludetag#extension()","actiondispatch::http::url::extract_domain()","actiondispatch::session::stalesessioncheck#extract_session_id()","actiondispatch::http::url::extract_subdomain()","actiondispatch::http::url::extract_subdomains()","actionview::helpers::assettaghelper#favicon_link_tag()","actionview::helpers::formtaghelper#field_set_tag()","actionview::helpers::formbuilder#fields_for()","actionview::helpers::formhelper#fields_for()","actionview::helpers::formbuilder#file_field()","actionview::helpers::formhelper#file_field()","actionview::helpers::formtaghelper#file_field_tag()","actiondispatch::http::parameterfilter#filter()","actiondispatch::http::filterparameters#filtered_env()","actiondispatch::http::filterparameters#filtered_parameters()","actiondispatch::http::filterparameters#filtered_path()","actiondispatch::http::filterparameters#filtered_query_string()","actionview::lookupcontext::viewpaths#find()","actionview::lookupcontext::viewpaths#find_all()","actionview::resolver#find_all()","actiondispatch::assertions::tagassertions#find_all_tag()","actiondispatch::assertions::tagassertions#find_tag()","actionview::lookupcontext::viewpaths#find_template()","actiondispatch::testprocess#fixture_file_upload()","actiondispatch::request#flash()","actiondispatch::testprocess#flash()","actiondispatch::integration::requesthelpers#follow_redirect!()","actionview::helpers::assettaghelper#font_path()","sprockets::helpers::railshelper#font_path()","html::selector::for_class()","html::selector::for_id()","actioncontroller::forcessl::classmethods#force_ssl()","actioncontroller::requestforgeryprotection#form_authenticity_param()","actioncontroller::requestforgeryprotection#form_authenticity_token()","actiondispatch::request#form_data?()","actionview::helpers::formhelper#form_for()","actionview::helpers::formtaghelper#form_tag()","actiondispatch::http::mimenegotiation#format()","actiondispatch::http::mimenegotiation#format=()","actiondispatch::http::mimenegotiation#formats()","actioncontroller::caching::fragments#fragment_cache_key()","actioncontroller::caching::fragments#fragment_exist?()","actiondispatch::exceptionwrapper#framework_trace()","actiondispatch::http::cache::request#fresh?()","actioncontroller::conditionalget#fresh_when()","actionview::logsubscriber#from_rails_root()","actiondispatch::testresponse::from_response()","actiondispatch::exceptionwrapper#full_trace()","actiondispatch::request#fullpath()","abstractcontroller::collector::generate_method_for_mime()","actiondispatch::session::compatibility#generate_sid()","actioncontroller::testcase::behavior#get()","actiondispatch::integration::requesthelpers#get()","actiondispatch::routing::mapper::httphelpers#get()","actiondispatch::request#get?()","actiondispatch::session::cachestore#get_session()","actiondispatch::integration::requesthelpers#get_via_redirect()","actionview::helpers::formbuilder#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_options_for_select()","actioncontroller::httpauthentication::digest#ha1()","actioncontroller::logsubscriber#halted_callback()","actioncontroller::requestforgeryprotection#handle_unverified_request()","actionview::template::handlers::erb#handles_encoding?()","actioncontroller::responder#has_errors?()","actioncontroller::head#head()","actioncontroller::testcase::behavior#head()","actiondispatch::integration::requesthelpers#head()","actiondispatch::request#head?()","actiondispatch::request#headers()","actioncontroller::testing#headers=()","abstractcontroller::helpers::classmethods#helper()","actioncontroller::helpers::classmethods#helper_attr()","actionview::testcase::behavior::classmethods#helper_class()","abstractcontroller::helpers::classmethods#helper_method()","actionview::testcase::behavior::classmethods#helper_method()","actioncontroller::helpers::classmethods#helpers()","abstractcontroller::base::hidden_actions()","actionview::helpers::formbuilder#hidden_field()","actionview::helpers::formhelper#hidden_field()","actionview::helpers::formtaghelper#hidden_field_tag()","actioncontroller::hideactions::classmethods#hide_action()","actionview::helpers::texthelper#highlight()","actiondispatch::http::url#host()","actiondispatch::integration::session#host()","actiondispatch::testrequest#host=()","actiondispatch::http::url#host_with_port()","mime::type#html?()","actiondispatch::assertions::tagassertions#html_document()","actioncontroller::httpauthentication::basic::controllermethods::classmethods#http_basic_authenticate_with()","actiondispatch::integration::session#https!()","actiondispatch::integration::session#https?()","actiondispatch::http::cache::request#if_modified_since()","actiondispatch::testrequest#if_modified_since=()","actiondispatch::http::cache::request#if_none_match()","actiondispatch::testrequest#if_none_match=()","actionview::helpers::assettaghelper#image_alt()","actionview::helpers::assettaghelper#image_path()","sprockets::helpers::railshelper#image_path()","actionview::helpers::formtaghelper#image_submit_tag()","actionview::helpers::assettaghelper#image_tag()","actionview::helpers::assettaghelper::assetincludetag#include_tag()","actioncontroller::testcase::raiseactionexceptions::included()","actioncontroller::middleware#index()","abstractcontroller::helpers::classmethods#inherited()","abstractcontroller::layouts::classmethods#inherited()","actioncontroller::hideactions::classmethods#inherited()","actioncontroller::paramswrapper::classmethods#inherited()","actionview::helpers::assettaghelper::assetincludetag::inherited()","actiondispatch::flash::flashhash#initialize_copy()","actiondispatch::middlewarestack#initialize_copy()","actiondispatch::session::compatibility#initialize_sid()","actioncontroller::compatibility#initialize_template_class()","actiondispatch::middlewarestack#insert()","actiondispatch::middlewarestack#insert_after()","actiondispatch::middlewarestack#insert_before()","actiondispatch::middlewarestack::middleware#inspect()","actionview::template#inspect()","actioncontroller::caching::fragments#instrument_fragment_cache()","abstractcontroller::base::internal_methods()","actiondispatch::request#ip()","actiondispatch::remoteip::getip#ips_from()","actionview::helpers::javascripthelper#j()","actionview::helpers::assettaghelper::javascripttaghelpers#javascript_include_tag()","sprockets::helpers::railshelper#javascript_include_tag()","actionview::helpers::assettaghelper::javascripttaghelpers#javascript_path()","sprockets::helpers::railshelper#javascript_path()","actionview::helpers::javascripthelper#javascript_tag()","actioncontroller::responder#json_resource_errors()","actiondispatch::flash::flashhash#keep()","actiondispatch::flash::flashhash#key?()","actiondispatch::request#key?()","actiondispatch::flash::flashhash#keys()","actiondispatch::middlewarestack::middleware#klass()","abstractcontroller::translation#l()","actionview::helpers::translationhelper#l()","actionview::helpers::formbuilder#label()","actionview::helpers::formhelper#label()","actionview::helpers::formtaghelper#label_tag()","actiondispatch::middlewarestack#last()","actiondispatch::http::cache::response#last_modified()","actiondispatch::http::cache::response#last_modified=()","actiondispatch::http::cache::response#last_modified?()","abstractcontroller::layouts::classmethods#layout()","actionview::helpers::urlhelper#link_to()","actionview::helpers::javascripthelper#link_to_function()","actionview::helpers::urlhelper#link_to_if()","actionview::helpers::urlhelper#link_to_unless()","actionview::helpers::urlhelper#link_to_unless_current()","actiondispatch::session::stalesessioncheck#load_session()","actiondispatch::request#local?()","abstractcontroller::translation#localize()","actionview::helpers::translationhelper#localize()","actionview::testcase::behavior#locals()","actioncontroller::metal#location()","actiondispatch::response#location()","actioncontroller::metal#location=()","actiondispatch::response#location=()","actioncontroller::logsubscriber#logger()","actionview::logsubscriber#logger()","mime::type::lookup()","mime::type::lookup_by_extension()","abstractcontroller::viewpaths#lookup_context()","actionview::helpers::urlhelper#mail_to()","actiondispatch::routing::mapper::base#match()","actiondispatch::routing::mapper::resources#match()","html::selector#match()","actiondispatch::filehandler#match?()","actiondispatch::request#media_type()","actiondispatch::routing::mapper::resources#member()","actiondispatch::response#message()","actiondispatch::request#method()","abstractcontroller::base::method_added()","actioncontroller::compatibility#method_for_action()","actioncontroller::implicitrender#method_for_action()","abstractcontroller::collector#method_missing()","actiondispatch::assertions::routingassertions#method_missing()","actiondispatch::bodyproxy#method_missing()","actiondispatch::integration::runner#method_missing()","actiondispatch::request#method_symbol()","actioncontroller::metal::middleware()","actionview::template#mime_type()","abstractcontroller::helpers::classmethods#modules_for_helpers()","actioncontroller::helpers::classmethods#modules_for_helpers()","actiondispatch::routing::mapper::base#mount()","actionview::helpers::formbuilder#multipart=()","actiondispatch::routing::mapper::resources#namespace()","actiondispatch::routing::mapper::scoping#namespace()","actioncontroller::responder#navigation_behavior()","actioncontroller::responder#navigation_location()","actiondispatch::http::mimenegotiation#negotiate_mime()","actiondispatch::routing::mapper::resources#nested()","abstractcontroller::doublerendererror::new()","abstractcontroller::layouts::new()","actioncontroller::caching::actions::actioncachepath::new()","actioncontroller::metal::new()","actioncontroller::middleware::new()","actioncontroller::middleware::new()","actioncontroller::middleware::actionmiddleware::new()","actioncontroller::responder::new()","actiondispatch::beststandardssupport::new()","actiondispatch::bodyproxy::new()","actiondispatch::callbacks::new()","actiondispatch::cookies::new()","actiondispatch::debugexceptions::new()","actiondispatch::exceptionwrapper::new()","actiondispatch::filehandler::new()","actiondispatch::flash::new()","actiondispatch::head::new()","actiondispatch::http::headers::new()","actiondispatch::http::parameterfilter::new()","actiondispatch::http::uploadedfile::new()","actiondispatch::integration::session::new()","actiondispatch::middlewarestack::new()","actiondispatch::middlewarestack::middleware::new()","actiondispatch::paramsparser::new()","actiondispatch::publicexceptions::new()","actiondispatch::railsentitystore::new()","actiondispatch::railsmetastore::new()","actiondispatch::reloader::new()","actiondispatch::remoteip::new()","actiondispatch::remoteip::getip::new()","actiondispatch::requestid::new()","actiondispatch::rescue::new()","actiondispatch::response::new()","actiondispatch::routing::mapper::resources#new()","actiondispatch::routing::urlfor::new()","actiondispatch::session::cachestore::new()","actiondispatch::session::compatibility::new()","actiondispatch::session::memcachestore::new()","actiondispatch::showexceptions::new()","actiondispatch::static::new()","actiondispatch::testrequest::new()","actiondispatch::testrequest::new()","actionview::filesystemresolver::new()","actionview::fixtureresolver::new()","actionview::helpers::assettaghelper::assetincludetag::new()","actionview::helpers::atomfeedhelper::atombuilder::new()","actionview::helpers::atomfeedhelper::atomfeedbuilder::new()","actionview::helpers::formbuilder::new()","actionview::helpers::instancetag::new()","actionview::helpers::numberhelper::invalidnumbererror::new()","actionview::partialrenderer::new()","actionview::renderer::new()","actionview::resolver::new()","actionview::resolver::path::new()","actionview::template::new()","actionview::testcase::behavior::classmethods#new()","actionview::testcase::testcontroller::new()","html::selector::new()","mime::type::new()","sprockets::bootstrap::new()","sprockets::staticcompiler::new()","html::selector#next_element()","html::selector#next_selector()","actioncontroller::httpauthentication::digest#nonce()","actiondispatch::routing::mapper::normalize_name()","actiondispatch::routing::mapper::normalize_path()","actiondispatch::http::cache::request#not_modified?()","actiondispatch::flash::flashhash#notice()","actiondispatch::flash::flashhash#notice=()","actiondispatch::flash::flashhash#now()","actiondispatch::flash::flashhash#now_is_loaded?()","html::selector#nth_child()","actionview::helpers::formhelper#number_field()","actionview::helpers::formtaghelper#number_field_tag()","actionview::helpers::numberhelper#number_to_currency()","actionview::helpers::numberhelper#number_to_human()","actionview::helpers::numberhelper#number_to_human_size()","actionview::helpers::numberhelper#number_to_percentage()","actionview::helpers::numberhelper#number_to_phone()","actionview::helpers::numberhelper#number_with_delimiter()","actionview::helpers::numberhelper#number_with_precision()","actionview::helpers::activemodelinstancetag#object()","html::selector#only_child()","actioncontroller::httpauthentication::digest#opaque()","actiondispatch::railsentitystore#open()","actiondispatch::integration::runner#open_session()","actionview::helpers::formoptionshelper#option_groups_from_collection_for_select()","actiondispatch::http::url#optional_port()","actionview::helpers::formoptionshelper#options_for_select()","actionview::helpers::formoptionshelper#options_from_collection_for_select()","actiondispatch::request#original_fullpath()","actiondispatch::request#original_url()","actiondispatch::http::filterparameters#parameter_filter()","actiondispatch::http::filterparameters#parameter_filter_for()","actiondispatch::http::parameters#parameters()","actioncontroller::testcase::behavior#paramify_values()","actioncontroller::metal#params()","actiondispatch::http::parameters#params()","actioncontroller::metal#params=()","abstractcontroller::viewpaths::classmethods#parent_prefixes()","mime::type::parse()","mime::type::parse_data_with_trailing_star()","actionview::helpers::formhelper#password_field()","actionview::helpers::formtaghelper#password_field_tag()","actiondispatch::testrequest#path=()","sprockets::staticcompiler#path_for()","actiondispatch::http::parameters#path_parameters()","sprockets::helpers::railshelper#path_to_asset()","actionview::helpers::assettaghelper#path_to_audio()","actionview::helpers::assettaghelper#path_to_font()","sprockets::helpers::railshelper#path_to_font()","actionview::helpers::assettaghelper#path_to_image()","sprockets::helpers::railshelper#path_to_image()","actionview::helpers::assettaghelper::javascripttaghelpers#path_to_javascript()","sprockets::helpers::railshelper#path_to_javascript()","actionview::helpers::assettaghelper::stylesheettaghelpers#path_to_stylesheet()","sprockets::helpers::railshelper#path_to_stylesheet()","actionview::helpers::assettaghelper#path_to_video()","actioncontroller::metal#performed?()","actionview::helpers::formhelper#phone_field()","actionview::helpers::formtaghelper#phone_field_tag()","actionview::helpers::texthelper#pluralize()","actiondispatch::routing::polymorphicroutes#polymorphic_path()","actiondispatch::routing::polymorphicroutes#polymorphic_url()","actiondispatch::http::url#port()","actiondispatch::testrequest#port=()","actiondispatch::http::url#port_string()","actioncontroller::testcase::behavior#post()","actiondispatch::integration::requesthelpers#post()","actiondispatch::routing::mapper::httphelpers#post()","actiondispatch::request#post?()","actiondispatch::integration::requesthelpers#post_via_redirect()","actiondispatch::reloader::prepare!()","actiondispatch::response#prepare!()","actioncontroller::testcase::behavior::classmethods#prepare_controller_class()","abstractcontroller::callbacks::classmethods#prepend_after_filter()","abstractcontroller::callbacks::classmethods#prepend_around_filter()","abstractcontroller::callbacks::classmethods#prepend_before_filter()","abstractcontroller::viewpaths#prepend_view_path()","abstractcontroller::viewpaths::classmethods#prepend_view_path()","abstractcontroller::base#process()","actioncontroller::middleware#process()","actioncontroller::templateassertions#process()","actioncontroller::testcase::behavior#process()","abstractcontroller::callbacks#process_action()","actioncontroller::instrumentation#process_action()","actioncontroller::logsubscriber#process_action()","actioncontroller::paramswrapper#process_action()","html::whitelistsanitizer#process_attributes_for()","html::fullsanitizer#process_node()","html::linksanitizer#process_node()","html::sanitizer#process_node()","html::whitelistsanitizer#process_node()","actionview::base::process_view_paths()","actioncontroller::testing#process_with_new_base_test()","actioncontroller::requestforgeryprotection#protect_against_forgery?()","actioncontroller::requestforgeryprotection::classmethods#protect_from_forgery()","actiondispatch::http::url#protocol()","actionview::helpers::capturehelper#provide()","actioncontroller::testcase::behavior#put()","actiondispatch::integration::requesthelpers#put()","actiondispatch::routing::mapper::httphelpers#put()","actiondispatch::request#put?()","actiondispatch::integration::requesthelpers#put_via_redirect()","actionview::nullresolver#query()","actiondispatch::request#query_parameters()","actiondispatch::testrequest#rack_cookies()","actionview::helpers::formbuilder#radio_button()","actionview::helpers::formhelper#radio_button()","actionview::helpers::instancetag::radio_button_checked?()","actionview::helpers::formtaghelper#radio_button_tag()","actionview::helpers::formhelper#range_field()","actionview::helpers::formtaghelper#range_field_tag()","actionview::helpers::outputsafetyhelper#raw()","actiondispatch::http::url#raw_host_with_port()","actiondispatch::request#raw_post()","actiondispatch::http::uploadedfile#read()","actiondispatch::railsentitystore#read()","actiondispatch::railsmetastore#read()","actioncontroller::caching::fragments#read_fragment()","actioncontroller::recordidentifier#record_key_for_dom_id()","actioncontroller::testresponse#recycle!()","actioncontroller::testing#recycle!()","actiondispatch::routing::redirection#redirect()","actioncontroller::flash#redirect_to()","actioncontroller::instrumentation#redirect_to()","actioncontroller::logsubscriber#redirect_to()","actioncontroller::redirecting#redirect_to()","actiondispatch::testprocess#redirect_to_url()","actiondispatch::response#redirect_url()","mime::type#ref()","actionview::template#refresh()","mime::type::register()","mime::type::register_alias()","sprockets::compressors::register_css_compressor()","actionview::helpers::assettaghelper::javascripttaghelpers::classmethods#register_javascript_expansion()","sprockets::compressors::register_js_compressor()","actionview::helpers::assettaghelper::stylesheettaghelpers::classmethods#register_stylesheet_expansion()","sprockets::compressors::registered_css_compressor()","sprockets::compressors::registered_js_compressor()","actiondispatch::testrequest#remote_addr=()","actiondispatch::request#remote_ip()","abstractcontroller::rendering#render()","actioncontroller::instrumentation#render()","actionview::helpers::renderinghelper#render()","actionview::partialrenderer#render()","actionview::renderer#render()","actionview::template#render()","actionview::testcase::behavior#render()","actionview::testcase::behavior::locals#render()","actionview::renderer#render_body()","actionview::logsubscriber#render_collection()","actionview::partialrenderer#render_collection()","actionview::logsubscriber#render_partial()","actionview::partialrenderer#render_partial()","actionview::logsubscriber#render_template()","abstractcontroller::rendering#render_to_body()","actioncontroller::compatibility#render_to_body()","actioncontroller::renderers#render_to_body()","abstractcontroller::rendering#render_to_string()","actioncontroller::rendering#render_to_string()","actioncontroller::httpauthentication::basic::controllermethods#request_http_basic_authentication()","actioncontroller::httpauthentication::digest::controllermethods#request_http_digest_authentication()","actioncontroller::httpauthentication::token::controllermethods#request_http_token_authentication()","actiondispatch::request#request_method()","actiondispatch::testrequest#request_method=()","actiondispatch::request#request_method_symbol()","actiondispatch::request#request_parameters()","actiondispatch::testrequest#request_uri=()","actiondispatch::integration::requesthelpers#request_via_redirect()","actionview::template::handlers::builder#require_engine()","actioncontroller::compatibility#rescue_action()","actioncontroller::testcase::raiseactionexceptions#rescue_action_without_handler()","actiondispatch::rescue#rescue_from()","actiondispatch::showexceptions::rescue_responses()","actiondispatch::exceptionwrapper#rescue_template()","actiondispatch::showexceptions::rescue_templates()","actioncontroller::rescue#rescue_with_handler()","actiondispatch::integration::runner#reset!()","actiondispatch::integration::session#reset!()","actionview::helpers::texthelper#reset_cycle()","actioncontroller::rackdelegation#reset_session()","actiondispatch::request#reset_session()","actiondispatch::railsentitystore::resolve()","actiondispatch::railsmetastore::resolve()","actiondispatch::routing::mapper::resources#resource()","actioncontroller::responder#resource_errors()","actioncontroller::responder#resource_location()","actioncontroller::responder#resourceful?()","actiondispatch::routing::mapper::resources#resources()","actiondispatch::routing::mapper::resources#resources_path_names()","actioncontroller::responder#respond()","actioncontroller::mimeresponds#respond_to()","actioncontroller::mimeresponds::classmethods#respond_to()","actiondispatch::bodyproxy#respond_to?()","actiondispatch::integration::runner#respond_to?()","actiondispatch::response#respond_to?()","actioncontroller::mimeresponds#respond_with()","actioncontroller::metal#response_body=()","actioncontroller::rackdelegation#response_body=()","actiondispatch::response#response_code()","actiondispatch::assertions::selectorassertions#response_from_page()","actioncontroller::responder#response_overridden?()","actionview::helpers::instancetag#retrieve_autoindex()","actionview::helpers::instancetag#retrieve_object()","actiondispatch::routing::mapper::base#root()","actiondispatch::routing::mapper::resources#root()","sprockets::bootstrap#run()","actionview::helpers::texthelper#safe_concat()","actionview::helpers::outputsafetyhelper#safe_join()","actionview::helpers::sanitizehelper#sanitize()","html::fullsanitizer#sanitize()","html::sanitizer#sanitize()","actionview::helpers::sanitizehelper#sanitize_css()","html::whitelistsanitizer#sanitize_css()","actioncontroller::recordidentifier#sanitize_dom_id()","html::linksanitizer#sanitizeable?()","html::sanitizer#sanitizeable?()","actiondispatch::routing::mapper::scoping#scope()","actionview::helpers::formhelper#search_field()","actionview::helpers::formtaghelper#search_field_tag()","actioncontroller::httpauthentication::digest#secret_token()","actionview::helpers::formbuilder#select()","actionview::helpers::formoptionshelper#select()","html::selector#select()","html::tag#select()","actionview::helpers::datehelper#select_date()","actionview::helpers::datehelper#select_datetime()","actionview::helpers::datehelper#select_day()","html::selector#select_first()","actionview::helpers::datehelper#select_hour()","actionview::helpers::datehelper#select_minute()","actionview::helpers::datehelper#select_month()","actionview::helpers::datehelper#select_second()","actionview::helpers::formtaghelper#select_tag()","actionview::helpers::datehelper#select_time()","actionview::helpers::datehelper#select_year()","html::selector()","actioncontroller::implicitrender#send_action()","actioncontroller::datastreaming#send_data()","actioncontroller::instrumentation#send_data()","actioncontroller::logsubscriber#send_data()","actioncontroller::datastreaming#send_file()","actioncontroller::instrumentation#send_file()","actioncontroller::logsubscriber#send_file()","actiondispatch::http::url#server_port()","actiondispatch::request#server_software()","actiondispatch::testprocess#session()","actiondispatch::request#session_options=()","actiondispatch::response#set_cookie()","actiondispatch::session::cachestore#set_session()","actioncontroller::testcase::behavior#setup_controller_request_and_response()","actioncontroller::templateassertions#setup_subscriptions()","actionview::testcase::behavior#setup_with_controller()","actiondispatch::routing::mapper::resources#shallow()","actiondispatch::routing::mapper::resources#shallow?()","actioncontroller::rescue#show_detailed_exceptions?()","actionview::helpers::texthelper#simple_format()","html::selector#simple_selector()","actiondispatch::middlewarestack#size()","abstractcontroller::callbacks::classmethods#skip_after_filter()","abstractcontroller::callbacks::classmethods#skip_around_filter()","abstractcontroller::callbacks::classmethods#skip_before_filter()","abstractcontroller::callbacks::classmethods#skip_filter()","actioncontroller::conditionalget#stale?()","actiondispatch::session::stalesessioncheck#stale_session_check!()","actiondispatch::http::url#standard_port()","actiondispatch::http::url#standard_port?()","actioncontroller::logsubscriber#start_processing()","actioncontroller::metal#status()","actioncontroller::metal#status=()","actiondispatch::response#status=()","actiondispatch::exceptionwrapper#status_code()","actiondispatch::response#status_message()","actionview::helpers::sanitizehelper#strip_links()","actionview::helpers::sanitizehelper#strip_tags()","actionview::helpers::assettaghelper::stylesheettaghelpers#stylesheet_link_tag()","sprockets::helpers::railshelper#stylesheet_link_tag()","actionview::helpers::assettaghelper::stylesheettaghelpers#stylesheet_path()","sprockets::helpers::railshelper#stylesheet_path()","actiondispatch::http::url#subdomain()","actiondispatch::http::url#subdomains()","actionview::helpers::formbuilder#submit()","actionview::helpers::formtaghelper#submit_tag()","actionview::template#supports_streaming?()","actionview::template::handlers::erb#supports_streaming?()","actiondispatch::middlewarestack#swap()","actiondispatch::http::parameters#symbolized_path_parameters()","mime::mimes#symbols()","abstractcontroller::translation#t()","actionview::helpers::translationhelper#t()","actionview::helpers::activemodelinstancetag#tag()","actionview::helpers::taghelper#tag()","actioncontroller::templateassertions#teardown_subscriptions()","actionview::helpers::formhelper#telephone_field()","actionview::helpers::formtaghelper#telephone_field_tag()","actionview::lookupcontext::viewpaths#template_exists?()","actioncontroller::testcase::behavior::classmethods#tests()","actionview::testcase::behavior::classmethods#tests()","actionview::helpers::formhelper#text_area()","actionview::helpers::formtaghelper#text_area_tag()","actionview::helpers::formhelper#text_field()","actionview::helpers::formtaghelper#text_field_tag()","actionview::helpers::datehelper#time_ago_in_words()","actionview::helpers::datehelper#time_select()","actionview::helpers::formbuilder#time_select()","actionview::helpers::datehelper#time_tag()","actionview::helpers::formoptionshelper#time_zone_options_for_select()","actionview::helpers::formbuilder#time_zone_select()","actionview::helpers::formoptionshelper#time_zone_select()","actiondispatch::response#to_a()","actiondispatch::response#to_ary()","actionview::helpers::instancetag#to_boolean_select_tag()","actionview::helpers::instancetag#to_check_box_tag()","actiondispatch::reloader::to_cleanup()","actionview::helpers::instancetag#to_content_tag()","actionview::helpers::datehelperinstancetag#to_date_select_tag()","actionview::helpers::datehelperinstancetag#to_datetime_select_tag()","actioncontroller::responder#to_format()","actiondispatch::flash::flashhash#to_hash()","actioncontroller::responder#to_html()","actionview::helpers::instancetag#to_input_field_tag()","actioncontroller::responder#to_js()","actionview::helpers::instancetag#to_label_tag()","actionview::helpers::formbuilder#to_model()","actionview::helpers::instancetag#to_number_field_tag()","actionview::helpers::formbuilder#to_partial_path()","actiondispatch::response#to_path()","actionview::filesystemresolver#to_path()","actiondispatch::reloader::to_prepare()","actionview::helpers::instancetag#to_radio_button_tag()","actiondispatch::remoteip::getip#to_s()","actionview::filesystemresolver#to_s()","actionview::fixtureresolver#to_s()","mime::type#to_s()","mime::type#to_str()","mime::type#to_sym()","actionview::helpers::instancetag#to_text_area_tag()","actionview::helpers::datehelperinstancetag#to_time_select_tag()","actioncontroller::httpauthentication::token#token_and_options()","html::sanitizer#tokenize()","html::whitelistsanitizer#tokenize()","abstractcontroller::translation#translate()","actionview::helpers::translationhelper#translate()","actionview::helpers::texthelper#truncate()","actiondispatch::filehandler#unescape_path()","mime::type::unregister()","actionview::helpers::atomfeedhelper::atomfeedbuilder#updated()","actiondispatch::http::url#url()","actionview::helpers::formhelper#url_field()","actionview::helpers::formtaghelper#url_field_tag()","actioncontroller::metal#url_for()","actiondispatch::http::url::url_for()","actiondispatch::routing::urlfor#url_for()","actionview::helpers::urlhelper#url_for()","actioncontroller::urlfor#url_options()","actiondispatch::integration::runner#url_options()","actiondispatch::routing::urlfor#url_options()","actionview::helpers::urlhelper#url_options()","actioncontroller::metal::use()","actiondispatch::flash::flashhash#use()","actiondispatch::middlewarestack#use()","actiondispatch::http::mimenegotiation#use_accept_header()","actioncontroller::renderers::classmethods#use_renderer()","actioncontroller::renderers::classmethods#use_renderers()","actiondispatch::testrequest#user_agent=()","actioncontroller::httpauthentication::basic#user_name_and_password()","actionview::helpers::formtaghelper#utf8_enforcer_tag()","actiondispatch::request#uuid()","actiondispatch::http::mimenegotiation#valid_accept_header()","actioncontroller::httpauthentication::digest#validate_digest_response()","actioncontroller::httpauthentication::digest#validate_nonce()","actionview::helpers::instancetag::value()","actionview::helpers::instancetag#value()","actionview::helpers::instancetag#value_before_type_cast()","actionview::helpers::instancetag::value_before_type_cast()","actioncontroller::requestforgeryprotection#verified_request?()","actioncontroller::requestforgeryprotection#verify_authenticity_token()","mime::type#verify_request?()","actionview::helpers::assettaghelper#video_path()","actionview::helpers::assettaghelper#video_tag()","abstractcontroller::rendering#view_assigns()","abstractcontroller::rendering#view_context()","abstractcontroller::rendering#view_context_class()","abstractcontroller::rendering::classmethods#view_context_class()","abstractcontroller::viewpaths::classmethods#view_paths()","abstractcontroller::viewpaths::classmethods#view_paths=()","actionview::lookupcontext::viewpaths#view_paths=()","abstractcontroller::rendering#view_renderer()","actioncontroller::hideactions::classmethods#visible_action?()","abstractcontroller::railties::routeshelpers::with()","actioncontroller::railties::paths::with()","actiondispatch::routing::mapper::base#with_default_scope()","actiondispatch::routing::mapper::resources#with_exclusive_scope()","actionview::lookupcontext::viewpaths#with_fallbacks()","actiondispatch::assertions::routingassertions#with_routing()","actiondispatch::routing::mapper::resources#with_scope_level()","actioncontroller::base::without_modules()","actionview::helpers::texthelper#word_wrap()","actioncontroller::paramswrapper::classmethods#wrap_parameters()","actiondispatch::railsentitystore#write()","actiondispatch::railsmetastore#write()","sprockets::staticcompiler#write_asset()","actioncontroller::caching::fragments#write_fragment()","sprockets::staticcompiler#write_manifest()","actioncontroller::testcase::behavior#xhr()","actiondispatch::integration::requesthelpers#xhr()","actiondispatch::request#xhr?()","actioncontroller::testcase::behavior#xml_http_request()","actiondispatch::integration::requesthelpers#xml_http_request()","actiondispatch::request#xml_http_request?()"],"info":[["AbstractController","","AbstractController.html","","<p>Includes <code>url_for</code> into the host class (e.g. an abstract\ncontroller or mailer). The class has to provide …\n"],["AbstractController::ActionNotFound","","AbstractController/ActionNotFound.html","",""],["AbstractController::AssetPaths","","AbstractController/AssetPaths.html","",""],["AbstractController::Base","","AbstractController/Base.html","","<p><code>AbstractController::Base</code> is a low-level API. Nobody should be\nusing it directly, and subclasses (like ...\n"],["AbstractController::Callbacks","","AbstractController/Callbacks.html","",""],["AbstractController::Callbacks::ClassMethods","","AbstractController/Callbacks/ClassMethods.html","",""],["AbstractController::Collector","","AbstractController/Collector.html","",""],["AbstractController::DoubleRenderError","","AbstractController/DoubleRenderError.html","",""],["AbstractController::Error","","AbstractController/Error.html","",""],["AbstractController::Helpers","","AbstractController/Helpers.html","",""],["AbstractController::Helpers::ClassMethods","","AbstractController/Helpers/ClassMethods.html","",""],["AbstractController::Layouts","","AbstractController/Layouts.html","","<p>Layouts reverse the common pattern of including shared headers and footers\nin many templates to isolate …\n"],["AbstractController::Layouts::ClassMethods","","AbstractController/Layouts/ClassMethods.html","",""],["AbstractController::Layouts::ClassMethods::LayoutConditions","","AbstractController/Layouts/ClassMethods/LayoutConditions.html","","<p>This module is mixed in if layout conditions are provided. This means that\nif no layout conditions are …\n"],["AbstractController::Logger","","AbstractController/Logger.html","",""],["AbstractController::Railties","","AbstractController/Railties.html","",""],["AbstractController::Railties::RoutesHelpers","","AbstractController/Railties/RoutesHelpers.html","",""],["AbstractController::Rendering","","AbstractController/Rendering.html","",""],["AbstractController::Rendering::ClassMethods","","AbstractController/Rendering/ClassMethods.html","",""],["AbstractController::Translation","","AbstractController/Translation.html","",""],["AbstractController::UrlFor","","AbstractController/UrlFor.html","",""],["AbstractController::UrlFor::ClassMethods","","AbstractController/UrlFor/ClassMethods.html","",""],["AbstractController::ViewPaths","","AbstractController/ViewPaths.html","",""],["AbstractController::ViewPaths::ClassMethods","","AbstractController/ViewPaths/ClassMethods.html","",""],["ActionController","","ActionController.html","","<p>Includes <code>url_for</code> into the host class. The class has to provide\na <code>RouteSet</code> by implementing  the <code>_routes</code> …\n"],["ActionController::Base","","ActionController/Base.html","","<p>Action Controllers are the core of a web request in Rails. They are made up\nof one or more actions that …\n"],["ActionController::Caching","","ActionController/Caching.html","","<p>Caching is a cheap way of speeding up slow applications by keeping the\nresult of calculations, renderings, …\n"],["ActionController::Caching::Actions","","ActionController/Caching/Actions.html","","<p>Action caching is similar to page caching by the fact that the entire\noutput of the response is cached, …\n"],["ActionController::Caching::Actions::ActionCachePath","","ActionController/Caching/Actions/ActionCachePath.html","",""],["ActionController::Caching::Actions::ClassMethods","","ActionController/Caching/Actions/ClassMethods.html","",""],["ActionController::Caching::ConfigMethods","","ActionController/Caching/ConfigMethods.html","",""],["ActionController::Caching::Fragments","","ActionController/Caching/Fragments.html","","<p>Fragment caching is used for caching various blocks within  views without\ncaching the entire action as …\n"],["ActionController::Caching::Pages","","ActionController/Caching/Pages.html","","<p>Page caching is an approach to caching where the entire action output of is\nstored as a HTML file that …\n"],["ActionController::Caching::Pages::ClassMethods","","ActionController/Caching/Pages/ClassMethods.html","",""],["ActionController::Caching::Sweeping","","ActionController/Caching/Sweeping.html","","<p>Sweepers are the terminators of the caching world and responsible for\nexpiring caches when model objects …\n"],["ActionController::Compatibility","","ActionController/Compatibility.html","",""],["ActionController::ConditionalGet","","ActionController/ConditionalGet.html","",""],["ActionController::Cookies","","ActionController/Cookies.html","",""],["ActionController::DataStreaming","","ActionController/DataStreaming.html","","<p>Methods for sending arbitrary data and for streaming files to the browser,\ninstead of rendering.\n"],["ActionController::Flash","","ActionController/Flash.html","",""],["ActionController::ForceSSL","","ActionController/ForceSSL.html","","<p>This module provides a method which will redirect browser to use HTTPS\nprotocol. This will ensure that …\n"],["ActionController::ForceSSL::ClassMethods","","ActionController/ForceSSL/ClassMethods.html","",""],["ActionController::Head","","ActionController/Head.html","",""],["ActionController::Helpers","","ActionController/Helpers.html","","<p>The Rails framework provides a large number of helpers for working with\nassets, dates, forms, numbers …\n"],["ActionController::Helpers::ClassMethods","","ActionController/Helpers/ClassMethods.html","",""],["ActionController::HideActions","","ActionController/HideActions.html","","<p>Adds the ability to prevent public methods on a controller to be called as\nactions.\n"],["ActionController::HideActions::ClassMethods","","ActionController/HideActions/ClassMethods.html","",""],["ActionController::HttpAuthentication","","ActionController/HttpAuthentication.html","",""],["ActionController::HttpAuthentication::Basic","","ActionController/HttpAuthentication/Basic.html","","<p>Makes it dead easy to do HTTP Basic and Digest authentication.\n<p>Simple Basic example\n\n<pre class=\"ruby\"> <span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Basic::ControllerMethods","","ActionController/HttpAuthentication/Basic/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods","","ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html","",""],["ActionController::HttpAuthentication::Digest","","ActionController/HttpAuthentication/Digest.html","",""],["ActionController::HttpAuthentication::Digest::ControllerMethods","","ActionController/HttpAuthentication/Digest/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Token","","ActionController/HttpAuthentication/Token.html","","<p>Makes it dead easy to do HTTP Token authentication.\n<p>Simple Token example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ApplicationController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Token::ControllerMethods","","ActionController/HttpAuthentication/Token/ControllerMethods.html","",""],["ActionController::ImplicitRender","","ActionController/ImplicitRender.html","",""],["ActionController::Instrumentation","","ActionController/Instrumentation.html","","<p>Adds instrumentation to several ends in ActionController::Base. It also\nprovides some hooks related with …\n"],["ActionController::Instrumentation::ClassMethods","","ActionController/Instrumentation/ClassMethods.html","",""],["ActionController::LogSubscriber","","ActionController/LogSubscriber.html","",""],["ActionController::Metal","","ActionController/Metal.html","","<p><code>ActionController::Metal</code> is the simplest possible controller,\nproviding a valid Rack interface without ...\n"],["ActionController::Middleware","","ActionController/Middleware.html","",""],["ActionController::Middleware::ActionMiddleware","","ActionController/Middleware/ActionMiddleware.html","",""],["ActionController::MimeResponds","","ActionController/MimeResponds.html","",""],["ActionController::MimeResponds::ClassMethods","","ActionController/MimeResponds/ClassMethods.html","",""],["ActionController::ParamsWrapper","","ActionController/ParamsWrapper.html","","<p>Wraps the parameters hash into a nested hash. This will allow clients to\nsubmit POST requests without …\n"],["ActionController::ParamsWrapper::ClassMethods","","ActionController/ParamsWrapper/ClassMethods.html","",""],["ActionController::RackDelegation","","ActionController/RackDelegation.html","",""],["ActionController::Railtie","","ActionController/Railtie.html","",""],["ActionController::Railties","","ActionController/Railties.html","",""],["ActionController::Railties::Paths","","ActionController/Railties/Paths.html","",""],["ActionController::RecordIdentifier","","ActionController/RecordIdentifier.html","","<p>The record identifier encapsulates a number of naming conventions for\ndealing with records, like Active …\n"],["ActionController::Redirecting","","ActionController/Redirecting.html","",""],["ActionController::Renderers","","ActionController/Renderers.html","",""],["ActionController::Renderers::All","","ActionController/Renderers/All.html","",""],["ActionController::Renderers::ClassMethods","","ActionController/Renderers/ClassMethods.html","",""],["ActionController::Rendering","","ActionController/Rendering.html","",""],["ActionController::RequestForgeryProtection","","ActionController/RequestForgeryProtection.html","","<p>Controller actions are protected from Cross-Site Request Forgery (CSRF)\nattacks by including a token …\n"],["ActionController::RequestForgeryProtection::ClassMethods","","ActionController/RequestForgeryProtection/ClassMethods.html","",""],["ActionController::Rescue","","ActionController/Rescue.html","","<p>This module is responsible to provide `rescue_from` helpers to controllers\nand configure when detailed …\n"],["ActionController::Responder","","ActionController/Responder.html","","<p>Responsible for exposing a resource to different mime requests, usually\ndepending on the HTTP verb.  …\n"],["ActionController::SessionManagement","","ActionController/SessionManagement.html","",""],["ActionController::SessionManagement::ClassMethods","","ActionController/SessionManagement/ClassMethods.html","",""],["ActionController::Streaming","","ActionController/Streaming.html","","<p>Allows views to be streamed back to the client as they are rendered.\n<p>The default way Rails renders views …\n"],["ActionController::TemplateAssertions","","ActionController/TemplateAssertions.html","",""],["ActionController::TestCase","","ActionController/TestCase.html","","<p>Superclass for ActionController functional tests. Functional tests allow\nyou to test a single controller …\n"],["ActionController::TestCase::Behavior","","ActionController/TestCase/Behavior.html","",""],["ActionController::TestCase::Behavior::ClassMethods","","ActionController/TestCase/Behavior/ClassMethods.html","",""],["ActionController::TestCase::RaiseActionExceptions","","ActionController/TestCase/RaiseActionExceptions.html","","<p>When the request.remote_addr remains the default for testing, which is\n0.0.0.0, the exception is simply …\n"],["ActionController::TestResponse","","ActionController/TestResponse.html","",""],["ActionController::Testing","","ActionController/Testing.html","",""],["ActionController::Testing::ClassMethods","","ActionController/Testing/ClassMethods.html","",""],["ActionController::UrlFor","","ActionController/UrlFor.html","",""],["ActionDispatch","","ActionDispatch.html","","<p>Keep this file meanwhile github.com/rack/rack/pull/313 is not released\n"],["ActionDispatch::Assertions","","ActionDispatch/Assertions.html","",""],["ActionDispatch::Assertions::DomAssertions","","ActionDispatch/Assertions/DomAssertions.html","",""],["ActionDispatch::Assertions::ResponseAssertions","","ActionDispatch/Assertions/ResponseAssertions.html","","<p>A small suite of assertions that test responses from Rails applications.\n"],["ActionDispatch::Assertions::RoutingAssertions","","ActionDispatch/Assertions/RoutingAssertions.html","","<p>Suite of assertions to test routes generated by Rails and the handling of\nrequests made to them.\n"],["ActionDispatch::Assertions::SelectorAssertions","","ActionDispatch/Assertions/SelectorAssertions.html","","<p>Adds the <code>assert_select</code> method for use in Rails functional test\ncases, which can be used to make assertions …\n"],["ActionDispatch::Assertions::TagAssertions","","ActionDispatch/Assertions/TagAssertions.html","","<p>Pair of assertions to testing elements in the HTML output of the response.\n"],["ActionDispatch::BestStandardsSupport","","ActionDispatch/BestStandardsSupport.html","",""],["ActionDispatch::BodyProxy","","ActionDispatch/BodyProxy.html","",""],["ActionDispatch::Callbacks","","ActionDispatch/Callbacks.html","","<p>Provide callbacks to be executed before and after the request dispatch.\n"],["ActionDispatch::Cookies","","ActionDispatch/Cookies.html","","<p>Cookies are read and written through ActionController#cookies.\n<p>The cookies being read are the ones received …\n"],["ActionDispatch::Cookies::CookieOverflow","","ActionDispatch/Cookies/CookieOverflow.html","","<p>Raised when storing more than 4K of session data.\n"],["ActionDispatch::DebugExceptions","","ActionDispatch/DebugExceptions.html","","<p>This middleware is responsible for logging exceptions and showing a\ndebugging page in case the request …\n"],["ActionDispatch::ExceptionWrapper","","ActionDispatch/ExceptionWrapper.html","",""],["ActionDispatch::FileHandler","","ActionDispatch/FileHandler.html","",""],["ActionDispatch::Flash","","ActionDispatch/Flash.html","","<p>The flash provides a way to pass temporary objects between actions.\nAnything you place in the flash will …\n"],["ActionDispatch::Flash::FlashHash","","ActionDispatch/Flash/FlashHash.html","","<p>Implementation detail: please do not change the signature of the FlashHash\nclass. Doing that will likely …\n"],["ActionDispatch::Head","","ActionDispatch/Head.html","",""],["ActionDispatch::Http","","ActionDispatch/Http.html","",""],["ActionDispatch::Http::Cache","","ActionDispatch/Http/Cache.html","",""],["ActionDispatch::Http::Cache::Request","","ActionDispatch/Http/Cache/Request.html","",""],["ActionDispatch::Http::Cache::Response","","ActionDispatch/Http/Cache/Response.html","",""],["ActionDispatch::Http::FilterParameters","","ActionDispatch/Http/FilterParameters.html","","<p>Allows you to specify sensitive parameters which will be replaced from the\nrequest log by looking in …\n"],["ActionDispatch::Http::Headers","","ActionDispatch/Http/Headers.html","",""],["ActionDispatch::Http::MimeNegotiation","","ActionDispatch/Http/MimeNegotiation.html","",""],["ActionDispatch::Http::ParameterFilter","","ActionDispatch/Http/ParameterFilter.html","",""],["ActionDispatch::Http::Parameters","","ActionDispatch/Http/Parameters.html","",""],["ActionDispatch::Http::URL","","ActionDispatch/Http/URL.html","",""],["ActionDispatch::Http::Upload","","ActionDispatch/Http/Upload.html","",""],["ActionDispatch::Http::UploadedFile","","ActionDispatch/Http/UploadedFile.html","",""],["ActionDispatch::Integration","","ActionDispatch/Integration.html","",""],["ActionDispatch::Integration::RequestHelpers","","ActionDispatch/Integration/RequestHelpers.html","",""],["ActionDispatch::Integration::Runner","","ActionDispatch/Integration/Runner.html","",""],["ActionDispatch::Integration::Session","","ActionDispatch/Integration/Session.html","","<p>An instance of this class represents a set of requests and responses\nperformed sequentially by a test …\n"],["ActionDispatch::IntegrationTest","","ActionDispatch/IntegrationTest.html","","<p>An integration test spans multiple controllers and actions, tying them all\ntogether to ensure they work …\n"],["ActionDispatch::MiddlewareStack","","ActionDispatch/MiddlewareStack.html","",""],["ActionDispatch::MiddlewareStack::Middleware","","ActionDispatch/MiddlewareStack/Middleware.html","",""],["ActionDispatch::ParamsParser","","ActionDispatch/ParamsParser.html","",""],["ActionDispatch::PerformanceTest","","ActionDispatch/PerformanceTest.html","","<p>An integration test that runs a code profiler on your test methods.\nProfiling output for combinations …\n"],["ActionDispatch::PublicExceptions","","ActionDispatch/PublicExceptions.html","","<p>A simple Rack application that renders exceptions in the given public path.\n"],["ActionDispatch::RailsEntityStore","","ActionDispatch/RailsEntityStore.html","",""],["ActionDispatch::RailsMetaStore","","ActionDispatch/RailsMetaStore.html","",""],["ActionDispatch::Railtie","","ActionDispatch/Railtie.html","",""],["ActionDispatch::Reloader","","ActionDispatch/Reloader.html","","<p>ActionDispatch::Reloader provides prepare and cleanup callbacks, intended\nto assist with code reloading …\n"],["ActionDispatch::RemoteIp","","ActionDispatch/RemoteIp.html","",""],["ActionDispatch::RemoteIp::GetIp","","ActionDispatch/RemoteIp/GetIp.html","",""],["ActionDispatch::RemoteIp::IpSpoofAttackError","","ActionDispatch/RemoteIp/IpSpoofAttackError.html","",""],["ActionDispatch::Request","","ActionDispatch/Request.html","",""],["ActionDispatch::RequestId","","ActionDispatch/RequestId.html","","<p>Makes a unique request id available to the action_dispatch.request_id env\nvariable (which is then accessible …\n"],["ActionDispatch::Rescue","","ActionDispatch/Rescue.html","",""],["ActionDispatch::Response","","ActionDispatch/Response.html","","<p>Represents an HTTP response generated by a controller action. Use it to\nretrieve the current state of …\n"],["ActionDispatch::Routing","","ActionDispatch/Routing.html","","<p>The routing module provides URL rewriting in native Ruby. It’s a way to\nredirect incoming requests to …\n"],["ActionDispatch::Routing::Mapper","","ActionDispatch/Routing/Mapper.html","",""],["ActionDispatch::Routing::Mapper::Base","","ActionDispatch/Routing/Mapper/Base.html","",""],["ActionDispatch::Routing::Mapper::HttpHelpers","","ActionDispatch/Routing/Mapper/HttpHelpers.html","",""],["ActionDispatch::Routing::Mapper::Resources","","ActionDispatch/Routing/Mapper/Resources.html","","<p>Resource routing allows you to quickly declare all of the common routes for\na given resourceful controller. …\n"],["ActionDispatch::Routing::Mapper::Scoping","","ActionDispatch/Routing/Mapper/Scoping.html","","<p>You may wish to organize groups of controllers under a namespace. Most\ncommonly, you might group a number …\n"],["ActionDispatch::Routing::PolymorphicRoutes","","ActionDispatch/Routing/PolymorphicRoutes.html","","<p>Polymorphic URL helpers are methods for smart resolution to a named route\ncall when given an Active  …\n"],["ActionDispatch::Routing::Redirection","","ActionDispatch/Routing/Redirection.html","",""],["ActionDispatch::Routing::RouteSet","","ActionDispatch/Routing/RouteSet.html","",""],["ActionDispatch::Routing::RouteSet::MountedHelpers","","ActionDispatch/Routing/RouteSet/MountedHelpers.html","",""],["ActionDispatch::Routing::UrlFor","","ActionDispatch/Routing/UrlFor.html","","<p>In <code>config/routes.rb</code> you define URL-to-controller mappings, but\nthe reverse is also possible: an URL can …\n"],["ActionDispatch::Session","","ActionDispatch/Session.html","",""],["ActionDispatch::Session::AbstractStore","","ActionDispatch/Session/AbstractStore.html","",""],["ActionDispatch::Session::CacheStore","","ActionDispatch/Session/CacheStore.html","","<p>Session store that uses an ActiveSupport::Cache::Store to store the\nsessions. This store is most useful …\n"],["ActionDispatch::Session::Compatibility","","ActionDispatch/Session/Compatibility.html","",""],["ActionDispatch::Session::CookieStore","","ActionDispatch/Session/CookieStore.html","","<p>This cookie-based session store is the Rails default. Sessions typically\ncontain at most a user_id and …\n"],["ActionDispatch::Session::DestroyableSession","","ActionDispatch/Session/DestroyableSession.html","",""],["ActionDispatch::Session::MemCacheStore","","ActionDispatch/Session/MemCacheStore.html","",""],["ActionDispatch::Session::StaleSessionCheck","","ActionDispatch/Session/StaleSessionCheck.html","",""],["ActionDispatch::ShowExceptions","","ActionDispatch/ShowExceptions.html","","<p>This middleware rescues any exception returned by the application and calls\nan exceptions app that will …\n"],["ActionDispatch::Static","","ActionDispatch/Static.html","",""],["ActionDispatch::TestProcess","","ActionDispatch/TestProcess.html","",""],["ActionDispatch::TestRequest","","ActionDispatch/TestRequest.html","",""],["ActionDispatch::TestResponse","","ActionDispatch/TestResponse.html","","<p>Integration test methods such as ActionDispatch::Integration::Session#get\nand ActionDispatch::Integration::Session#post …\n"],["ActionPack","","ActionPack.html","",""],["ActionView","","ActionView.html","",""],["ActionView::Base","","ActionView/Base.html","","<p>Action View Base\n<p>Action View templates can be written in several ways. If the template file\nhas a <code>.erb</code> …\n"],["ActionView::Context","","ActionView/Context.html","","<p>Action View Context\n<p>Action View contexts are supplied to Action Controller to render template.\nThe default …\n"],["ActionView::FileSystemResolver","","ActionView/FileSystemResolver.html","","<p>A resolver that loads files from the filesystem. It allows to set your own\nresolving pattern. Such pattern …\n"],["ActionView::FixtureResolver","","ActionView/FixtureResolver.html","","<p>Use FixtureResolver in your tests to simulate the presence of files on the\nfile system. This is used …\n"],["ActionView::Helpers","","ActionView/Helpers.html","","<p>Action View Translation Helpers\n<p>Action View Debug Helper\n<p>Provides a set of methods for making it easier …\n"],["ActionView::Helpers::ActiveModelHelper","","ActionView/Helpers/ActiveModelHelper.html","",""],["ActionView::Helpers::ActiveModelInstanceTag","","ActionView/Helpers/ActiveModelInstanceTag.html","",""],["ActionView::Helpers::AssetPaths","","ActionView/AssetPaths.html","",""],["ActionView::Helpers::AssetTagHelper","","ActionView/Helpers/AssetTagHelper.html","","<p>This module provides methods for generating HTML that links views to assets\nsuch as images, javascripts, …\n"],["ActionView::Helpers::AssetTagHelper::AssetIncludeTag","","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html","",""],["ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","","ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html","",""],["ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers","","ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers.html","",""],["ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers::ClassMethods","","ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers/ClassMethods.html","",""],["ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","","ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html","",""],["ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers","","ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers.html","",""],["ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers::ClassMethods","","ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers/ClassMethods.html","",""],["ActionView::Helpers::AtomFeedHelper","","ActionView/Helpers/AtomFeedHelper.html","",""],["ActionView::Helpers::AtomFeedHelper::AtomBuilder","","ActionView/Helpers/AtomFeedHelper/AtomBuilder.html","",""],["ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","","ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html","",""],["ActionView::Helpers::CacheHelper","","ActionView/Helpers/CacheHelper.html","",""],["ActionView::Helpers::CaptureHelper","","ActionView/Helpers/CaptureHelper.html","","<p>CaptureHelper exposes methods to let you extract generated markup which can\nbe used in other parts of …\n"],["ActionView::Helpers::CsrfHelper","","ActionView/Helpers/CsrfHelper.html","",""],["ActionView::Helpers::DateHelper","","ActionView/Helpers/DateHelper.html","","<p>Action View Date Helpers\n<p>The Date Helper primarily creates select/option tags for different kinds of\ndates …\n"],["ActionView::Helpers::DateHelperInstanceTag","","ActionView/Helpers/DateHelperInstanceTag.html","",""],["ActionView::Helpers::DebugHelper","","ActionView/Helpers/DebugHelper.html","",""],["ActionView::Helpers::FormBuilder","","ActionView/Helpers/FormBuilder.html","",""],["ActionView::Helpers::FormHelper","","ActionView/Helpers/FormHelper.html","","<p>Form helpers are designed to make working with resources much easier\ncompared to using vanilla HTML. …\n"],["ActionView::Helpers::FormOptionsHelper","","ActionView/Helpers/FormOptionsHelper.html","","<p>Provides a number of methods for turning different kinds of containers into\na set of option tags.\n<p>Options …\n"],["ActionView::Helpers::FormTagHelper","","ActionView/Helpers/FormTagHelper.html","","<p>Provides a number of methods for creating form tags that doesn’t rely on an\nActive Record object assigned …\n"],["ActionView::Helpers::InstanceTag","","ActionView/Helpers/InstanceTag.html","",""],["ActionView::Helpers::JavaScriptHelper","","ActionView/Helpers/JavaScriptHelper.html","",""],["ActionView::Helpers::NumberHelper","","ActionView/Helpers/NumberHelper.html","","<p>Provides methods for converting numbers into formatted strings. Methods are\nprovided for phone numbers, …\n"],["ActionView::Helpers::NumberHelper::InvalidNumberError","","ActionView/Helpers/NumberHelper/InvalidNumberError.html","","<p>Raised when argument <code>number</code> param given to the helpers is\ninvalid and the option :raise is set to  <code>true</code> …\n"],["ActionView::Helpers::OutputSafetyHelper","","ActionView/Helpers/OutputSafetyHelper.html","",""],["ActionView::Helpers::RecordTagHelper","","ActionView/Helpers/RecordTagHelper.html","",""],["ActionView::Helpers::RenderingHelper","","ActionView/Helpers/RenderingHelper.html","","<p>Action View Rendering\n<p>Implements methods that allow rendering from a view context. In order to\nuse this …\n"],["ActionView::Helpers::SanitizeHelper","","ActionView/Helpers/SanitizeHelper.html","","<p>The SanitizeHelper module provides a set of methods for scrubbing text of\nundesired HTML elements. These …\n"],["ActionView::Helpers::TagHelper","","ActionView/Helpers/TagHelper.html","","<p>Provides methods to generate HTML tags programmatically when you can’t use\na Builder. By default, they …\n"],["ActionView::Helpers::TextHelper","","ActionView/Helpers/TextHelper.html","","<p>The TextHelper module provides a set of methods for filtering, formatting\nand transforming strings, which …\n"],["ActionView::Helpers::TranslationHelper","","ActionView/Helpers/TranslationHelper.html","",""],["ActionView::Helpers::UrlHelper","","ActionView/Helpers/UrlHelper.html","","<p>Provides a set of methods for making links and getting URLs that depend on\nthe routing subsystem (see …\n"],["ActionView::LogSubscriber","","ActionView/LogSubscriber.html","","<p>Action View Log Subscriber\n<p>Provides functionality so that Rails can output logs from Action View.\n"],["ActionView::LookupContext","","ActionView/LookupContext.html","",""],["ActionView::LookupContext::DetailsCache","","ActionView/LookupContext/DetailsCache.html","","<p>Add caching behavior on top of Details.\n"],["ActionView::LookupContext::ViewPaths","","ActionView/LookupContext/ViewPaths.html","","<p>Helpers related to template lookup using the lookup context information.\n"],["ActionView::NullResolver","","ActionView/NullResolver.html","",""],["ActionView::PartialRenderer","","ActionView/PartialRenderer.html","","<p>Action View Partials\n<p>There’s also a convenience method for rendering sub templates within the\ncurrent …\n"],["ActionView::Railtie","","ActionView/Railtie.html","","<p>Action View Railtie\n"],["ActionView::Renderer","","ActionView/Renderer.html","","<p>This is the main entry point for rendering. It basically delegates to other\nobjects like TemplateRenderer …\n"],["ActionView::Resolver","","ActionView/Resolver.html","","<p>Action View Resolver\n"],["ActionView::Resolver::Path","","ActionView/Resolver/Path.html","","<p>Keeps all information about view path and builds virtual path.\n"],["ActionView::Template","","ActionView/Template.html","","<p>Action View Text Template\n<p>Action View Template Handlers\n<p>Action View Template\n"],["ActionView::Template::Handlers","","ActionView/Template/Handlers.html","",""],["ActionView::Template::Handlers::Builder","","ActionView/Template/Handlers/Builder.html","",""],["ActionView::Template::Handlers::ERB","","ActionView/Template/Handlers/ERB.html","",""],["ActionView::Template::Handlers::Erubis","","ActionView/Template/Handlers/Erubis.html","",""],["ActionView::TestCase","","ActionView/TestCase.html","","<p>Action View Test Case\n"],["ActionView::TestCase::Behavior","","ActionView/TestCase/Behavior.html","",""],["ActionView::TestCase::Behavior::ClassMethods","","ActionView/TestCase/Behavior/ClassMethods.html","",""],["ActionView::TestCase::Behavior::Locals","","ActionView/TestCase/Behavior/Locals.html","",""],["ActionView::TestCase::TestController","","ActionView/TestCase/TestController.html","",""],["HTML","","HTML.html","",""],["HTML::FullSanitizer","","HTML/FullSanitizer.html","",""],["HTML::LinkSanitizer","","HTML/LinkSanitizer.html","",""],["HTML::Sanitizer","","HTML/Sanitizer.html","",""],["HTML::Selector","","HTML/Selector.html","","<p>Selects HTML elements using CSS 2 selectors.\n<p>The <code>Selector</code> class uses CSS selector expressions to match …\n"],["HTML::Tag","","HTML/Tag.html","",""],["HTML::WhiteListSanitizer","","HTML/WhiteListSanitizer.html","",""],["I18n","","I18n.html","",""],["I18n::ExceptionHandler","","I18n/ExceptionHandler.html","",""],["Mime","","Mime.html","",""],["Mime::Mimes","","Mime/Mimes.html","",""],["Mime::Type","","Mime/Type.html","","<p>Encapsulates the notion of a mime type. Can be used at render time, for\nexample, with:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Object","","Object.html","",""],["Rack","","Rack.html","",""],["Sprockets","","Sprockets.html","",""],["Sprockets::Bootstrap","","Sprockets/Bootstrap.html","",""],["Sprockets::Compressors","","Sprockets/Compressors.html","",""],["Sprockets::Helpers","","Sprockets/Helpers.html","",""],["Sprockets::Helpers::IsolatedHelper","","Sprockets/Helpers/IsolatedHelper.html","",""],["Sprockets::Helpers::RailsHelper","","Sprockets/Helpers/RailsHelper.html","",""],["Sprockets::Helpers::RailsHelper::AssetPaths","","Sprockets/Helpers/RailsHelper/AssetPaths.html","",""],["Sprockets::Helpers::RailsHelper::AssetPaths::AssetNotPrecompiledError","","Sprockets/Helpers/RailsHelper/AssetPaths/AssetNotPrecompiledError.html","",""],["Sprockets::Railtie","","Sprockets/Railtie.html","","<p>TODO: Get rid of config.assets.enabled\n"],["Sprockets::StaticCompiler","","Sprockets/StaticCompiler.html","",""],["==","ActionDispatch::MiddlewareStack::Middleware","ActionDispatch/MiddlewareStack/Middleware.html#method-i-3D-3D","(middleware)",""],["==","ActionView::FileSystemResolver","ActionView/FileSystemResolver.html#method-i-3D-3D","(resolver)",""],["==","Mime::Type","Mime/Type.html#method-i-3D-3D","(mime_type)",""],["===","Mime::Type","Mime/Type.html#method-i-3D-3D-3D","(list)",""],["=~","Mime::Type","Mime/Type.html#method-i-3D-7E","(mime_type)",""],["GET","ActionDispatch::Request","ActionDispatch/Request.html#method-i-GET","()","<p>Override Rack’s GET method to support indifferent access\n"],["POST","ActionDispatch::Request","ActionDispatch/Request.html#method-i-POST","()","<p>Override Rack’s POST method to support indifferent access\n"],["[]","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-5B-5D","(k)",""],["[]","ActionDispatch::Http::Headers","ActionDispatch/Http/Headers.html#method-i-5B-5D","(header_name)",""],["[]","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-5B-5D","(i)",""],["[]","Mime","Mime.html#method-c-5B-5D","(type)",""],["_handle_method_missing","ActionController::Compatibility","ActionController/Compatibility.html#method-i-_handle_method_missing","()",""],["_handle_render_options","ActionController::Renderers","ActionController/Renderers.html#method-i-_handle_render_options","(options)",""],["_implied_layout_name","AbstractController::Layouts::ClassMethods","AbstractController/Layouts/ClassMethods.html#method-i-_implied_layout_name","()","<p>If no layout is supplied, look for a template named the return value of\nthis method.\n<p>Returns\n<p><code>String</code> -  ...\n"],["_insert_callbacks","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-_insert_callbacks","(callbacks, block)","<p>Take callback names and an optional callback proc, normalize them, then\ncall the block with each callback. …\n"],["_layout_for","ActionView::Context","ActionView/Context.html#method-i-_layout_for","(name=nil)","<p>Encapsulates the interaction with the view flow so it returns the correct\nbuffer on yield. This is usually …\n"],["_layout_for","ActionView::Helpers::RenderingHelper","ActionView/Helpers/RenderingHelper.html#method-i-_layout_for","(*args, &block)","<p>Overwrites _layout_for in the context object so it supports the case a\nblock is passed to a partial. …\n"],["_normalize_callback_options","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-_normalize_callback_options","(options)","<p>If :only or :except are used, convert the options into the primitive form\n(:per_key) used by ActiveSupport::Callbacks …\n"],["_normalize_options","AbstractController::Layouts","AbstractController/Layouts.html#method-i-_normalize_options","(options)",""],["_normalize_options","ActionController::Compatibility","ActionController/Compatibility.html#method-i-_normalize_options","(options)",""],["_prefixes","AbstractController::ViewPaths","AbstractController/ViewPaths.html#method-i-_prefixes","()","<p>The prefixes used in render “foo” shortcuts.\n"],["_prepare_context","ActionView::Context","ActionView/Context.html#method-i-_prepare_context","()","<p>Prepares the context by setting the appropriate instance variables. :api:\nplugin\n"],["_routes","AbstractController::UrlFor","AbstractController/UrlFor.html#method-i-_routes","()",""],["_routes","AbstractController::UrlFor::ClassMethods","AbstractController/UrlFor/ClassMethods.html#method-i-_routes","()",""],["_routes_context","ActionDispatch::Routing::UrlFor","ActionDispatch/Routing/UrlFor.html#method-i-_routes_context","()",""],["_routes_context","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-_routes_context","()",""],["_save_fragment","ActionController::Caching::Actions","ActionController/Caching/Actions.html#method-i-_save_fragment","(name, options)",""],["_set_detail","ActionView::LookupContext::DetailsCache","ActionView/LookupContext/DetailsCache.html#method-i-_set_detail","(key, value)",""],["_set_wrapper_defaults","ActionController::ParamsWrapper::ClassMethods","ActionController/ParamsWrapper/ClassMethods.html#method-i-_set_wrapper_defaults","(options, model=nil)",""],["_to_partial_path","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-c-_to_partial_path","()",""],["_with_routes","ActionDispatch::Routing::UrlFor","ActionDispatch/Routing/UrlFor.html#method-i-_with_routes","(routes)",""],["_write_layout_method","AbstractController::Layouts::ClassMethods","AbstractController/Layouts/ClassMethods.html#method-i-_write_layout_method","()","<p>Creates a _layout method to be called by _default_layout .\n<p>If a layout is not explicitly mentioned then …\n"],["abstract!","AbstractController::Base","AbstractController/Base.html#method-c-abstract-21","()","<p>Define a controller as abstract. See internal_methods for more details.\n"],["accept=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-accept-3D","(mime_types)",""],["accepts","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-accepts","()","<p>Returns the accepted MIME type for the request.\n"],["action","ActionController::Metal","ActionController/Metal.html#method-c-action","(name, klass = ActionDispatch::Request)","<p>Return a rack endpoint for the given action. Memoize the endpoint, so\nmultiple calls into MyController.action …\n"],["action=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-action-3D","(action_name)",""],["action_has_layout?","AbstractController::Layouts","AbstractController/Layouts.html#method-i-action_has_layout-3F","()",""],["action_methods","AbstractController::Base","AbstractController/Base.html#method-i-action_methods","()",""],["action_methods","AbstractController::Base","AbstractController/Base.html#method-c-action_methods","()","<p>A list of method names that should be considered actions. This includes all\npublic instance methods on …\n"],["action_methods","AbstractController::UrlFor::ClassMethods","AbstractController/UrlFor/ClassMethods.html#method-i-action_methods","()",""],["action_methods","ActionController::HideActions::ClassMethods","ActionController/HideActions/ClassMethods.html#method-i-action_methods","()","<p>Overrides AbstractController::Base#action_methods to remove any methods\nthat are listed as hidden methods. …\n"],["add","ActionController::Renderers","ActionController/Renderers.html#method-c-add","(key, &block)","<p>Adds a new renderer to call within controller actions. A renderer is\ninvoked by passing its name as an …\n"],["add_expr_escaped","ActionView::Template::Handlers::Erubis","ActionView/Template/Handlers/Erubis.html#method-i-add_expr_escaped","(src, code)",""],["add_expr_literal","ActionView::Template::Handlers::Erubis","ActionView/Template/Handlers/Erubis.html#method-i-add_expr_literal","(src, code)",""],["add_postamble","ActionView::Template::Handlers::Erubis","ActionView/Template/Handlers/Erubis.html#method-i-add_postamble","(src)",""],["add_preamble","ActionView::Template::Handlers::Erubis","ActionView/Template/Handlers/Erubis.html#method-i-add_preamble","(src)",""],["add_renderer","ActionController","ActionController.html#method-c-add_renderer","(key, &block)","<p>See <code>Renderers.add</code>\n"],["add_text","ActionView::Template::Handlers::Erubis","ActionView/Template/Handlers/Erubis.html#method-i-add_text","(src, text)",""],["after","ActionDispatch::Callbacks","ActionDispatch/Callbacks.html#method-c-after","(*args, &block)",""],["after_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-after_filter","","<p>Append an after filter. See _insert_callbacks for parameter details.\n"],["alert","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-alert","()","<p>Convenience accessor for flash\n"],["alert=","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-alert-3D","(message)","<p>Convenience accessor for flash=\n"],["all_helpers_from_path","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-all_helpers_from_path","(path)",""],["api_behavior","ActionController::Responder","ActionController/Responder.html#method-i-api_behavior","(error)","<p>This is the common behavior for formats associated with APIs, such as :xml\nand :json.\n"],["api_location","ActionController::Responder","ActionController/Responder.html#method-i-api_location","()",""],["app","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-app","()",""],["app","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-app","()",""],["app","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-c-app","()",""],["app=","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-c-app-3D","(app)",""],["append_after_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-append_after_filter","","<p>Append an after filter. See _insert_callbacks for parameter details.\n"],["append_around_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-append_around_filter","","<p>Append an around filter. See _insert_callbacks for parameter details.\n"],["append_before_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-append_before_filter","","<p>Append a before filter. See _insert_callbacks for parameter details.\n"],["append_view_path","AbstractController::ViewPaths","AbstractController/ViewPaths.html#method-i-append_view_path","(path)",""],["append_view_path","AbstractController::ViewPaths::ClassMethods","AbstractController/ViewPaths/ClassMethods.html#method-i-append_view_path","(path)","<p>Append a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, ...\n"],["application_trace","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-application_trace","()",""],["around_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-around_filter","","<p>Append an around filter. See _insert_callbacks for parameter details.\n"],["assert_dom_equal","ActionDispatch::Assertions::DomAssertions","ActionDispatch/Assertions/DomAssertions.html#method-i-assert_dom_equal","(expected, actual, message = \"\")","<p>Test two HTML strings for equivalency (e.g., identical up to reordering of\nattributes)\n<p>Examples\n\n<pre># assert ...</pre>\n"],["assert_dom_not_equal","ActionDispatch::Assertions::DomAssertions","ActionDispatch/Assertions/DomAssertions.html#method-i-assert_dom_not_equal","(expected, actual, message = \"\")","<p>The negated form of <code>assert_dom_equivalent</code>.\n<p>Examples\n\n<pre># assert that the referenced method does not generate ...</pre>\n"],["assert_generates","ActionDispatch::Assertions::RoutingAssertions","ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_generates","(expected_path, options, defaults={}, extras = {}, message=nil)","<p>Asserts that the provided options can be used to generate the provided\npath. This is the inverse of  …\n"],["assert_index","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-assert_index","(index, where)",""],["assert_no_tag","ActionDispatch::Assertions::TagAssertions","ActionDispatch/Assertions/TagAssertions.html#method-i-assert_no_tag","(*opts)","<p>Identical to <code>assert_tag</code>, but asserts that a matching tag does\n<em>not</em> exist. (See <code>assert_tag</code> for a full discussion …\n"],["assert_recognizes","ActionDispatch::Assertions::RoutingAssertions","ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_recognizes","(expected_options, path, extras={}, message=nil)","<p>Asserts that the routing of the given <code>path</code> was handled\ncorrectly and that the parsed options (given in …\n"],["assert_redirected_to","ActionDispatch::Assertions::ResponseAssertions","ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_redirected_to","(options = {}, message=nil)","<p>Assert that the redirection options passed in match those of the redirect\ncalled in the latest action. …\n"],["assert_response","ActionDispatch::Assertions::ResponseAssertions","ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_response","(type, message = nil)","<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was 200\n<p><code>:redirect</code>  - ...\n"],["assert_routing","ActionDispatch::Assertions::RoutingAssertions","ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_routing","(path, options, defaults={}, extras={}, message=nil)","<p>Asserts that path and options match both ways; in other words, it verifies\nthat <code>path</code> generates <code>options</code> …\n"],["assert_select","ActionDispatch::Assertions::SelectorAssertions","ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select","(*args, &block)","<p>An assertion that selects elements and makes one or more equality tests.\n<p>If the first argument is an element, …\n"],["assert_select_email","ActionDispatch::Assertions::SelectorAssertions","ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select_email","(&block)","<p>Extracts the body of an email and runs nested assertions on it.\n<p>You must enable deliveries for this assertion …\n"],["assert_select_encoded","ActionDispatch::Assertions::SelectorAssertions","ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select_encoded","(element = nil, &block)","<p>Extracts the content of an element, treats it as encoded HTML and runs\nnested assertion on it.\n<p>You typically …\n"],["assert_tag","ActionDispatch::Assertions::TagAssertions","ActionDispatch/Assertions/TagAssertions.html#method-i-assert_tag","(*opts)","<p>Asserts that there is a tag/node/element in the body of the response that\nmeets all of the given conditions. …\n"],["assert_template","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-assert_template","(options = {}, message = nil)","<p>Asserts that the request was rendered with the appropriate template file or\npartials.\n<p>Examples\n\n<pre># assert ...</pre>\n"],["asset_name","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-asset_name","()",""],["asset_name","ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html#method-i-asset_name","()",""],["asset_name","ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html#method-i-asset_name","()",""],["asset_path","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-asset_path","(source, options = {})",""],["asset_paths","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-asset_paths","()",""],["asset_tag","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-asset_tag","(source, options)",""],["asset_tag","ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html#method-i-asset_tag","(source, options)",""],["asset_tag","ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html#method-i-asset_tag","(source, options)",""],["assign_shortcuts","ActionController::Compatibility","ActionController/Compatibility.html#method-i-assign_shortcuts","(*)",""],["assigns","ActionDispatch::TestProcess","ActionDispatch/TestProcess.html#method-i-assigns","(key = nil)",""],["atom_feed","ActionView::Helpers::AtomFeedHelper","ActionView/Helpers/AtomFeedHelper.html#method-i-atom_feed","(options = {}, &block)","<p>Adds easy defaults to writing Atom feeds with the Builder template engine\n(this does not work on ERB …\n"],["attribute_match","HTML::Selector","HTML/Selector.html#method-i-attribute_match","(equality, value)","<p>Create a regular expression to match an attribute value based on the\nequality operator (=, ^=, |=, etc). …\n"],["audio_path","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-audio_path","(source)","<p>Computes the path to an audio asset in the public audios directory. Full\npaths from the document root …\n"],["audio_tag","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-audio_tag","(source, options = {})","<p>Returns an html audio tag for the <code>source</code>. The\n<code>source</code> can be full path or file that exists in your public …\n"],["authenticate","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-authenticate","(request, &login_procedure)",""],["authenticate","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-authenticate","(request, realm, &password_procedure)","<p>Returns false on a valid response, true otherwise\n"],["authenticate","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-authenticate","(controller, &login_procedure)","<p>If token Authorization header is present, call the login procedure with the\npresent token and options. …\n"],["authenticate_or_request_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_or_request_with_http_basic","(realm = \"Application\", &login_procedure)",""],["authenticate_or_request_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_or_request_with_http_digest","(realm = \"Application\", &password_procedure)",""],["authenticate_or_request_with_http_token","ActionController::HttpAuthentication::Token::ControllerMethods","ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_or_request_with_http_token","(realm = \"Application\", &login_procedure)",""],["authenticate_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_with_http_basic","(&login_procedure)",""],["authenticate_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_with_http_digest","(realm = \"Application\", &password_procedure)","<p>Authenticate with HTTP Digest, returns true or false\n"],["authenticate_with_http_token","ActionController::HttpAuthentication::Token::ControllerMethods","ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_with_http_token","(&login_procedure)",""],["authentication_header","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-authentication_header","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-authentication_request","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-authentication_request","(controller, realm, message = nil)",""],["authentication_request","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-authentication_request","(controller, realm)","<p>Sets a WWW-Authenticate to let the client know a token is desired.\n<p>controller - ActionController::Base …\n"],["authorization","ActionDispatch::Request","ActionDispatch/Request.html#method-i-authorization","()","<p>Returns the authorization header regardless of whether it was specified\ndirectly or through one of the …\n"],["auto_discovery_link_tag","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-auto_discovery_link_tag","(type = :rss, url_options = {}, tag_options = {})","<p>Returns a link tag that browsers and news readers can use to auto-detect an\nRSS or ATOM feed. The <code>type</code> …\n"],["available_action?","AbstractController::Base","AbstractController/Base.html#method-i-available_action-3F","(action_name)","<p>Returns true if a method for the action is available and can be dispatched,\nfalse otherwise.\n<p>Notice that …\n"],["before","ActionDispatch::Callbacks","ActionDispatch/Callbacks.html#method-c-before","(*args, &block)",""],["before_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-before_filter","","<p>Append a before filter. See _insert_callbacks for parameter details.\n"],["before_filters","ActionController::Testing::ClassMethods","ActionController/Testing/ClassMethods.html#method-i-before_filters","()",""],["body","ActionDispatch::Request","ActionDispatch/Request.html#method-i-body","()","<p>The request body is an IO input stream. If the RAW_POST_DATA environment\nvariable is already set, wrap …\n"],["body","ActionDispatch::Response","ActionDispatch/Response.html#method-i-body","()",""],["body=","ActionDispatch::Response","ActionDispatch/Response.html#method-i-body-3D","(body)",""],["body_parts","ActionDispatch::Response","ActionDispatch/Response.html#method-i-body_parts","()",""],["build","ActionController::Middleware","ActionController/Middleware.html#method-c-build","(app)",""],["build","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-build","(app = nil, &block)",""],["build","ActionDispatch::MiddlewareStack::Middleware","ActionDispatch/MiddlewareStack/Middleware.html#method-i-build","(app)",""],["build","ActionView::Resolver::Path","ActionView/Resolver/Path.html#method-c-build","(name, prefix, partial)",""],["button","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-button","(value=nil, options={})","<p>Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource …\n"],["button_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-button_tag","(content_or_options = nil, options = nil, &block)","<p>Creates a button element that defines a <code>submit</code> button,\n<code>reset</code>button or a generic button which can be used …\n"],["button_to","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-button_to","(name, options = {}, html_options = {})","<p>Generates a form containing a single button that submits to the URL created\nby the set of <code>options</code>. This …\n"],["button_to_function","ActionView::Helpers::JavaScriptHelper","ActionView/Helpers/JavaScriptHelper.html#method-i-button_to_function","(name, function=nil, html_options={})","<p>Returns a button whose <code>onclick</code> handler triggers the passed\nJavaScript.\n<p>The helper receives a name, JavaScript …\n"],["cache","ActionController::Caching","ActionController/Caching.html#method-i-cache","(key, options = {}, &block)","<p>Convenience accessor\n"],["cache","ActionView::Helpers::CacheHelper","ActionView/Helpers/CacheHelper.html#method-i-cache","(name = {}, options = nil, &block)","<p>This helper exposes a method for caching fragments of a view  rather than\nan entire action or page.  …\n"],["cache_page","ActionController::Caching::Pages","ActionController/Caching/Pages.html#method-i-cache_page","(content = nil, options = nil, gzip = Zlib::BEST_COMPRESSION)","<p>Manually cache the <code>content</code> in the key determined by\n<code>options</code>. If no content is provided, the contents …\n"],["cache_page","ActionController::Caching::Pages::ClassMethods","ActionController/Caching/Pages/ClassMethods.html#method-i-cache_page","(content, path, extension = nil, gzip = Zlib::BEST_COMPRESSION)","<p>Manually cache the <code>content</code> in the key determined by\n<code>path</code>. Example:\n\n<pre>cache_page &quot;I'm the cached content&quot;, ...</pre>\n"],["cache_store","ActionController::Caching::ConfigMethods","ActionController/Caching/ConfigMethods.html#method-i-cache_store","()",""],["cache_store=","ActionController::Caching::ConfigMethods","ActionController/Caching/ConfigMethods.html#method-i-cache_store-3D","(store)",""],["cache_template_loading","ActionView::Base","ActionView/Base.html#method-c-cache_template_loading","()",""],["cache_template_loading=","ActionView::Base","ActionView/Base.html#method-c-cache_template_loading-3D","(value)",""],["caches_action","ActionController::Caching::Actions::ClassMethods","ActionController/Caching/Actions/ClassMethods.html#method-i-caches_action","(*actions)","<p>Declares that <code>actions</code> should be cached. See\nActionController::Caching::Actions for details.\n"],["caches_page","ActionController::Caching::Pages::ClassMethods","ActionController/Caching/Pages/ClassMethods.html#method-i-caches_page","(*actions)","<p>Caches the <code>actions</code> using the page-caching approach that’ll\nstore the cache in a path within the page_cache_directory …\n"],["caching_allowed?","ActionController::Caching","ActionController/Caching.html#method-i-caching_allowed-3F","()",""],["calculate_ip","ActionDispatch::RemoteIp::GetIp","ActionDispatch/RemoteIp/GetIp.html#method-i-calculate_ip","()","<p>Determines originating IP address. REMOTE_ADDR is the standard but will be\nwrong if the user is behind …\n"],["call","ActionController::Metal","ActionController/Metal.html#method-c-call","(env)","<p>Makes the controller a rack endpoint that points to the action in the given\nenv’s action_dispatch.request.path_parameters …\n"],["call","ActionController::Middleware::ActionMiddleware","ActionController/Middleware/ActionMiddleware.html#method-i-call","(env)",""],["call","ActionController::Responder","ActionController/Responder.html#method-c-call","(*args)","<p>Initializes a new responder an invoke the proper format. If the format is\nnot defined, call to_format. …\n"],["call","ActionDispatch::BestStandardsSupport","ActionDispatch/BestStandardsSupport.html#method-i-call","(env)",""],["call","ActionDispatch::Callbacks","ActionDispatch/Callbacks.html#method-i-call","(env)",""],["call","ActionDispatch::Cookies","ActionDispatch/Cookies.html#method-i-call","(env)",""],["call","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-i-call","(env)",""],["call","ActionDispatch::Flash","ActionDispatch/Flash.html#method-i-call","(env)",""],["call","ActionDispatch::Head","ActionDispatch/Head.html#method-i-call","(env)",""],["call","ActionDispatch::ParamsParser","ActionDispatch/ParamsParser.html#method-i-call","(env)",""],["call","ActionDispatch::PublicExceptions","ActionDispatch/PublicExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::Reloader","ActionDispatch/Reloader.html#method-i-call","(env)",""],["call","ActionDispatch::RemoteIp","ActionDispatch/RemoteIp.html#method-i-call","(env)",""],["call","ActionDispatch::RequestId","ActionDispatch/RequestId.html#method-i-call","(env)",""],["call","ActionDispatch::Rescue","ActionDispatch/Rescue.html#method-i-call","(env)",""],["call","ActionDispatch::ShowExceptions","ActionDispatch/ShowExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::Static","ActionDispatch/Static.html#method-i-call","(env)",""],["call","ActionView::Template::Handlers::Builder","ActionView/Template/Handlers/Builder.html#method-i-call","(template)",""],["call","ActionView::Template::Handlers::ERB","ActionView/Template/Handlers/ERB.html#method-i-call","(template)",""],["call","ActionView::Template::Handlers::ERB","ActionView/Template/Handlers/ERB.html#method-c-call","(template)",""],["call","I18n::ExceptionHandler","I18n/ExceptionHandler.html#method-i-call","(exception, locale, key, options)",""],["capture","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-capture","(*args)","<p>The capture method allows you to extract part of a template into a\nvariable. You can then use this variable …\n"],["cdata_section","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-cdata_section","(content)","<p>Returns a CDATA section with the given <code>content</code>. CDATA sections\nare used to escape blocks of text containing …\n"],["check_box","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-check_box","(method, options = {}, checked_value = \"1\", unchecked_value = \"0\")",""],["check_box","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-check_box","(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")","<p>Returns a checkbox tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an object …\n"],["check_box_checked?","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-c-check_box_checked-3F","(value, checked_value)",""],["check_box_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-check_box_tag","(name, value = \"1\", checked = false, options = {})","<p>Creates a check box form input tag.\n<p>Options\n<p><code>:disabled</code> - If set to true, the user will not be able to use\n...\n"],["cleanup!","ActionDispatch::Reloader","ActionDispatch/Reloader.html#method-c-cleanup-21","()","<p>Execute all cleanup callbacks.\n"],["clear","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-clear","()",""],["clear_action_methods!","AbstractController::Base","AbstractController/Base.html#method-c-clear_action_methods-21","()","<p>action_methods are cached and there is sometimes need to refresh them.\nclear_action_methods! allows you …\n"],["clear_cache","ActionView::Resolver","ActionView/Resolver.html#method-i-clear_cache","()",""],["clear_helpers","AbstractController::Helpers::ClassMethods","AbstractController/Helpers/ClassMethods.html#method-i-clear_helpers","()","<p>Clears up all existing helpers in this class, only keeping the helper with\nthe same name as this class. …\n"],["clear_respond_to","ActionController::MimeResponds::ClassMethods","ActionController/MimeResponds/ClassMethods.html#method-i-clear_respond_to","()","<p>Clear all mime types in <code>respond_to</code>.\n"],["close","ActionDispatch::BodyProxy","ActionDispatch/BodyProxy.html#method-i-close","()",""],["close","ActionDispatch::Response","ActionDispatch/Response.html#method-i-close","()",""],["closed?","ActionDispatch::BodyProxy","ActionDispatch/BodyProxy.html#method-i-closed-3F","()",""],["code","ActionDispatch::Response","ActionDispatch/Response.html#method-i-code","()","<p>Returns a String to ensure compatibility with Net::HTTPResponse\n"],["collection","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-collection","()","<p>To add a route to the collection:\n\n<pre>resources :photos do\n  collection do\n    get 'search'\n  end\nend</pre>\n<p>This …\n"],["collection_select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-collection_select","(method, collection, value_method, text_method, options = {}, html_options = {})",""],["collection_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select","(object, method, collection, value_method, text_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> tags\nfor the collection of existing return values of <code>method</code> …\n"],["compile","Sprockets::StaticCompiler","Sprockets/StaticCompiler.html#method-i-compile","()",""],["compile_path?","Sprockets::StaticCompiler","Sprockets/StaticCompiler.html#method-i-compile_path-3F","(logical_path)",""],["concat","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-concat","(string)","<p>The preferred method of outputting text in your views is to use the &lt;%=\n“text” %&gt; eRuby …\n"],["conditional_layout?","AbstractController::Layouts","AbstractController/Layouts.html#method-i-conditional_layout-3F","()",""],["conditional_layout?","AbstractController::Layouts::ClassMethods::LayoutConditions","AbstractController/Layouts/ClassMethods/LayoutConditions.html#method-i-conditional_layout-3F","()","<p>Determines whether the current action has a layout by checking the action\nname against the :only and …\n"],["config","ActionView::TestCase::Behavior","ActionView/TestCase/Behavior.html#method-i-config","()",""],["config","Sprockets::Helpers::IsolatedHelper","Sprockets/Helpers/IsolatedHelper.html#method-i-config","()",""],["constraints","ActionDispatch::Routing::Mapper::Scoping","ActionDispatch/Routing/Mapper/Scoping.html#method-i-constraints","(constraints = {})","<p>Parameter Restriction\n<p>Allows you to constrain the nested routes based on a set of rules. For\ninstance, …\n"],["contains_bad_protocols?","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-contains_bad_protocols-3F","(attr_name, value)",""],["content_for","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-content_for","(name, content = nil, &block)","<p>Calling content_for stores a block of markup in an identifier for later\nuse. You can make subsequent …\n"],["content_for?","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-content_for-3F","(name)","<p>content_for? simply checks whether any content has been captured yet using\ncontent_for Useful to render …\n"],["content_length","ActionDispatch::Request","ActionDispatch/Request.html#method-i-content_length","()","<p>Returns the content length of the request as an integer.\n"],["content_mime_type","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-content_mime_type","()","<p>The MIME type of the HTTP request, such as Mime::XML.\n<p>For backward compatibility, the post format is extracted …\n"],["content_tag","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-content_tag","(name, content_or_options_with_block = nil, options = nil, escape = true, &block)","<p>Returns an HTML block tag of type <code>name</code> surrounding the\n<code>content</code>. Add HTML attributes by passing an attributes …\n"],["content_tag_for","ActionView::Helpers::RecordTagHelper","ActionView/Helpers/RecordTagHelper.html#method-i-content_tag_for","(tag_name, single_or_multiple_records, prefix = nil, options = nil, &block)","<p>content_tag_for creates an HTML element with id and class parameters that\nrelate to the specified Active …\n"],["content_type","ActionController::Metal","ActionController/Metal.html#method-i-content_type","()",""],["content_type","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-content_type","()",""],["content_type=","ActionController::Metal","ActionController/Metal.html#method-i-content_type-3D","(type)","<p>Basic implementations for content_type=, location=, and headers are\nprovided to reduce the dependency …\n"],["controller","ActionDispatch::Routing::Mapper::Scoping","ActionDispatch/Routing/Mapper/Scoping.html#method-i-controller","(controller, options={})","<p>Scopes routes to a specific controller\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">controller</span> <span class=\"ruby-string\">&quot;food&quot;</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">match</span> <span class=\"ruby-string\">&quot;bacon&quot;</span>, :<span class=\"ruby-identifier\">action</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;bacon&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["controller","Sprockets::Helpers::IsolatedHelper","Sprockets/Helpers/IsolatedHelper.html#method-i-controller","()",""],["controller_class","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class","()",""],["controller_class=","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class-3D","(new_class)",""],["controller_name","ActionController::Metal","ActionController/Metal.html#method-c-controller_name","()","<p>Returns the last part of the controller’s name, underscored, without the\nending <code>Controller</code>. For instance, …\n"],["controller_name","ActionController::Metal","ActionController/Metal.html#method-i-controller_name","()","<p>Delegates to the class’ <code>controller_name</code>\n"],["controller_path","AbstractController::Base","AbstractController/Base.html#method-c-controller_path","()","<p>Returns the full controller name, underscored, without the ending\nController. For instance, MyApp::MyPostsController …\n"],["controller_path","AbstractController::Base","AbstractController/Base.html#method-i-controller_path","()","<p>Delegates to the class’ #controller_path\n"],["controller_path=","ActionView::TestCase::TestController","ActionView/TestCase/TestController.html#method-i-controller_path-3D","(path)",""],["convert_to_model","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-convert_to_model","(object)","<p>Converts the given object to an ActiveModel compliant one.\n"],["cookie_jar","ActionDispatch::Request","ActionDispatch/Request.html#method-i-cookie_jar","()",""],["cookies","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-cookies","()","<p>A map of the cookies returned by the last response, and which will be sent\nwith the next request.\n"],["cookies","ActionDispatch::Response","ActionDispatch/Response.html#method-i-cookies","()","<p>Returns the response cookies, converted to a Hash of (name =&gt; value)\npairs\n\n<pre>assert_equal 'AuthorOfNewPage', ...</pre>\n"],["cookies","ActionDispatch::TestProcess","ActionDispatch/TestProcess.html#method-i-cookies","()",""],["cookies","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-cookies","()",""],["csrf_meta_tag","ActionView::Helpers::CsrfHelper","ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tag","()","<p>For backwards compatibility.\n"],["csrf_meta_tags","ActionView::Helpers::CsrfHelper","ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tags","()","<p>Returns meta tags “csrf-param” and “csrf-token” with the name of the\ncross-site request …\n"],["css_select","ActionDispatch::Assertions::SelectorAssertions","ActionDispatch/Assertions/SelectorAssertions.html#method-i-css_select","(*args)","<p>Select and return all matching elements.\n<p>If called with a single argument, uses that argument as a selector …\n"],["current_cycle","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-current_cycle","(name = \"default\")","<p>Returns the current cycle string after a cycle has been started. Useful for\ncomplex table highlighting …\n"],["current_page?","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-current_page-3F","(options)","<p>True if the current request URI was generated by the given\n<code>options</code>.\n<p>Examples\n<p>Let’s say we’re in the <code>/shop/checkout</code> …\n"],["custom_dir","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-custom_dir","()",""],["custom_dir","ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html#method-i-custom_dir","()",""],["custom_dir","ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html#method-i-custom_dir","()",""],["cycle","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-cycle","(first_value, *values)","<p>Creates a Cycle object whose <em>to_s</em> method cycles through elements\nof an array every time it is called. …\n"],["date_select","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-date_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, and day) pre-selected\nfor accessing a specified date-based …\n"],["date_select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-date_select","(method, options = {}, html_options = {})",""],["datetime_select","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-datetime_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, day, hour, and minute)\npre-selected for accessing …\n"],["datetime_select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-datetime_select","(method, options = {}, html_options = {})",""],["debug","ActionView::Helpers::DebugHelper","ActionView/Helpers/DebugHelper.html#method-i-debug","(object)","<p>Returns a YAML representation of <code>object</code> wrapped with\n&lt;pre&gt; and &lt;/pre&gt;. If the object cannot …\n"],["decode_credentials","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-decode_credentials","(request)",""],["decode_credentials","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials","(header)",""],["decode_credentials_header","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials_header","(request)",""],["default_action","ActionController::Responder","ActionController/Responder.html#method-i-default_action","()","<p>By default, render the <code>:edit</code> action for HTML requests with\nfailure, unless the verb is POST.\n"],["default_charset=","ActionController::Compatibility","ActionController/Compatibility.html#method-c-default_charset-3D","(new_charset)",""],["default_render","ActionController::ImplicitRender","ActionController/ImplicitRender.html#method-i-default_render","(*args)",""],["default_render","ActionController::Responder","ActionController/Responder.html#method-i-default_render","()","<p>If a response block was given, use it, otherwise call render on controller.\n"],["default_url_options","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-default_url_options","()",""],["default_url_options","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options","(options)",""],["default_url_options=","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options-3D","(options)",""],["defaults","ActionDispatch::Routing::Mapper::Scoping","ActionDispatch/Routing/Mapper/Scoping.html#method-i-defaults","(defaults = {})","<p>Allows you to set default parameters for a route, such as this:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">defaults</span> :<span class=\"ruby-identifier\">id</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'home'</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">match</span> <span class=\"ruby-string\">'scoped_pages/(:id)'</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["delete","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-delete","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating DELETE HTTP method and set/volley the\nresponse\n"],["delete","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-delete","(key)",""],["delete","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-delete","(path, parameters = nil, headers = nil)","<p>Performs a DELETE request with the given parameters. See <code>#get</code>\nfor more details.\n"],["delete","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-delete","(target)",""],["delete","ActionDispatch::Routing::Mapper::HttpHelpers","ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-delete","(*args, &block)","<p>Define a route that only recognizes HTTP PUT. For supported arguments, see\n<code>Base#match</code>.\n<p>Example:\n<p>delete …\n"],["delete?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-delete-3F","()","<p>Is this a DELETE request? Equivalent to <code>request.request_method_symbol\n== :delete</code>.\n"],["delete_cookie","ActionDispatch::Response","ActionDispatch/Response.html#method-i-delete_cookie","(key, value={})",""],["delete_via_redirect","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-delete_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a DELETE request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["destroy","ActionDispatch::Session::DestroyableSession","ActionDispatch/Session/DestroyableSession.html#method-i-destroy","()",""],["destroy_session","ActionDispatch::Session::CacheStore","ActionDispatch/Session/CacheStore.html#method-i-destroy_session","(env, sid, options)","<p>Remove a session from the cache.\n"],["detail_args_for","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-detail_args_for","(options)","<p>Compute details hash and key according to user options (e.g. passed from\n#render).\n"],["details_for_lookup","AbstractController::ViewPaths","AbstractController/ViewPaths.html#method-i-details_for_lookup","()",""],["determine_default_controller_class","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-determine_default_controller_class","(name)",""],["determine_default_helper_class","ActionView::TestCase::Behavior::ClassMethods","ActionView/TestCase/Behavior/ClassMethods.html#method-i-determine_default_helper_class","(name)",""],["disable_cache","ActionView::LookupContext::DetailsCache","ActionView/LookupContext/DetailsCache.html#method-i-disable_cache","()","<p>Temporary skip passing the details_key forward.\n"],["discard","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-discard","(k = nil)","<p>Marks the entire flash or a single flash entry to be discarded by the end\nof the current action:\n\n<pre>flash.discard ...</pre>\n"],["dispatch","ActionController::RackDelegation","ActionController/RackDelegation.html#method-i-dispatch","(action, request, response = ActionDispatch::Response.new)",""],["display","ActionController::Responder","ActionController/Responder.html#method-i-display","(resource, given_options={})","<p>Display is just a shortcut to render a resource with the current format.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">display</span> <span class=\"ruby-ivar\">@user</span>, :<span class=\"ruby-identifier\">status</span> =<span class=\"ruby-operator\">&gt;</span> :<span class=\"ruby-identifier\">ok</span>\n</pre>\n"],["display_errors","ActionController::Responder","ActionController/Responder.html#method-i-display_errors","()",""],["distance_of_time_in_words","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words","(from_time, to_time = 0, include_seconds = false, options = {})","<p>Reports the approximate distance in time between two Time, Date or DateTime\nobjects or integers as seconds. …\n"],["distance_of_time_in_words_to_now","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words_to_now","(from_time, include_seconds = false)",""],["div_for","ActionView::Helpers::RecordTagHelper","ActionView/Helpers/RecordTagHelper.html#method-i-div_for","(record, *args, &block)","<p>Produces a wrapper DIV element with id and class parameters that relate to\nthe specified Active Record …\n"],["dom_class","ActionController::RecordIdentifier","ActionController/RecordIdentifier.html#method-i-dom_class","(record_or_class, prefix = nil)","<p>The DOM class convention is to use the singular form of an object or class.\nExamples:\n\n<pre>dom_class(post) ...</pre>\n"],["dom_id","ActionController::RecordIdentifier","ActionController/RecordIdentifier.html#method-i-dom_id","(record, prefix = nil)","<p>The DOM id convention is to use the singular form of an object or class\nwith the id following an underscore. …\n"],["domain","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-domain","(tld_length = @@tld_length)","<p>Returns the domain part of a host, such as “rubyonrails.org” in\n“www.rubyonrails.org”. …\n"],["each","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-each","(&block)",""],["each","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-each","()",""],["email_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-email_field","(object_name, method, options = {})","<p>Returns a text_field of type “email”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">email_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;address&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_address&quot; ...</span>\n</pre>\n"],["email_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-email_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “email”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["emitted_hidden_id?","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-emitted_hidden_id-3F","()",""],["empty?","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-empty-3F","()",""],["encode!","ActionView::Template","ActionView/Template.html#method-i-encode-21","()","<p>This method is responsible for properly setting the encoding of the source.\nUntil this point, we assume …\n"],["encode_credentials","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-encode_credentials","(user_name, password)",""],["encode_credentials","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-encode_credentials","(http_method, credentials, password, password_is_ha1)",""],["encode_credentials","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-encode_credentials","(token, options = {})","<p>Encodes the given token and options into an Authorization header value.\n<p>token   - String token. options …\n"],["entry","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-i-entry","(record, options = {})","<p>Creates an entry tag for a specific record and prefills the id using class\nand id.\n<p>Options:\n<p><code>:published</code> ...\n"],["env","ActionController::Metal","ActionController/Metal.html#method-i-env","()",""],["env_filter","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-env_filter","()",""],["eql?","ActionView::FileSystemResolver","ActionView/FileSystemResolver.html#method-i-eql-3F","(resolver)",""],["error_message","ActionView::Helpers::ActiveModelInstanceTag","ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_message","()",""],["error_wrapping","ActionView::Helpers::ActiveModelInstanceTag","ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_wrapping","(html_tag)",""],["escape_glob_chars","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-i-escape_glob_chars","(path)",""],["escape_javascript","ActionView::Helpers::JavaScriptHelper","ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript","(javascript)","<p>Escapes carriage returns and single and double quotes for JavaScript\nsegments.\n<p>Also available through …\n"],["escape_once","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-escape_once","(html)","<p>Returns an escaped version of <code>html</code> without affecting existing\nescaped entities.\n<p>Examples\n\n<pre>escape_once(&quot;1 ...</pre>\n"],["etag=","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-etag-3D","(etag)",""],["etag_matches?","ActionDispatch::Http::Cache::Request","ActionDispatch/Http/Cache/Request.html#method-i-etag_matches-3F","(etag)",""],["excerpt","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-excerpt","(text, phrase, *args)","<p>Extracts an excerpt from <code>text</code> that matches the first instance\nof <code>phrase</code>. The <code>:radius</code> option expands the …\n"],["exist?","ActionDispatch::RailsEntityStore","ActionDispatch/RailsEntityStore.html#method-i-exist-3F","(key)",""],["exists?","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-exists-3F","(name, prefixes = [], partial = false, keys = [], options = {})",""],["expected_response","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-expected_response","(http_method, uri, credentials, password, password_is_ha1=true)","<p>Returns the expected response for a request of <code>http_method</code> to\n<code>uri</code> with the decoded <code>credentials</code> and the …\n"],["expire_action","ActionController::Caching::Actions","ActionController/Caching/Actions.html#method-i-expire_action","(options = {})",""],["expire_fragment","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-expire_fragment","(key, options = nil)","<p>Removes fragments from the cache.\n<p><code>key</code> can take one of three forms:\n<p>String - This would normally take the …\n"],["expire_page","ActionController::Caching::Pages","ActionController/Caching/Pages.html#method-i-expire_page","(options = {})","<p>Expires the page that was cached with the <code>options</code> as a key.\nExample:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expire_page</span> :<span class=\"ruby-identifier\">controller</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;lists&quot;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["expire_page","ActionController::Caching::Pages::ClassMethods","ActionController/Caching/Pages/ClassMethods.html#method-i-expire_page","(path)","<p>Expires the page that was cached with the <code>path</code> as a key.\nExample:\n\n<pre>expire_page &quot;/lists/show&quot;</pre>\n"],["expires_in","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-expires_in","(seconds, options = {})","<p>Sets a HTTP 1.1 Cache-Control header. Defaults to issuing a\n<code>private</code> instruction, so that intermediate …\n"],["expires_now","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-expires_now","()","<p>Sets a HTTP 1.1 Cache-Control header of <code>no-cache</code> so no caching\nshould occur by the browser or intermediate …\n"],["ext","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-i-ext","()",""],["extension","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-extension","()",""],["extension","ActionView::Helpers::AssetTagHelper::JavascriptIncludeTag","ActionView/Helpers/AssetTagHelper/JavascriptIncludeTag.html#method-i-extension","()",""],["extension","ActionView::Helpers::AssetTagHelper::StylesheetIncludeTag","ActionView/Helpers/AssetTagHelper/StylesheetIncludeTag.html#method-i-extension","()",""],["extract_domain","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-c-extract_domain","(host, tld_length = @@tld_length)",""],["extract_session_id","ActionDispatch::Session::StaleSessionCheck","ActionDispatch/Session/StaleSessionCheck.html#method-i-extract_session_id","(env)",""],["extract_subdomain","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-c-extract_subdomain","(host, tld_length = @@tld_length)",""],["extract_subdomains","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-c-extract_subdomains","(host, tld_length = @@tld_length)",""],["favicon_link_tag","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-favicon_link_tag","(source='/favicon.ico', options={})","\n<pre>&lt;%= favicon_link_tag %&gt;</pre>\n<p>generates\n\n<pre>&lt;link href=&quot;/favicon.ico&quot; rel=&quot;shortcut icon&quot; type=&quot;image/vnd.microsoft.icon&quot; ...</pre>\n"],["field_set_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-field_set_tag","(legend = nil, options = nil, &block)","<p>Creates a field set for grouping HTML form elements.\n<p><code>legend</code> will become the fieldset's title (optional ...\n"],["fields_for","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-fields_for","(record_name, record_object = nil, fields_options = {}, &block)",""],["fields_for","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-fields_for","(record_name, record_object = nil, options = {}, &block)","<p>Creates a scope around a specific model object like form_for, but doesn’t\ncreate the form tags themselves. …\n"],["file_field","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-file_field","(method, options = {})",""],["file_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-file_field","(object_name, method, options = {})","<p>Returns a file upload input tag tailored for accessing a specified\nattribute (identified by <code>method</code>) on …\n"],["file_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-file_field_tag","(name, options = {})","<p>Creates a file upload field. If you are using file uploads then you will\nalso need to set the multipart …\n"],["filter","ActionDispatch::Http::ParameterFilter","ActionDispatch/Http/ParameterFilter.html#method-i-filter","(params)",""],["filtered_env","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-filtered_env","()","<p>Return a hash of request.env with all sensitive data replaced.\n"],["filtered_parameters","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-filtered_parameters","()","<p>Return a hash of parameters with all sensitive data replaced.\n"],["filtered_path","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-filtered_path","()","<p>Reconstructed a path with all sensitive GET parameters replaced.\n"],["filtered_query_string","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-filtered_query_string","()",""],["find","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-find","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find_all","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-find_all","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find_all","ActionView::Resolver","ActionView/Resolver.html#method-i-find_all","(name, prefix=nil, partial=false, details={}, key=nil, locals=[])","<p>Normalizes the arguments and passes it on to find_template.\n"],["find_all_tag","ActionDispatch::Assertions::TagAssertions","ActionDispatch/Assertions/TagAssertions.html#method-i-find_all_tag","(conditions)",""],["find_tag","ActionDispatch::Assertions::TagAssertions","ActionDispatch/Assertions/TagAssertions.html#method-i-find_tag","(conditions)",""],["find_template","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-find_template","(name, prefixes = [], partial = false, keys = [], options = {})",""],["fixture_file_upload","ActionDispatch::TestProcess","ActionDispatch/TestProcess.html#method-i-fixture_file_upload","(path, mime_type = nil, binary = false)","<p>Shortcut for\n<code>Rack::Test::UploadedFile.new(ActionController::TestCase.fixture_path\n+ path, type)</code>:\n\n<pre>post ...</pre>\n"],["flash","ActionDispatch::Request","ActionDispatch/Request.html#method-i-flash","()","<p>Access the contents of the flash. Use <code>flash[\"notice\"]</code> to read\na notice you put there or <code>flash[\"notice\"]</code> …\n"],["flash","ActionDispatch::TestProcess","ActionDispatch/TestProcess.html#method-i-flash","()",""],["follow_redirect!","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-follow_redirect-21","()","<p>Follow a single redirect response. If the last response was not a redirect,\nan exception will be raised. …\n"],["font_path","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-font_path","(source)","<p>Computes the path to a font asset in the public fonts directory. Full paths\nfrom the document root will …\n"],["font_path","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-font_path","(source)",""],["for_class","HTML::Selector","HTML/Selector.html#method-c-for_class","(cls)","<p>Creates a new selector for the given class name.\n"],["for_id","HTML::Selector","HTML/Selector.html#method-c-for_id","(id)","<p>Creates a new selector for the given id.\n"],["force_ssl","ActionController::ForceSSL::ClassMethods","ActionController/ForceSSL/ClassMethods.html#method-i-force_ssl","(options = {})","<p>Force the request to this particular controller or specified actions to be\nunder HTTPS protocol.\n<p>Note …\n"],["form_authenticity_param","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-form_authenticity_param","()","<p>The form’s authenticity parameter. Override to provide your own.\n"],["form_authenticity_token","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-form_authenticity_token","()","<p>Sets the token value for the current session.\n"],["form_data?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-form_data-3F","()",""],["form_for","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-form_for","(record, options = {}, &proc)","<p>Creates a form and a scope around a specific model object that is used as a\nbase for questioning about …\n"],["form_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-form_tag","(url_for_options = {}, options = {}, &block)","<p>Starts a form tag that points the action to an url configured with\n<code>url_for_options</code> just like ActionController::Base#url_for …\n"],["format","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-format","(view_path = [])","<p>Returns the MIME type for the format used in the request.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GET</span> <span class=\"ruby-regexp\">%rposts/</span><span class=\"ruby-value\">5</span>.<span class=\"ruby-identifier\">xml</span>   <span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">format</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">Mime</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["format=","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-format-3D","(extension)","<p>Sets the format by string extension, which can be used to force custom\nformats that are not controlled …\n"],["formats","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-formats","()",""],["fragment_cache_key","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-fragment_cache_key","(key)","<p>Given a key (as described in <code>expire_fragment</code>), returns a key\nsuitable for use in reading, writing, or …\n"],["fragment_exist?","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-fragment_exist-3F","(key, options = nil)","<p>Check if a cached fragment from the location signified by  <code>key</code>\nexists (see <code>expire_fragment</code> for acceptable …\n"],["framework_trace","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-framework_trace","()",""],["fresh?","ActionDispatch::Http::Cache::Request","ActionDispatch/Http/Cache/Request.html#method-i-fresh-3F","(response)","<p>Check response freshness (Last-Modified and ETag) against request\nIf-Modified-Since and If-None-Match …\n"],["fresh_when","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-fresh_when","(record_or_options, additional_options = {})","<p>Sets the etag, last_modified, or both on the response and renders a\n<code>304 Not Modified</code> response if the …\n"],["from_rails_root","ActionView::LogSubscriber","ActionView/LogSubscriber.html#method-i-from_rails_root","(string)",""],["from_response","ActionDispatch::TestResponse","ActionDispatch/TestResponse.html#method-c-from_response","(response)",""],["full_trace","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-full_trace","()",""],["fullpath","ActionDispatch::Request","ActionDispatch/Request.html#method-i-fullpath","()",""],["generate_method_for_mime","AbstractController::Collector","AbstractController/Collector.html#method-c-generate_method_for_mime","(mime)",""],["generate_sid","ActionDispatch::Session::Compatibility","ActionDispatch/Session/Compatibility.html#method-i-generate_sid","()",""],["get","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-get","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating GET HTTP method and set/volley the response\n"],["get","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-get","(path, parameters = nil, headers = nil)","<p>Performs a GET request with the given parameters.\n<p><code>path</code>: The URI (as a String) on which you want to perform ...\n"],["get","ActionDispatch::Routing::Mapper::HttpHelpers","ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-get","(*args, &block)","<p>Define a route that only recognizes HTTP GET. For supported arguments, see\n<code>Base#match</code>.\n<p>Example:\n<p>get ‘bacon’, …\n"],["get?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-get-3F","()","<p>Is this a GET (or HEAD) request? Equivalent to\n<code>request.request_method_symbol == :get</code>.\n"],["get_session","ActionDispatch::Session::CacheStore","ActionDispatch/Session/CacheStore.html#method-i-get_session","(env, sid)","<p>Get a session from the cache.\n"],["get_via_redirect","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-get_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a GET request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["grouped_collection_select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-grouped_collection_select","(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})",""],["grouped_collection_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_collection_select","(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code>, <code>&lt;optgroup&gt;</code> and\n<code>&lt;option&gt;</code> tags for the collection of existing return …\n"],["grouped_options_for_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_options_for_select","(grouped_options, selected_key = nil, prompt = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_for_select</code>, but wraps them with\n<code>&lt;optgroup&gt;</code> …\n"],["ha1","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-ha1","(credentials, password)",""],["halted_callback","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-halted_callback","(event)",""],["handle_unverified_request","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-handle_unverified_request","()","<p>This is the method that defines the application behavior when a request is\nfound to be unverified. By …\n"],["handles_encoding?","ActionView::Template::Handlers::ERB","ActionView/Template/Handlers/ERB.html#method-i-handles_encoding-3F","()",""],["has_errors?","ActionController::Responder","ActionController/Responder.html#method-i-has_errors-3F","()","<p>Check whether the resource has errors.\n"],["head","ActionController::Head","ActionController/Head.html#method-i-head","(status, options = {})","<p>Return a response that has no content (merely headers). The options\nargument is interpreted to be a hash …\n"],["head","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-head","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating HEAD HTTP method and set/volley the response\n"],["head","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-head","(path, parameters = nil, headers = nil)","<p>Performs a HEAD request with the given parameters. See <code>#get</code>\nfor more details.\n"],["head?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-head-3F","()","<p>Is this a HEAD request? Equivalent to <code>request.method_symbol ==\n:head</code>.\n"],["headers","ActionDispatch::Request","ActionDispatch/Request.html#method-i-headers","()","<p>Provides access to the request’s HTTP headers, for example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">headers</span>[<span class=\"ruby-string\">&quot;Content-Type&quot;</span>] <span class=\"ruby-comment\"># =&gt; &quot;text/plain&quot;</span>\n</pre>\n"],["headers=","ActionController::Testing","ActionController/Testing.html#method-i-headers-3D","(new_headers)","<p>TODO : Rewrite tests using controller.headers= to use Rack env\n"],["helper","AbstractController::Helpers::ClassMethods","AbstractController/Helpers/ClassMethods.html#method-i-helper","(*args, &block)","<p>The <code>helper</code> class method can take a series of helper module\nnames, a block, or both.\n<p>Parameters\n<p><code>*args</code> - ...\n"],["helper_attr","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-helper_attr","(*attrs)","<p>Declares helper accessors for controller attributes. For example, the\nfollowing adds new <code>name</code> and <code>name=</code> …\n"],["helper_class","ActionView::TestCase::Behavior::ClassMethods","ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_class","()",""],["helper_method","AbstractController::Helpers::ClassMethods","AbstractController/Helpers/ClassMethods.html#method-i-helper_method","(*meths)","<p>Declare a controller method as a helper. For example, the following makes\nthe <code>current_user</code> controller …\n"],["helper_method","ActionView::TestCase::Behavior::ClassMethods","ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_method","(*methods)",""],["helpers","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-helpers","()","<p>Provides a proxy to access helpers methods from outside the view.\n"],["hidden_actions","AbstractController::Base","AbstractController/Base.html#method-c-hidden_actions","()","<p>The list of hidden actions to an empty array. Defaults to an empty array.\nThis can be modified by other …\n"],["hidden_field","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-hidden_field","(method, options = {})",""],["hidden_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-hidden_field","(object_name, method, options = {})","<p>Returns a hidden input tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an …\n"],["hidden_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-hidden_field_tag","(name, value = nil, options = {})","<p>Creates a hidden form input field used to transmit data that would be lost\ndue to HTTP’s statelessness …\n"],["hide_action","ActionController::HideActions::ClassMethods","ActionController/HideActions/ClassMethods.html#method-i-hide_action","(*args)","<p>Sets all of the actions passed in as hidden actions.\n<p>Parameters\n<p><code>args</code> - A list of actions\n"],["highlight","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-highlight","(text, phrases, *args)","<p>Highlights one or more <code>phrases</code> everywhere in <code>text</code>\nby inserting it into a <code>:highlighter</code> string. The highlighter …\n"],["host","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-host","()","<p>Returns the host for this request, such as example.com.\n"],["host","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-host","()","<p>The hostname used in the last request.\n"],["host=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-host-3D","(host)",""],["host_with_port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-host_with_port","()","<p>Returns a host:port string for this request, such as “example.com” or\n“example.com:8080”. …\n"],["html?","Mime::Type","Mime/Type.html#method-i-html-3F","()",""],["html_document","ActionDispatch::Assertions::TagAssertions","ActionDispatch/Assertions/TagAssertions.html#method-i-html_document","()",""],["http_basic_authenticate_with","ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods","ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html#method-i-http_basic_authenticate_with","(options = {})",""],["https!","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-https-21","(flag = true)","<p>Specify whether or not the session should mimic a secure HTTPS request.\n\n<pre>session.https!\nsession.https!(false)</pre>\n"],["https?","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-https-3F","()","<p>Return <code>true</code> if the session is mimicking a secure HTTPS\nrequest.\n\n<pre>if session.https?\n  ...\nend</pre>\n"],["if_modified_since","ActionDispatch::Http::Cache::Request","ActionDispatch/Http/Cache/Request.html#method-i-if_modified_since","()",""],["if_modified_since=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-if_modified_since-3D","(last_modified)",""],["if_none_match","ActionDispatch::Http::Cache::Request","ActionDispatch/Http/Cache/Request.html#method-i-if_none_match","()",""],["if_none_match=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-if_none_match-3D","(etag)",""],["image_alt","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-image_alt","(src)",""],["image_path","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-image_path","(source)","<p>Computes the path to an image asset in the public images directory. Full\npaths from the document root …\n"],["image_path","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-image_path","(source)",""],["image_submit_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-image_submit_tag","(source, options = {})","<p>Displays an image which when clicked will submit the form.\n<p><code>source</code> is passed to AssetTagHelper#path_to_image ...\n"],["image_tag","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-image_tag","(source, options = {})","<p>Returns an html image tag for the <code>source</code>. The\n<code>source</code> can be a full path or a file that exists in your …\n"],["include_tag","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-i-include_tag","(*sources)",""],["included","ActionController::TestCase::RaiseActionExceptions","ActionController/TestCase/RaiseActionExceptions.html#method-c-included","(base)",""],["index","ActionController::Middleware","ActionController/Middleware.html#method-i-index","()",""],["inherited","AbstractController::Helpers::ClassMethods","AbstractController/Helpers/ClassMethods.html#method-i-inherited","(klass)","<p>When a class is inherited, wrap its helper module in a new module. This\nensures that the parent class’s …\n"],["inherited","AbstractController::Layouts::ClassMethods","AbstractController/Layouts/ClassMethods.html#method-i-inherited","(klass)",""],["inherited","ActionController::HideActions::ClassMethods","ActionController/HideActions/ClassMethods.html#method-i-inherited","(klass)",""],["inherited","ActionController::ParamsWrapper::ClassMethods","ActionController/ParamsWrapper/ClassMethods.html#method-i-inherited","(klass)","<p>Sets the default wrapper key or model which will be used to determine\nwrapper key and attribute names. …\n"],["inherited","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-c-inherited","(base)",""],["initialize_copy","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-initialize_copy","(other)",""],["initialize_sid","ActionDispatch::Session::Compatibility","ActionDispatch/Session/Compatibility.html#method-i-initialize_sid","()",""],["initialize_template_class","ActionController::Compatibility","ActionController/Compatibility.html#method-i-initialize_template_class","(*)","<p>For old tests\n"],["insert","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-insert","(index, *args, &block)",""],["insert_after","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-insert_after","(index, *args, &block)",""],["insert_before","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-insert_before","(index, *args, &block)",""],["inspect","ActionDispatch::MiddlewareStack::Middleware","ActionDispatch/MiddlewareStack/Middleware.html#method-i-inspect","()",""],["inspect","ActionView::Template","ActionView/Template.html#method-i-inspect","()",""],["instrument_fragment_cache","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-instrument_fragment_cache","(name, key)",""],["internal_methods","AbstractController::Base","AbstractController/Base.html#method-c-internal_methods","()","<p>A list of all internal methods for a controller. This finds the first\nabstract superclass of a controller, …\n"],["ip","ActionDispatch::Request","ActionDispatch/Request.html#method-i-ip","()",""],["ips_from","ActionDispatch::RemoteIp::GetIp","ActionDispatch/RemoteIp/GetIp.html#method-i-ips_from","(header, allow_proxies = false)",""],["j","ActionView::Helpers::JavaScriptHelper","ActionView/Helpers/JavaScriptHelper.html#method-i-j","(javascript)",""],["javascript_include_tag","ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers","ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers.html#method-i-javascript_include_tag","(*sources)","<p>Returns an HTML script tag for each of the <code>sources</code> provided.\n<p>Sources may be paths to JavaScript files. …\n"],["javascript_include_tag","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-javascript_include_tag","(*sources)",""],["javascript_path","ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers","ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers.html#method-i-javascript_path","(source)","<p>Computes the path to a javascript asset in the public javascripts\ndirectory. If the <code>source</code> filename has …\n"],["javascript_path","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-javascript_path","(source)",""],["javascript_tag","ActionView::Helpers::JavaScriptHelper","ActionView/Helpers/JavaScriptHelper.html#method-i-javascript_tag","(content_or_options_with_block = nil, html_options = {}, &block)","<p>Returns a JavaScript tag with the <code>content</code> inside. Example:\n\n<pre>javascript_tag &quot;alert('All is good')&quot;</pre>\n<p>Returns: …\n"],["json_resource_errors","ActionController::Responder","ActionController/Responder.html#method-i-json_resource_errors","()",""],["keep","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-keep","(k = nil)","<p>Keeps either the entire current flash or a specific flash entry available\nfor the next action:\n\n<pre>flash.keep ...</pre>\n"],["key?","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-key-3F","(name)",""],["key?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-key-3F","(key)",""],["keys","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-keys","()",""],["klass","ActionDispatch::MiddlewareStack::Middleware","ActionDispatch/MiddlewareStack/Middleware.html#method-i-klass","()",""],["l","AbstractController::Translation","AbstractController/Translation.html#method-i-l","(*args)",""],["l","ActionView::Helpers::TranslationHelper","ActionView/Helpers/TranslationHelper.html#method-i-l","(*args)",""],["label","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-label","(method, text = nil, options = {}, &block)",""],["label","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-label","(object_name, method, content_or_options = nil, options = nil, &block)","<p>Returns a label tag tailored for labelling an input field for a specified\nattribute (identified by <code>method</code> …\n"],["label_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-label_tag","(name = nil, content_or_options = nil, options = nil, &block)","<p>Creates a label element. Accepts a block.\n<p>Options\n<p>Creates standard HTML attributes for the tag.\n"],["last","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-last","()",""],["last_modified","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-last_modified","()",""],["last_modified=","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3D","(utc_time)",""],["last_modified?","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3F","()",""],["layout","AbstractController::Layouts::ClassMethods","AbstractController/Layouts/ClassMethods.html#method-i-layout","(layout, conditions = {})","<p>Specify the layout to use for this class.\n<p>If the specified layout is a:\n<p>String &mdash; the String is the template …\n"],["link_to","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-link_to","(*args, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code>. See the valid options …\n"],["link_to_function","ActionView::Helpers::JavaScriptHelper","ActionView/Helpers/JavaScriptHelper.html#method-i-link_to_function","(name, function, html_options={})","<p>Returns a link whose <code>onclick</code> handler triggers the passed\nJavaScript.\n<p>The helper receives a name, JavaScript …\n"],["link_to_if","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-link_to_if","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> if <code>condition</code> is true, …\n"],["link_to_unless","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-link_to_unless","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless <code>condition</code> is true, …\n"],["link_to_unless_current","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current","(name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless the current request …\n"],["load_session","ActionDispatch::Session::StaleSessionCheck","ActionDispatch/Session/StaleSessionCheck.html#method-i-load_session","(env)",""],["local?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-local-3F","()","<p>True if the request came from localhost, 127.0.0.1.\n"],["localize","AbstractController::Translation","AbstractController/Translation.html#method-i-localize","(*args)",""],["localize","ActionView::Helpers::TranslationHelper","ActionView/Helpers/TranslationHelper.html#method-i-localize","(*args)","<p>Delegates to <code>I18n.localize</code> with no additional functionality.\n"],["locals","ActionView::TestCase::Behavior","ActionView/TestCase/Behavior.html#method-i-locals","()",""],["location","ActionController::Metal","ActionController/Metal.html#method-i-location","()",""],["location","ActionDispatch::Response","ActionDispatch/Response.html#method-i-location","()",""],["location=","ActionController::Metal","ActionController/Metal.html#method-i-location-3D","(url)",""],["location=","ActionDispatch::Response","ActionDispatch/Response.html#method-i-location-3D","(url)",""],["logger","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-logger","()",""],["logger","ActionView::LogSubscriber","ActionView/LogSubscriber.html#method-i-logger","()","<p>TODO: Ideally, ActionView should have its own logger so it does not depend\non AC.logger\n"],["lookup","Mime::Type","Mime/Type.html#method-c-lookup","(string)",""],["lookup_by_extension","Mime::Type","Mime/Type.html#method-c-lookup_by_extension","(extension)",""],["lookup_context","AbstractController::ViewPaths","AbstractController/ViewPaths.html#method-i-lookup_context","()","<p>LookupContext is the object responsible to hold all information required to\nlookup templates, i.e. view …\n"],["mail_to","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-mail_to","(email_address, name = nil, html_options = {})","<p>Creates a mailto link tag to the specified <code>email_address</code>,\nwhich is also used as the name of the link …\n"],["match","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-match","(path, options=nil)","<p>Matches a url pattern to one or more routes. Any symbols in a pattern are\ninterpreted as url query parameters …\n"],["match","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-match","(path, *rest)",""],["match","HTML::Selector","HTML/Selector.html#method-i-match","(element, first_only = false)","<p>Matches an element against the selector.\n<p>For a simple selector this method returns an array with the element …\n"],["match?","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-i-match-3F","(path)",""],["media_type","ActionDispatch::Request","ActionDispatch/Request.html#method-i-media_type","()",""],["member","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-member","()","<p>To add a member route, add a member block into the resource block:\n\n<pre>resources :photos do\n  member do\n  ...</pre>\n"],["message","ActionDispatch::Response","ActionDispatch/Response.html#method-i-message","()",""],["method","ActionDispatch::Request","ActionDispatch/Request.html#method-i-method","()","<p>Returns the original value of the environment’s REQUEST_METHOD, even if it\nwas overridden by middleware. …\n"],["method_added","AbstractController::Base","AbstractController/Base.html#method-c-method_added","(name)",""],["method_for_action","ActionController::Compatibility","ActionController/Compatibility.html#method-i-method_for_action","(action_name)",""],["method_for_action","ActionController::ImplicitRender","ActionController/ImplicitRender.html#method-i-method_for_action","(action_name)",""],["method_missing","AbstractController::Collector","AbstractController/Collector.html#method-i-method_missing","(symbol, &block)",""],["method_missing","ActionDispatch::Assertions::RoutingAssertions","ActionDispatch/Assertions/RoutingAssertions.html#method-i-method_missing","(selector, *args, &block)","<p>ROUTES TODO: These assertions should really work in an integration context\n"],["method_missing","ActionDispatch::BodyProxy","ActionDispatch/BodyProxy.html#method-i-method_missing","(*args, &block)",""],["method_missing","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-method_missing","(sym, *args, &block)","<p>Delegate unhandled messages to the current session instance.\n"],["method_symbol","ActionDispatch::Request","ActionDispatch/Request.html#method-i-method_symbol","()","<p>Returns a symbol form of the #method\n"],["middleware","ActionController::Metal","ActionController/Metal.html#method-c-middleware","()","<p>Alias for middleware_stack\n"],["mime_type","ActionView::Template","ActionView/Template.html#method-i-mime_type","()",""],["modules_for_helpers","AbstractController::Helpers::ClassMethods","AbstractController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(args)","<p>Returns a list of modules, normalized from the acceptable kinds of helpers\nwith the following behavior: …\n"],["modules_for_helpers","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(args)","<p>Overwrite modules_for_helpers to accept :all as argument, which loads all\nhelpers in helpers_path.\n<p>Parameters …\n"],["mount","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-mount","(app, options = nil)","<p>Mount a Rack-based application to be used within the application.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">mount</span> <span class=\"ruby-constant\">SomeRackApp</span>, :<span class=\"ruby-identifier\">at</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;some_route&quot;</span>\n</pre>\n"],["multipart=","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-multipart-3D","(multipart)",""],["namespace","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-namespace","(path, options = {})","<p>See ActionDispatch::Routing::Mapper::Scoping#namespace\n"],["namespace","ActionDispatch::Routing::Mapper::Scoping","ActionDispatch/Routing/Mapper/Scoping.html#method-i-namespace","(path, options = {})","<p>Scopes routes to a specific namespace. For example:\n\n<pre>namespace :admin do\n  resources :posts\nend</pre>\n<p>This generates …\n"],["navigation_behavior","ActionController::Responder","ActionController/Responder.html#method-i-navigation_behavior","(error)","<p>This is the common behavior for formats associated with browsing, like\n:html, :iphone and so forth.\n"],["navigation_location","ActionController::Responder","ActionController/Responder.html#method-i-navigation_location","()",""],["negotiate_mime","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-negotiate_mime","(order)","<p>Receives an array of mimes and return the first user sent mime that matches\nthe order array.\n"],["nested","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-nested","()",""],["new","AbstractController::DoubleRenderError","AbstractController/DoubleRenderError.html#method-c-new","(message = nil)",""],["new","AbstractController::Layouts","AbstractController/Layouts.html#method-c-new","(*)",""],["new","ActionController::Caching::Actions::ActionCachePath","ActionController/Caching/Actions/ActionCachePath.html#method-c-new","(controller, options = {}, infer_extension = true)","<p>If <code>infer_extension</code> is true, the cache path extension is looked\nup from the request’s path and format. …\n"],["new","ActionController::Metal","ActionController/Metal.html#method-c-new","()",""],["new","ActionController::Middleware","ActionController/Middleware.html#method-c-new","(app)",""],["new","ActionController::Middleware","ActionController/Middleware.html#method-c-new","(app)",""],["new","ActionController::Middleware::ActionMiddleware","ActionController/Middleware/ActionMiddleware.html#method-c-new","(controller, app)",""],["new","ActionController::Responder","ActionController/Responder.html#method-c-new","(controller, resources, options={})",""],["new","ActionDispatch::BestStandardsSupport","ActionDispatch/BestStandardsSupport.html#method-c-new","(app, type = true)",""],["new","ActionDispatch::BodyProxy","ActionDispatch/BodyProxy.html#method-c-new","(body, &block)",""],["new","ActionDispatch::Callbacks","ActionDispatch/Callbacks.html#method-c-new","(app)",""],["new","ActionDispatch::Cookies","ActionDispatch/Cookies.html#method-c-new","(app)",""],["new","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-c-new","(app)",""],["new","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-c-new","(env, exception)",""],["new","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-c-new","(root, cache_control)",""],["new","ActionDispatch::Flash","ActionDispatch/Flash.html#method-c-new","(app)",""],["new","ActionDispatch::Head","ActionDispatch/Head.html#method-c-new","(app)",""],["new","ActionDispatch::Http::Headers","ActionDispatch/Http/Headers.html#method-c-new","(*args)",""],["new","ActionDispatch::Http::ParameterFilter","ActionDispatch/Http/ParameterFilter.html#method-c-new","(filters)",""],["new","ActionDispatch::Http::UploadedFile","ActionDispatch/Http/UploadedFile.html#method-c-new","(hash)",""],["new","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-c-new","(app)","<p>Create and initialize a new Session instance.\n"],["new","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-c-new","(*args)",""],["new","ActionDispatch::MiddlewareStack::Middleware","ActionDispatch/MiddlewareStack/Middleware.html#method-c-new","(klass_or_name, *args, &block)",""],["new","ActionDispatch::ParamsParser","ActionDispatch/ParamsParser.html#method-c-new","(app, parsers = {})",""],["new","ActionDispatch::PublicExceptions","ActionDispatch/PublicExceptions.html#method-c-new","(public_path)",""],["new","ActionDispatch::RailsEntityStore","ActionDispatch/RailsEntityStore.html#method-c-new","(store = RAILS_CACHE)",""],["new","ActionDispatch::RailsMetaStore","ActionDispatch/RailsMetaStore.html#method-c-new","(store = RAILS_CACHE)","<p>TODO: Finally deal with the RAILS_CACHE global\n"],["new","ActionDispatch::Reloader","ActionDispatch/Reloader.html#method-c-new","(app, condition=nil)",""],["new","ActionDispatch::RemoteIp","ActionDispatch/RemoteIp.html#method-c-new","(app, check_ip_spoofing = true, custom_proxies = nil)",""],["new","ActionDispatch::RemoteIp::GetIp","ActionDispatch/RemoteIp/GetIp.html#method-c-new","(env, middleware)",""],["new","ActionDispatch::RequestId","ActionDispatch/RequestId.html#method-c-new","(app)",""],["new","ActionDispatch::Rescue","ActionDispatch/Rescue.html#method-c-new","(app, rescuers = {}, &block)",""],["new","ActionDispatch::Response","ActionDispatch/Response.html#method-c-new","(status = 200, header = {}, body = [])",""],["new","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-new","()",""],["new","ActionDispatch::Routing::UrlFor","ActionDispatch/Routing/UrlFor.html#method-c-new","(*)",""],["new","ActionDispatch::Session::CacheStore","ActionDispatch/Session/CacheStore.html#method-c-new","(app, options = {})","<p>Create a new store. The cache to use can be passed in the\n<code>:cache</code> option. If it is not specified,\n<code>Rails.cache</code> …\n"],["new","ActionDispatch::Session::Compatibility","ActionDispatch/Session/Compatibility.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::Session::MemCacheStore","ActionDispatch/Session/MemCacheStore.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::ShowExceptions","ActionDispatch/ShowExceptions.html#method-c-new","(app, exceptions_app = nil)",""],["new","ActionDispatch::Static","ActionDispatch/Static.html#method-c-new","(app, path, cache_control=nil)",""],["new","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-c-new","(env = {})",""],["new","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-c-new","(env = {})",""],["new","ActionView::FileSystemResolver","ActionView/FileSystemResolver.html#method-c-new","(path, pattern=nil)",""],["new","ActionView::FixtureResolver","ActionView/FixtureResolver.html#method-c-new","(hash = {}, pattern=nil)",""],["new","ActionView::Helpers::AssetTagHelper::AssetIncludeTag","ActionView/Helpers/AssetTagHelper/AssetIncludeTag.html#method-c-new","(config, asset_paths)",""],["new","ActionView::Helpers::AtomFeedHelper::AtomBuilder","ActionView/Helpers/AtomFeedHelper/AtomBuilder.html#method-c-new","(xml)",""],["new","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-c-new","(xml, view, feed_options = {})",""],["new","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-c-new","(object_name, object, template, options, proc)",""],["new","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-c-new","(object_name, method_name, template_object, object = nil)",""],["new","ActionView::Helpers::NumberHelper::InvalidNumberError","ActionView/Helpers/NumberHelper/InvalidNumberError.html#method-c-new","(number)",""],["new","ActionView::PartialRenderer","ActionView/PartialRenderer.html#method-c-new","(*)",""],["new","ActionView::Renderer","ActionView/Renderer.html#method-c-new","(lookup_context)",""],["new","ActionView::Resolver","ActionView/Resolver.html#method-c-new","()",""],["new","ActionView::Resolver::Path","ActionView/Resolver/Path.html#method-c-new","(name, prefix, partial, virtual)",""],["new","ActionView::Template","ActionView/Template.html#method-c-new","(source, identifier, handler, details)",""],["new","ActionView::TestCase::Behavior::ClassMethods","ActionView/TestCase/Behavior/ClassMethods.html#method-i-new","(*)",""],["new","ActionView::TestCase::TestController","ActionView/TestCase/TestController.html#method-c-new","()",""],["new","HTML::Selector","HTML/Selector.html#method-c-new","(selector, *values)","<p>Creates a new selector from a CSS 2 selector expression.\n<p>The first argument is the selector expression. …\n"],["new","Mime::Type","Mime/Type.html#method-c-new","(string, symbol = nil, synonyms = [])",""],["new","Sprockets::Bootstrap","Sprockets/Bootstrap.html#method-c-new","(app)",""],["new","Sprockets::StaticCompiler","Sprockets/StaticCompiler.html#method-c-new","(env, target, paths, options = {})",""],["next_element","HTML::Selector","HTML/Selector.html#method-i-next_element","(element, name = nil)","<p>Return the next element after this one. Skips sibling text nodes.\n<p>With the <code>name</code> argument, returns the …\n"],["next_selector","HTML::Selector","HTML/Selector.html#method-i-next_selector","(statement, values)","<p>Called to create a dependent selector (sibling, descendant, etc). Passes\nthe remainder of the statement …\n"],["nonce","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-nonce","(secret_key, time = Time.now)","<p>Uses an MD5 digest based on time to generate a value to be used only once.\n<p>A server-specified data string …\n"],["normalize_name","ActionDispatch::Routing::Mapper","ActionDispatch/Routing/Mapper.html#method-c-normalize_name","(name)",""],["normalize_path","ActionDispatch::Routing::Mapper","ActionDispatch/Routing/Mapper.html#method-c-normalize_path","(path)","<p>Invokes Rack::Mount::Utils.normalize path and ensure that (:locale) becomes\n(/:locale) instead of /(:locale). …\n"],["not_modified?","ActionDispatch::Http::Cache::Request","ActionDispatch/Http/Cache/Request.html#method-i-not_modified-3F","(modified_at)",""],["notice","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-notice","()","<p>Convenience accessor for flash\n"],["notice=","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-notice-3D","(message)","<p>Convenience accessor for flash=\n"],["now","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-now","()","<p>Sets a flash that will not be available to the next action, only to the\ncurrent.\n\n<pre>flash.now[:message] = ...</pre>\n"],["now_is_loaded?","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-now_is_loaded-3F","()",""],["nth_child","HTML::Selector","HTML/Selector.html#method-i-nth_child","(a, b, of_type, reverse)","<p>Returns a lambda that can match an element against the nth-child pseudo\nclass, given the following arguments: …\n"],["number_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-number_field","(object_name, method, options = {})","<p>Returns an input tag of type “number”.\n<p>Options\n<p>Accepts same options as number_field_tag\n"],["number_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-number_field_tag","(name, value = nil, options = {})","<p>Creates a number field.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["number_to_currency","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_to_currency","(number, options = {})","<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You\ncan customize the format in the <code>options</code> hash. …\n"],["number_to_human","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_to_human","(number, options = {})","<p>Pretty prints (formats and approximates) a number in a way it is more\nreadable by humans (eg.: 1200000000 …\n"],["number_to_human_size","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_to_human_size","(number, options = {})","<p>Formats the bytes in <code>number</code> into a more understandable\nrepresentation (e.g., giving it 1500 yields 1.5 …\n"],["number_to_percentage","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_to_percentage","(number, options = {})","<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can\ncustomize the format in the <code>options</code> hash. …\n"],["number_to_phone","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_to_phone","(number, options = {})","<p>Formats a <code>number</code> into a US phone number (e.g., (555)\n123-9876). You can customize the format in the  …\n"],["number_with_delimiter","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_with_delimiter","(number, options = {})","<p>Formats a <code>number</code> with grouped thousands using\n<code>delimiter</code> (e.g., 12,324). You can customize the format …\n"],["number_with_precision","ActionView::Helpers::NumberHelper","ActionView/Helpers/NumberHelper.html#method-i-number_with_precision","(number, options = {})","<p>Formats a <code>number</code> with the specified level of\n<code>:precision</code> (e.g., 112.32 has a precision of 2 if\n<code>:significant</code> …\n"],["object","ActionView::Helpers::ActiveModelInstanceTag","ActionView/Helpers/ActiveModelInstanceTag.html#method-i-object","()",""],["only_child","HTML::Selector","HTML/Selector.html#method-i-only_child","(of_type)","<p>Creates a only child lambda. Pass <code>of-type</code> to only look at\nelements of its type.\n"],["opaque","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-opaque","(secret_key)","<p>Opaque based on random generation - but changing each request?\n"],["open","ActionDispatch::RailsEntityStore","ActionDispatch/RailsEntityStore.html#method-i-open","(key)",""],["open_session","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-open_session","(app = nil)","<p>Open a new session instance. If a block is given, the new session is\nyielded to the block before being …\n"],["option_groups_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-option_groups_from_collection_for_select","(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_from_collection_for_select</code>, but groups them by …\n"],["optional_port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-optional_port","()","<p>Returns a number port suffix like 8080 if the port number of this request\nis not the default HTTP port …\n"],["options_for_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-options_for_select","(container, selected = nil)","<p>Accepts a container (hash, array, enumerable, your type) and returns a\nstring of option tags. Given a …\n"],["options_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-options_from_collection_for_select","(collection, value_method, text_method, selected = nil)","<p>Returns a string of option tags that have been compiled by iterating over\nthe <code>collection</code> and assigning …\n"],["original_fullpath","ActionDispatch::Request","ActionDispatch/Request.html#method-i-original_fullpath","()",""],["original_url","ActionDispatch::Request","ActionDispatch/Request.html#method-i-original_url","()",""],["parameter_filter","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter","()",""],["parameter_filter_for","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter_for","(filters)",""],["parameters","ActionDispatch::Http::Parameters","ActionDispatch/Http/Parameters.html#method-i-parameters","()","<p>Returns both GET and POST parameters in a single hash.\n"],["paramify_values","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-paramify_values","(hash_or_array_or_value)",""],["params","ActionController::Metal","ActionController/Metal.html#method-i-params","()",""],["params","ActionDispatch::Http::Parameters","ActionDispatch/Http/Parameters.html#method-i-params","()",""],["params=","ActionController::Metal","ActionController/Metal.html#method-i-params-3D","(val)",""],["parent_prefixes","AbstractController::ViewPaths::ClassMethods","AbstractController/ViewPaths/ClassMethods.html#method-i-parent_prefixes","()",""],["parse","Mime::Type","Mime/Type.html#method-c-parse","(accept_header)",""],["parse_data_with_trailing_star","Mime::Type","Mime/Type.html#method-c-parse_data_with_trailing_star","(input)","<p>input: ‘text’ returned value:  [Mime::JSON, Mime::XML, Mime::ICS,\nMime::HTML, Mime::CSS, Mime::CSV,  …\n"],["password_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-password_field","(object_name, method, options = {})","<p>Returns an input tag of the “password” type tailored for accessing a\nspecified attribute (identified …\n"],["password_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-password_field_tag","(name = \"password\", value = nil, options = {})","<p>Creates a password field, a masked text field that will hide the users\ninput behind a mask character. …\n"],["path=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-path-3D","(path)",""],["path_for","Sprockets::StaticCompiler","Sprockets/StaticCompiler.html#method-i-path_for","(asset)",""],["path_parameters","ActionDispatch::Http::Parameters","ActionDispatch/Http/Parameters.html#method-i-path_parameters","()","<p>Returns a hash with the parameters used to form the path of the request.\nReturned hash keys are strings: …\n"],["path_to_asset","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-path_to_asset","(source, options = {})",""],["path_to_audio","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-path_to_audio","(source)",""],["path_to_font","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-path_to_font","(source)",""],["path_to_font","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-path_to_font","(source)",""],["path_to_image","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-path_to_image","(source)",""],["path_to_image","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-path_to_image","(source)",""],["path_to_javascript","ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers","ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers.html#method-i-path_to_javascript","(source)",""],["path_to_javascript","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-path_to_javascript","(source)",""],["path_to_stylesheet","ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers","ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers.html#method-i-path_to_stylesheet","(source)",""],["path_to_stylesheet","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-path_to_stylesheet","(source)",""],["path_to_video","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-path_to_video","(source)",""],["performed?","ActionController::Metal","ActionController/Metal.html#method-i-performed-3F","()",""],["phone_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-phone_field","(object_name, method, options = {})",""],["phone_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-phone_field_tag","(name, value = nil, options = {})",""],["pluralize","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-pluralize","(count, singular, plural = nil)","<p>Attempts to pluralize the <code>singular</code> word unless\n<code>count</code> is 1. If <code>plural</code> is supplied, it will use\nthat when …\n"],["polymorphic_path","ActionDispatch::Routing::PolymorphicRoutes","ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_path","(record_or_hash_or_array, options = {})","<p>Returns the path component of a URL for the given record. It uses\n<code>polymorphic_url</code> with <code>:routing_type</code> …\n"],["polymorphic_url","ActionDispatch::Routing::PolymorphicRoutes","ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_url","(record_or_hash_or_array, options = {})","<p>Constructs a call to a named RESTful route for the given record and returns\nthe resulting URL string. …\n"],["port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-port","()","<p>Returns the port number of this request as an integer.\n"],["port=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-port-3D","(number)",""],["port_string","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-port_string","()","<p>Returns a string port suffix, including colon, like “:8080” if the port\nnumber of this request …\n"],["post","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-post","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating POST HTTP method and set/volley the response\n"],["post","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-post","(path, parameters = nil, headers = nil)","<p>Performs a POST request with the given parameters. See <code>#get</code>\nfor more details.\n"],["post","ActionDispatch::Routing::Mapper::HttpHelpers","ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-post","(*args, &block)","<p>Define a route that only recognizes HTTP POST. For supported arguments, see\n<code>Base#match</code>.\n<p>Example:\n<p>post ‘bacon’, …\n"],["post?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-post-3F","()","<p>Is this a POST request? Equivalent to <code>request.request_method_symbol\n== :post</code>.\n"],["post_via_redirect","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-post_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a POST request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["prepare!","ActionDispatch::Reloader","ActionDispatch/Reloader.html#method-c-prepare-21","()","<p>Execute all prepare callbacks.\n"],["prepare!","ActionDispatch::Response","ActionDispatch/Response.html#method-i-prepare-21","()",""],["prepare_controller_class","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-prepare_controller_class","(new_class)",""],["prepend_after_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-prepend_after_filter","","<p>Prepend an after filter. See _insert_callbacks for parameter details.\n"],["prepend_around_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-prepend_around_filter","","<p>Prepend an around filter. See _insert_callbacks for parameter details.\n"],["prepend_before_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-prepend_before_filter","","<p>Prepend a before filter. See _insert_callbacks for parameter details.\n"],["prepend_view_path","AbstractController::ViewPaths","AbstractController/ViewPaths.html#method-i-prepend_view_path","(path)",""],["prepend_view_path","AbstractController::ViewPaths::ClassMethods","AbstractController/ViewPaths/ClassMethods.html#method-i-prepend_view_path","(path)","<p>Prepend a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, ...\n"],["process","AbstractController::Base","AbstractController/Base.html#method-i-process","(action, *args)","<p>Calls the action going through the entire action dispatch stack.\n<p>The actual method that is called is determined …\n"],["process","ActionController::Middleware","ActionController/Middleware.html#method-i-process","(action)",""],["process","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-process","(*args)",""],["process","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-process","(action, parameters = nil, session = nil, flash = nil, http_method = 'GET')",""],["process_action","AbstractController::Callbacks","AbstractController/Callbacks.html#method-i-process_action","(*args)","<p>Override AbstractController::Base’s process_action to run the\nprocess_action callbacks around the normal …\n"],["process_action","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-process_action","(*args)",""],["process_action","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-process_action","(event)",""],["process_action","ActionController::ParamsWrapper","ActionController/ParamsWrapper.html#method-i-process_action","(*args)","<p>Performs parameters wrapping upon the request. Will be called automatically\nby the metal call stack. …\n"],["process_attributes_for","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-process_attributes_for","(node, options)",""],["process_node","HTML::FullSanitizer","HTML/FullSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::LinkSanitizer","HTML/LinkSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::Sanitizer","HTML/Sanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-process_node","(node, result, options)",""],["process_view_paths","ActionView::Base","ActionView/Base.html#method-c-process_view_paths","(value)",""],["process_with_new_base_test","ActionController::Testing","ActionController/Testing.html#method-i-process_with_new_base_test","(request, response)","<p>TODO: Clean this up\n"],["protect_against_forgery?","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-protect_against_forgery-3F","()",""],["protect_from_forgery","ActionController::RequestForgeryProtection::ClassMethods","ActionController/RequestForgeryProtection/ClassMethods.html#method-i-protect_from_forgery","(options = {})","<p>Turn on request forgery protection. Bear in mind that only non-GET,\nHTML/JavaScript requests are checked. …\n"],["protocol","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-protocol","()","<p>Returns ‘https://’ if this is an SSL request and ‘http://’ otherwise.\n"],["provide","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-provide","(name, content = nil, &block)","<p>The same as <code>content_for</code> but when used with streaming flushes\nstraight back to the layout. In other words, …\n"],["put","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-put","(action, parameters = nil, session = nil, flash = nil)","<p>Executes a request simulating PUT HTTP method and set/volley the response\n"],["put","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-put","(path, parameters = nil, headers = nil)","<p>Performs a PUT request with the given parameters. See <code>#get</code> for\nmore details.\n"],["put","ActionDispatch::Routing::Mapper::HttpHelpers","ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-put","(*args, &block)","<p>Define a route that only recognizes HTTP PUT. For supported arguments, see\n<code>Base#match</code>.\n<p>Example:\n<p>put ‘bacon’, …\n"],["put?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-put-3F","()","<p>Is this a PUT request? Equivalent to <code>request.request_method_symbol ==\n:put</code>.\n"],["put_via_redirect","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-put_via_redirect","(path, parameters = nil, headers = nil)","<p>Performs a PUT request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["query","ActionView::NullResolver","ActionView/NullResolver.html#method-i-query","(path, exts, formats)",""],["query_parameters","ActionDispatch::Request","ActionDispatch/Request.html#method-i-query_parameters","()",""],["rack_cookies","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-rack_cookies","()",""],["radio_button","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-radio_button","(method, tag_value, options = {})",""],["radio_button","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-radio_button","(object_name, method, tag_value, options = {})","<p>Returns a radio button tag for accessing a specified attribute (identified\nby <code>method</code>) on an object assigned …\n"],["radio_button_checked?","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-c-radio_button_checked-3F","(value, checked_value)",""],["radio_button_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-radio_button_tag","(name, value, checked = false, options = {})","<p>Creates a radio button; use groups of radio buttons named the same to allow\nusers to select from a group …\n"],["range_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-range_field","(object_name, method, options = {})","<p>Returns an input tag of type “range”.\n<p>Options\n<p>Accepts same options as range_field_tag\n"],["range_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-range_field_tag","(name, value = nil, options = {})","<p>Creates a range form element.\n<p>Options\n<p>Accepts the same options as number_field_tag.\n"],["raw","ActionView::Helpers::OutputSafetyHelper","ActionView/Helpers/OutputSafetyHelper.html#method-i-raw","(stringish)","<p>This method outputs without escaping a string. Since escaping tags is now\ndefault, this can be used when …\n"],["raw_host_with_port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-raw_host_with_port","()","<p>Returns the host for this request, such as “example.com”.\n"],["raw_post","ActionDispatch::Request","ActionDispatch/Request.html#method-i-raw_post","()","<p>Read the request body. This is useful for web services that need to work\nwith raw requests directly. …\n"],["read","ActionDispatch::Http::UploadedFile","ActionDispatch/Http/UploadedFile.html#method-i-read","(*args)",""],["read","ActionDispatch::RailsEntityStore","ActionDispatch/RailsEntityStore.html#method-i-read","(key)",""],["read","ActionDispatch::RailsMetaStore","ActionDispatch/RailsMetaStore.html#method-i-read","(key)",""],["read_fragment","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-read_fragment","(key, options = nil)","<p>Reads a cached fragment from the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats). …\n"],["record_key_for_dom_id","ActionController::RecordIdentifier","ActionController/RecordIdentifier.html#method-i-record_key_for_dom_id","(record)","<p>Returns a string representation of the key attribute(s) that is suitable\nfor use in an HTML DOM id.  …\n"],["recycle!","ActionController::TestResponse","ActionController/TestResponse.html#method-i-recycle-21","()",""],["recycle!","ActionController::Testing","ActionController/Testing.html#method-i-recycle-21","()",""],["redirect","ActionDispatch::Routing::Redirection","ActionDispatch/Routing/Redirection.html#method-i-redirect","(*args, &block)","<p>Redirect any path to another path:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">match</span> <span class=\"ruby-string\">&quot;/stories&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">redirect</span>(<span class=\"ruby-string\">&quot;/posts&quot;</span>)\n</pre>\n<p>You can also use interpolation …\n"],["redirect_to","ActionController::Flash","ActionController/Flash.html#method-i-redirect_to","(options = {}, response_status_and_flash = {})",""],["redirect_to","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-redirect_to","(*args)",""],["redirect_to","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-redirect_to","(event)",""],["redirect_to","ActionController::Redirecting","ActionController/Redirecting.html#method-i-redirect_to","(options = {}, response_status = {})","<p>Redirects the browser to the target specified in <code>options</code>. This\nparameter can take one of three forms: …\n"],["redirect_to_url","ActionDispatch::TestProcess","ActionDispatch/TestProcess.html#method-i-redirect_to_url","()",""],["redirect_url","ActionDispatch::Response","ActionDispatch/Response.html#method-i-redirect_url","()",""],["ref","Mime::Type","Mime/Type.html#method-i-ref","()",""],["refresh","ActionView::Template","ActionView/Template.html#method-i-refresh","(view)","<p>Receives a view object and return a template similar to self by using\n@virtual_path.\n<p>This method is useful …\n"],["register","Mime::Type","Mime/Type.html#method-c-register","(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)",""],["register_alias","Mime::Type","Mime/Type.html#method-c-register_alias","(string, symbol, extension_synonyms = [])","<p>Registers an alias that’s not used on mime type lookup, but can be\nreferenced directly. Especially useful …\n"],["register_css_compressor","Sprockets::Compressors","Sprockets/Compressors.html#method-c-register_css_compressor","(name, klass, options = {})",""],["register_javascript_expansion","ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers::ClassMethods","ActionView/Helpers/AssetTagHelper/JavascriptTagHelpers/ClassMethods.html#method-i-register_javascript_expansion","(expansions)","<p>Register one or more javascript files to be included when\n<code>symbol</code> is passed to <code>javascript_include_tag</code> …\n"],["register_js_compressor","Sprockets::Compressors","Sprockets/Compressors.html#method-c-register_js_compressor","(name, klass, options = {})",""],["register_stylesheet_expansion","ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers::ClassMethods","ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers/ClassMethods.html#method-i-register_stylesheet_expansion","(expansions)","<p>Register one or more stylesheet files to be included when\n<code>symbol</code> is passed to <code>stylesheet_link_tag</code>. This …\n"],["registered_css_compressor","Sprockets::Compressors","Sprockets/Compressors.html#method-c-registered_css_compressor","(name)",""],["registered_js_compressor","Sprockets::Compressors","Sprockets/Compressors.html#method-c-registered_js_compressor","(name)",""],["remote_addr=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-remote_addr-3D","(addr)",""],["remote_ip","ActionDispatch::Request","ActionDispatch/Request.html#method-i-remote_ip","()","<p>Originating IP address, usually set by the RemoteIp middleware.\n"],["render","AbstractController::Rendering","AbstractController/Rendering.html#method-i-render","(*args, &block)","<p>Normalize arguments, options and then delegates render_to_body and sticks\nthe result in self.response_body. …\n"],["render","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-render","(*args)",""],["render","ActionView::Helpers::RenderingHelper","ActionView/Helpers/RenderingHelper.html#method-i-render","(options = {}, locals = {}, &block)","<p>Returns the result of a render that’s dictated by the options hash. The\nprimary options are:\n<p><code>:partial</code> ...\n"],["render","ActionView::PartialRenderer","ActionView/PartialRenderer.html#method-i-render","(context, options, block)",""],["render","ActionView::Renderer","ActionView/Renderer.html#method-i-render","(context, options)","<p>Main render entry point shared by AV and AC.\n"],["render","ActionView::Template","ActionView/Template.html#method-i-render","(view, locals, buffer=nil, &block)","<p>Render a template. If the template was not compiled yet, it is done exactly\nbefore rendering.\n<p>This method …\n"],["render","ActionView::TestCase::Behavior","ActionView/TestCase/Behavior.html#method-i-render","(options = {}, local_assigns = {}, &block)",""],["render","ActionView::TestCase::Behavior::Locals","ActionView/TestCase/Behavior/Locals.html#method-i-render","(options = {}, local_assigns = {})",""],["render_body","ActionView::Renderer","ActionView/Renderer.html#method-i-render_body","(context, options)","<p>Render but returns a valid Rack body. If fibers are defined, we return a\nstreaming body that renders …\n"],["render_collection","ActionView::LogSubscriber","ActionView/LogSubscriber.html#method-i-render_collection","(event)",""],["render_collection","ActionView::PartialRenderer","ActionView/PartialRenderer.html#method-i-render_collection","()",""],["render_partial","ActionView::LogSubscriber","ActionView/LogSubscriber.html#method-i-render_partial","(event)",""],["render_partial","ActionView::PartialRenderer","ActionView/PartialRenderer.html#method-i-render_partial","()",""],["render_template","ActionView::LogSubscriber","ActionView/LogSubscriber.html#method-i-render_template","(event)",""],["render_to_body","AbstractController::Rendering","AbstractController/Rendering.html#method-i-render_to_body","(options = {})","<p>Raw rendering of a template to a Rack-compatible body. :api: plugin\n"],["render_to_body","ActionController::Compatibility","ActionController/Compatibility.html#method-i-render_to_body","(options)",""],["render_to_body","ActionController::Renderers","ActionController/Renderers.html#method-i-render_to_body","(options)",""],["render_to_string","AbstractController::Rendering","AbstractController/Rendering.html#method-i-render_to_string","(*args, &block)","<p>Raw rendering of a template to a string. Just convert the results of\nrender_response into a String. :api: …\n"],["render_to_string","ActionController::Rendering","ActionController/Rendering.html#method-i-render_to_string","(*)","<p>Overwrite render_to_string because body can now be set to a rack body.\n"],["request_http_basic_authentication","ActionController::HttpAuthentication::Basic::ControllerMethods","ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-request_http_basic_authentication","(realm = \"Application\")",""],["request_http_digest_authentication","ActionController::HttpAuthentication::Digest::ControllerMethods","ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-request_http_digest_authentication","(realm = \"Application\", message = nil)","<p>Render output including the HTTP Digest authentication header\n"],["request_http_token_authentication","ActionController::HttpAuthentication::Token::ControllerMethods","ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-request_http_token_authentication","(realm = \"Application\")",""],["request_method","ActionDispatch::Request","ActionDispatch/Request.html#method-i-request_method","()","<p>Returns the HTTP method that the application should see. In the case where\nthe method was overridden …\n"],["request_method=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-request_method-3D","(method)",""],["request_method_symbol","ActionDispatch::Request","ActionDispatch/Request.html#method-i-request_method_symbol","()","<p>Returns a symbol form of the #request_method\n"],["request_parameters","ActionDispatch::Request","ActionDispatch/Request.html#method-i-request_parameters","()",""],["request_uri=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-request_uri-3D","(uri)",""],["request_via_redirect","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-request_via_redirect","(http_method, path, parameters = nil, headers = nil)","<p>Performs a request using the specified method, following any subsequent\nredirect. Note that the redirects …\n"],["require_engine","ActionView::Template::Handlers::Builder","ActionView/Template/Handlers/Builder.html#method-i-require_engine","()",""],["rescue_action","ActionController::Compatibility","ActionController/Compatibility.html#method-i-rescue_action","(env)",""],["rescue_action_without_handler","ActionController::TestCase::RaiseActionExceptions","ActionController/TestCase/RaiseActionExceptions.html#method-i-rescue_action_without_handler","(e)",""],["rescue_from","ActionDispatch::Rescue","ActionDispatch/Rescue.html#method-i-rescue_from","(exception, rescuer)",""],["rescue_responses","ActionDispatch::ShowExceptions","ActionDispatch/ShowExceptions.html#method-c-rescue_responses","()",""],["rescue_template","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-rescue_template","()",""],["rescue_templates","ActionDispatch::ShowExceptions","ActionDispatch/ShowExceptions.html#method-c-rescue_templates","()",""],["rescue_with_handler","ActionController::Rescue","ActionController/Rescue.html#method-i-rescue_with_handler","(exception)",""],["reset!","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-reset-21","()","<p>Reset the current session. This is useful for testing multiple sessions in\na single test case.\n"],["reset!","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-reset-21","()","<p>Resets the instance. This can be used to reset the state information in an\nexisting session instance, …\n"],["reset_cycle","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-reset_cycle","(name = \"default\")","<p>Resets a cycle so that it starts from the first element the next time it is\ncalled. Pass in <code>name</code> to reset …\n"],["reset_session","ActionController::RackDelegation","ActionController/RackDelegation.html#method-i-reset_session","()",""],["reset_session","ActionDispatch::Request","ActionDispatch/Request.html#method-i-reset_session","()","<p>TODO This should be broken apart into AD::Request::Session and probably be\nincluded by the session middleware. …\n"],["resolve","ActionDispatch::RailsEntityStore","ActionDispatch/RailsEntityStore.html#method-c-resolve","(uri)",""],["resolve","ActionDispatch::RailsMetaStore","ActionDispatch/RailsMetaStore.html#method-c-resolve","(uri)",""],["resource","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-resource","(*resources, &block)","<p>Sometimes, you have a resource that clients always look up without\nreferencing an ID. A common example, …\n"],["resource_errors","ActionController::Responder","ActionController/Responder.html#method-i-resource_errors","()",""],["resource_location","ActionController::Responder","ActionController/Responder.html#method-i-resource_location","()","<p>Returns the resource location by retrieving it from the options or\nreturning the resources array.\n"],["resourceful?","ActionController::Responder","ActionController/Responder.html#method-i-resourceful-3F","()","<p>Checks whether the resource responds to the current format or not.\n"],["resources","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-resources","(*resources, &block)","<p>In Rails, a resourceful route provides a mapping between HTTP verbs and\nURLs and controller actions. …\n"],["resources_path_names","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-resources_path_names","(options)",""],["respond","ActionController::Responder","ActionController/Responder.html#method-i-respond","()","<p>Main entry point for responder responsible to dispatch to the proper\nformat.\n"],["respond_to","ActionController::MimeResponds","ActionController/MimeResponds.html#method-i-respond_to","(*mimes, &block)","<p>Without web-service support, an action which collects the data for\ndisplaying a list of people might …\n"],["respond_to","ActionController::MimeResponds::ClassMethods","ActionController/MimeResponds/ClassMethods.html#method-i-respond_to","(*mimes)","<p>Defines mime types that are rendered by default when invoking\n<code>respond_with</code>.\n<p>Examples:\n\n<pre>respond_to :html, ...</pre>\n"],["respond_to?","ActionDispatch::BodyProxy","ActionDispatch/BodyProxy.html#method-i-respond_to-3F","(*args)",""],["respond_to?","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","ActionDispatch::Response","ActionDispatch/Response.html#method-i-respond_to-3F","(method)",""],["respond_with","ActionController::MimeResponds","ActionController/MimeResponds.html#method-i-respond_with","(*resources, &block)","<p>respond_with wraps a resource around a responder for default\nrepresentation. First it invokes respond_to …\n"],["response_body=","ActionController::Metal","ActionController/Metal.html#method-i-response_body-3D","(val)",""],["response_body=","ActionController::RackDelegation","ActionController/RackDelegation.html#method-i-response_body-3D","(body)",""],["response_code","ActionDispatch::Response","ActionDispatch/Response.html#method-i-response_code","()","<p>The response code of the request\n"],["response_from_page","ActionDispatch::Assertions::SelectorAssertions","ActionDispatch/Assertions/SelectorAssertions.html#method-i-response_from_page","()","<p><code>assert_select</code> and <code>css_select</code> call this to obtain\nthe content in the HTML page.\n"],["response_overridden?","ActionController::Responder","ActionController/Responder.html#method-i-response_overridden-3F","()",""],["retrieve_autoindex","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-retrieve_autoindex","(pre_match)",""],["retrieve_object","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-retrieve_object","(object)",""],["root","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-root","(options = {})","<p>You can specify what Rails should route “/” to with the root method:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">root</span> :<span class=\"ruby-identifier\">to</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'pages#main'</span>\n</pre>\n"],["root","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-root","(options={})",""],["run","Sprockets::Bootstrap","Sprockets/Bootstrap.html#method-i-run","()","<p>TODO: Get rid of config.assets.enabled\n"],["safe_concat","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-safe_concat","(string)",""],["safe_join","ActionView::Helpers::OutputSafetyHelper","ActionView/Helpers/OutputSafetyHelper.html#method-i-safe_join","(array, sep=$,)","<p>This method returns a html safe string similar to what\n<code>Array#join</code> would return. All items in the array, …\n"],["sanitize","ActionView::Helpers::SanitizeHelper","ActionView/Helpers/SanitizeHelper.html#method-i-sanitize","(html, options = {})","<p>This <code>sanitize</code> helper will html encode all tags and strip all\nattributes that aren’t specifically allowed. …\n"],["sanitize","HTML::FullSanitizer","HTML/FullSanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize","HTML::Sanitizer","HTML/Sanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize_css","ActionView::Helpers::SanitizeHelper","ActionView/Helpers/SanitizeHelper.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of CSS code. Used by <code>sanitize</code> when it comes\nacross a style attribute.\n"],["sanitize_css","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of css code. Used by #sanitize when it comes across a\nstyle attribute\n"],["sanitize_dom_id","ActionController::RecordIdentifier","ActionController/RecordIdentifier.html#method-i-sanitize_dom_id","(candidate_id)","<p>Replaces characters that are invalid in HTML DOM ids with valid ones.\n"],["sanitizeable?","HTML::LinkSanitizer","HTML/LinkSanitizer.html#method-i-sanitizeable-3F","(text)",""],["sanitizeable?","HTML::Sanitizer","HTML/Sanitizer.html#method-i-sanitizeable-3F","(text)",""],["scope","ActionDispatch::Routing::Mapper::Scoping","ActionDispatch/Routing/Mapper/Scoping.html#method-i-scope","(*args)","<p>Scopes a set of routes to the given default options.\n<p>Take the following route definition as an example: …\n"],["search_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-search_field","(object_name, method, options = {})","<p>Returns an input of type “search” for accessing a specified attribute\n(identified by <code>method</code> …\n"],["search_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-search_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “search”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["secret_token","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-secret_token","(request)",""],["select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-select","(method, choices, options = {}, html_options = {})",""],["select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-select","(object, method, choices, options = {}, html_options = {})","<p>Create a select tag and a series of contained option tags for the provided\nobject and method. The option …\n"],["select","HTML::Selector","HTML/Selector.html#method-i-select","(root)","<p>Selects and returns an array with all matching elements, beginning with one\nnode and traversing through …\n"],["select","HTML::Tag","HTML/Tag.html#method-i-select","(selector, *values)",""],["select_date","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_date","(date = Date.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for year, month, and day)\npre-selected with the <code>date</code>. It’s possible …\n"],["select_datetime","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_datetime","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for year, month, day, hour, minute,\nand second) pre-selected with …\n"],["select_day","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_day","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the days 1 through 31 with\nthe current day selected. The …\n"],["select_first","HTML::Selector","HTML/Selector.html#method-i-select_first","(root)","<p>Similar to #select but returns the first matching element. Returns\n<code>nil</code> if no element matches the selector. …\n"],["select_hour","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_hour","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the hours 0 through 23 with\nthe current hour selected. …\n"],["select_minute","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_minute","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the minutes 0 through 59 with\nthe current minute selected. …\n"],["select_month","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_month","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the months January through\nDecember with the current month …\n"],["select_second","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_second","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the seconds 0 through 59 with\nthe current second selected. …\n"],["select_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-select_tag","(name, option_tags = nil, options = {})","<p>Creates a dropdown selection box, or if the <code>:multiple</code> option\nis set to true, a multiple choice selection …\n"],["select_time","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_time","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for hour and minute). You can set\n<code>:time_separator</code> key to format …\n"],["select_year","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-select_year","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the five years on each side\nof the current, which is selected. …\n"],["selector","HTML","HTML.html#method-c-selector","(statement, *values)","<p>See HTML::Selector.new\n"],["send_action","ActionController::ImplicitRender","ActionController/ImplicitRender.html#method-i-send_action","(method, *args)",""],["send_data","ActionController::DataStreaming","ActionController/DataStreaming.html#method-i-send_data","(data, options = {})","<p>Sends the given binary data to the browser. This method is similar to\n<code>render :text =&gt; data</code>, but also …\n"],["send_data","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-send_data","(data, options = {})",""],["send_data","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-send_data","(event)",""],["send_file","ActionController::DataStreaming","ActionController/DataStreaming.html#method-i-send_file","(path, options = {})","<p>Sends the file. This uses a server-appropriate method (such as X-Sendfile)\nvia the Rack::Sendfile middleware. …\n"],["send_file","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-send_file","(path, options={})",""],["send_file","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-send_file","(event)",""],["server_port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-server_port","()",""],["server_software","ActionDispatch::Request","ActionDispatch/Request.html#method-i-server_software","()","<p>Returns the lowercase name of the HTTP server software.\n"],["session","ActionDispatch::TestProcess","ActionDispatch/TestProcess.html#method-i-session","()",""],["session_options=","ActionDispatch::Request","ActionDispatch/Request.html#method-i-session_options-3D","(options)",""],["set_cookie","ActionDispatch::Response","ActionDispatch/Response.html#method-i-set_cookie","(key, value)",""],["set_session","ActionDispatch::Session::CacheStore","ActionDispatch/Session/CacheStore.html#method-i-set_session","(env, sid, session, options)","<p>Set a session in the cache.\n"],["setup_controller_request_and_response","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-setup_controller_request_and_response","()",""],["setup_subscriptions","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-setup_subscriptions","()",""],["setup_with_controller","ActionView::TestCase::Behavior","ActionView/TestCase/Behavior.html#method-i-setup_with_controller","()",""],["shallow","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow","()",""],["shallow?","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow-3F","()",""],["show_detailed_exceptions?","ActionController::Rescue","ActionController/Rescue.html#method-i-show_detailed_exceptions-3F","()","<p>Override this method if you want to customize when detailed exceptions must\nbe shown. This method is …\n"],["simple_format","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-simple_format","(text, html_options={}, options={})","<p>Returns <code>text</code> transformed into HTML using simple formatting\nrules. Two or more consecutive newlines(<code>\\n\\n</code> …\n"],["simple_selector","HTML::Selector","HTML/Selector.html#method-i-simple_selector","(statement, values, can_negate = true)","<p>Creates a simple selector given the statement and array of substitution\nvalues.\n<p>Returns a hash with the …\n"],["size","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-size","()",""],["skip_after_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-skip_after_filter","","<p>Skip an after filter. See _insert_callbacks for parameter details.\n"],["skip_around_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-skip_around_filter","","<p>Skip an around filter. See _insert_callbacks for parameter details.\n"],["skip_before_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-skip_before_filter","","<p>Skip a before filter. See _insert_callbacks for parameter details.\n"],["skip_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-skip_filter","(*names, &blk)","<p>Skip before, after, and around filters matching any of the names\n<p>Parameters\n<p><code>names</code> - A list of valid names ...\n"],["stale?","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-stale-3F","(record_or_options, additional_options = {})","<p>Sets the etag and/or last_modified on the response and checks it against\nthe client request. If the request …\n"],["stale_session_check!","ActionDispatch::Session::StaleSessionCheck","ActionDispatch/Session/StaleSessionCheck.html#method-i-stale_session_check-21","()",""],["standard_port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-standard_port","()","<p>Returns the standard port number for this request’s protocol.\n"],["standard_port?","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-standard_port-3F","()","<p>Returns whether this request is using the standard port\n"],["start_processing","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-start_processing","(event)",""],["status","ActionController::Metal","ActionController/Metal.html#method-i-status","()",""],["status=","ActionController::Metal","ActionController/Metal.html#method-i-status-3D","(status)",""],["status=","ActionDispatch::Response","ActionDispatch/Response.html#method-i-status-3D","(status)",""],["status_code","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-status_code","()",""],["status_message","ActionDispatch::Response","ActionDispatch/Response.html#method-i-status_message","()",""],["strip_links","ActionView::Helpers::SanitizeHelper","ActionView/Helpers/SanitizeHelper.html#method-i-strip_links","(html)","<p>Strips all link tags from <code>text</code> leaving just the link text.\n<p>Examples\n\n<pre>strip_links('&lt;a href=&quot;http://www.rubyonrails.org&quot;&gt;Ruby ...</pre>\n"],["strip_tags","ActionView::Helpers::SanitizeHelper","ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags","(html)","<p>Strips all HTML tags from the <code>html</code>, including comments. This\nuses the html-scanner tokenizer and so its …\n"],["stylesheet_link_tag","ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers","ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers.html#method-i-stylesheet_link_tag","(*sources)","<p>Returns a stylesheet link tag for the sources specified as arguments. If\nyou don’t specify an extension, …\n"],["stylesheet_link_tag","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-stylesheet_link_tag","(*sources)",""],["stylesheet_path","ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers","ActionView/Helpers/AssetTagHelper/StylesheetTagHelpers.html#method-i-stylesheet_path","(source)","<p>Computes the path to a stylesheet asset in the public stylesheets\ndirectory. If the <code>source</code> filename has …\n"],["stylesheet_path","Sprockets::Helpers::RailsHelper","Sprockets/Helpers/RailsHelper.html#method-i-stylesheet_path","(source)",""],["subdomain","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-subdomain","(tld_length = @@tld_length)","<p>Returns all the subdomains as a string, so <code>&quot;dev.www&quot;</code>\nwould be returned for “dev.www.rubyonrails.org …\n"],["subdomains","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-subdomains","(tld_length = @@tld_length)","<p>Returns all the subdomains as an array, so <code>[&quot;dev&quot;,\n&quot;www&quot;]</code> would be returned for “ …\n"],["submit","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-submit","(value=nil, options={})","<p>Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource …\n"],["submit_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-submit_tag","(value = \"Save changes\", options = {})","<p>Creates a submit button with the text <code>value</code> as the caption.\n<p>Options\n<p><code>:confirm =&gt; 'question?'</code> - If present ...\n"],["supports_streaming?","ActionView::Template","ActionView/Template.html#method-i-supports_streaming-3F","()","<p>Returns if the underlying handler supports streaming. If so, a streaming\nbuffer <strong>may</strong> be passed when it …\n"],["supports_streaming?","ActionView::Template::Handlers::ERB","ActionView/Template/Handlers/ERB.html#method-i-supports_streaming-3F","()",""],["swap","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-swap","(target, *args, &block)",""],["symbolized_path_parameters","ActionDispatch::Http::Parameters","ActionDispatch/Http/Parameters.html#method-i-symbolized_path_parameters","()","<p>The same as <code>path_parameters</code> with explicitly symbolized keys.\n"],["symbols","Mime::Mimes","Mime/Mimes.html#method-i-symbols","()",""],["t","AbstractController::Translation","AbstractController/Translation.html#method-i-t","(*args)",""],["t","ActionView::Helpers::TranslationHelper","ActionView/Helpers/TranslationHelper.html#method-i-t","(key, options = {})",""],["tag","ActionView::Helpers::ActiveModelInstanceTag","ActionView/Helpers/ActiveModelInstanceTag.html#method-i-tag","(type, options, *)",""],["tag","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-tag","(name, options = nil, open = false, escape = true)","<p>Returns an empty HTML tag of type <code>name</code> which by default is\nXHTML compliant. Set <code>open</code> to true to create …\n"],["teardown_subscriptions","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-teardown_subscriptions","()",""],["telephone_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-telephone_field","(object_name, method, options = {})","<p>Returns a text_field of type “tel”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">telephone_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;phone&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_phone&quot; ...</span>\n</pre>\n"],["telephone_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-telephone_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “tel”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["template_exists?","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-template_exists-3F","(name, prefixes = [], partial = false, keys = [], options = {})",""],["tests","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-tests","(controller_class)","<p>Sets the controller class name. Useful if the name can’t be inferred from\ntest class. Normalizes <code>controller_class</code> …\n"],["tests","ActionView::TestCase::Behavior::ClassMethods","ActionView/TestCase/Behavior/ClassMethods.html#method-i-tests","(helper_class)",""],["text_area","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-text_area","(object_name, method, options = {})","<p>Returns a textarea opening and closing tag set tailored for accessing a\nspecified attribute (identified …\n"],["text_area_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-text_area_tag","(name, content = nil, options = {})","<p>Creates a text input area; use a textarea for longer text inputs such as\nblog posts or descriptions. …\n"],["text_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-text_field","(object_name, method, options = {})","<p>Returns an input tag of the “text” type tailored for accessing a specified\nattribute (identified …\n"],["text_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag","(name, value = nil, options = {})","<p>Creates a standard text field; use these text fields to input smaller\nchunks of text like a username …\n"],["time_ago_in_words","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-time_ago_in_words","(from_time, include_seconds = false)","<p>Like <code>distance_of_time_in_words</code>, but where <code>to_time</code>\nis fixed to <code>Time.now</code>.\n<p>Examples\n\n<pre>time_ago_in_words(3.minutes.from_now) ...</pre>\n"],["time_select","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-time_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for hour, minute and optionally second)\npre-selected for accessing …\n"],["time_select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-time_select","(method, options = {}, html_options = {})",""],["time_tag","ActionView::Helpers::DateHelper","ActionView/Helpers/DateHelper.html#method-i-time_tag","(date_or_time, *args)","<p>Returns an html time tag for the given date or time.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">time_tag</span> <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span>  <span class=\"ruby-comment\"># =&gt;</span>\n  <span class=\"ruby-operator\">&lt;</span><span class=\"ruby-identifier\">time</span> <span class=\"ruby-identifier\">datetime</span>=<span class=\"ruby-string\">&quot;2010-11-04&quot;</span><span class=\"ruby-operator\">&gt;</span><span class=\"ruby-constant\">November</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["time_zone_options_for_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select","(selected = nil, priority_zones = nil, model = ::ActiveSupport::TimeZone)","<p>Returns a string of option tags for pretty much any time zone in the world.\nSupply a ActiveSupport::TimeZone …\n"],["time_zone_select","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-time_zone_select","(method, priority_zones = nil, options = {}, html_options = {})",""],["time_zone_select","ActionView::Helpers::FormOptionsHelper","ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_select","(object, method, priority_zones = nil, options = {}, html_options = {})","<p>Return select and option tags for the given object and method, using\n#time_zone_options_for_select to …\n"],["to_a","ActionDispatch::Response","ActionDispatch/Response.html#method-i-to_a","()",""],["to_ary","ActionDispatch::Response","ActionDispatch/Response.html#method-i-to_ary","()",""],["to_boolean_select_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_boolean_select_tag","(options = {})",""],["to_check_box_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_check_box_tag","(options = {}, checked_value = \"1\", unchecked_value = \"0\")",""],["to_cleanup","ActionDispatch::Reloader","ActionDispatch/Reloader.html#method-c-to_cleanup","(*args, &block)","<p>Add a cleanup callback. Cleanup callbacks are run after each request is\ncomplete (after #close is called …\n"],["to_content_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_content_tag","(tag_name, options = {})",""],["to_date_select_tag","ActionView::Helpers::DateHelperInstanceTag","ActionView/Helpers/DateHelperInstanceTag.html#method-i-to_date_select_tag","(options = {}, html_options = {})",""],["to_datetime_select_tag","ActionView::Helpers::DateHelperInstanceTag","ActionView/Helpers/DateHelperInstanceTag.html#method-i-to_datetime_select_tag","(options = {}, html_options = {})",""],["to_format","ActionController::Responder","ActionController/Responder.html#method-i-to_format","()","<p>All other formats follow the procedure below. First we try to render a\ntemplate, if the template is not …\n"],["to_hash","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-to_hash","()",""],["to_html","ActionController::Responder","ActionController/Responder.html#method-i-to_html","()","<p>HTML format does not render the resource, it always attempt to render a\ntemplate.\n"],["to_input_field_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_input_field_tag","(field_type, options = {})",""],["to_js","ActionController::Responder","ActionController/Responder.html#method-i-to_js","()","<p>to_js simply tries to render a template. If no template is found, raises\nthe error.\n"],["to_label_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_label_tag","(text = nil, options = {}, &block)",""],["to_model","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-to_model","()",""],["to_number_field_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_number_field_tag","(field_type, options = {})",""],["to_partial_path","ActionView::Helpers::FormBuilder","ActionView/Helpers/FormBuilder.html#method-i-to_partial_path","()",""],["to_path","ActionDispatch::Response","ActionDispatch/Response.html#method-i-to_path","()",""],["to_path","ActionView::FileSystemResolver","ActionView/FileSystemResolver.html#method-i-to_path","()",""],["to_prepare","ActionDispatch::Reloader","ActionDispatch/Reloader.html#method-c-to_prepare","(*args, &block)","<p>Add a prepare callback. Prepare callbacks are run before each request,\nprior to ActionDispatch::Callback’s …\n"],["to_radio_button_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_radio_button_tag","(tag_value, options = {})",""],["to_s","ActionDispatch::RemoteIp::GetIp","ActionDispatch/RemoteIp/GetIp.html#method-i-to_s","()",""],["to_s","ActionView::FileSystemResolver","ActionView/FileSystemResolver.html#method-i-to_s","()",""],["to_s","ActionView::FixtureResolver","ActionView/FixtureResolver.html#method-i-to_s","()",""],["to_s","Mime::Type","Mime/Type.html#method-i-to_s","()",""],["to_str","Mime::Type","Mime/Type.html#method-i-to_str","()",""],["to_sym","Mime::Type","Mime/Type.html#method-i-to_sym","()",""],["to_text_area_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-to_text_area_tag","(options = {})",""],["to_time_select_tag","ActionView::Helpers::DateHelperInstanceTag","ActionView/Helpers/DateHelperInstanceTag.html#method-i-to_time_select_tag","(options = {}, html_options = {})",""],["token_and_options","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-token_and_options","(request)","<p>Parses the token and options out of the token authorization header. If the\nheader looks like this:\n\n<pre>Authorization: ...</pre>\n"],["tokenize","HTML::Sanitizer","HTML/Sanitizer.html#method-i-tokenize","(text, options)",""],["tokenize","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-tokenize","(text, options)",""],["translate","AbstractController::Translation","AbstractController/Translation.html#method-i-translate","(*args)",""],["translate","ActionView::Helpers::TranslationHelper","ActionView/Helpers/TranslationHelper.html#method-i-translate","(key, options = {})","<p>Delegates to <code>I18n#translate</code> but also performs three additional\nfunctions.\n<p>First, it’ll pass the <code>:rescue_format</code> …\n"],["truncate","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-truncate","(text, options = {})","<p>Truncates a given <code>text</code> after a given <code>:length</code> if\n<code>text</code> is longer than <code>:length</code> (defaults to 30). The\nlast …\n"],["unescape_path","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-i-unescape_path","(path)",""],["unregister","Mime::Type","Mime/Type.html#method-c-unregister","(symbol)","<p>This method is opposite of register method.\n<p>Usage:\n<p>Mime::Type.unregister(:mobile)\n"],["updated","ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder","ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#method-i-updated","(date_or_time = nil)","<p>Accepts a Date or Time object and inserts it in the proper format. If nil\nis passed, current time in …\n"],["url","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-url","()","<p>Returns the complete URL used for this request.\n"],["url_field","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-url_field","(object_name, method, options = {})","<p>Returns a text_field of type “url”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">url_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;homepage&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_homepage&quot; ...</span>\n</pre>\n"],["url_field_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-url_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “url”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["url_for","ActionController::Metal","ActionController/Metal.html#method-i-url_for","(string)","<p>basic url_for that can be overridden for more robust functionality\n"],["url_for","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-c-url_for","(options = {})",""],["url_for","ActionDispatch::Routing::UrlFor","ActionDispatch/Routing/UrlFor.html#method-i-url_for","(options = nil)","<p>Generate a url based on the options provided, default_url_options and the\nroutes defined in routes.rb. …\n"],["url_for","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-url_for","(options = {})","<p>Returns the URL for the set of <code>options</code> provided. This takes\nthe same options as <code>url_for</code> in Action Controller …\n"],["url_options","ActionController::UrlFor","ActionController/UrlFor.html#method-i-url_options","()",""],["url_options","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-url_options","()",""],["url_options","ActionDispatch::Routing::UrlFor","ActionDispatch/Routing/UrlFor.html#method-i-url_options","()",""],["url_options","ActionView::Helpers::UrlHelper","ActionView/Helpers/UrlHelper.html#method-i-url_options","()","<p>Need to map default url options to controller one. def\ndefault_url_options(*args) #:nodoc:\n\n<pre>controller.send(:default_url_options, ...</pre>\n"],["use","ActionController::Metal","ActionController/Metal.html#method-c-use","(*args, &block)","<p>Adds given middleware class and its args to bottom of middleware_stack\n"],["use","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-use","(key = nil, used = true)","<p>Used internally by the <code>keep</code> and <code>discard</code> methods\n\n<pre>use()               # marks the entire flash as used\nuse('msg') ...</pre>\n"],["use","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-use","(*args, &block)",""],["use_accept_header","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-use_accept_header","()",""],["use_renderer","ActionController::Renderers::ClassMethods","ActionController/Renderers/ClassMethods.html#method-i-use_renderer","(*args)",""],["use_renderers","ActionController::Renderers::ClassMethods","ActionController/Renderers/ClassMethods.html#method-i-use_renderers","(*args)",""],["user_agent=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-user_agent-3D","(user_agent)",""],["user_name_and_password","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-user_name_and_password","(request)",""],["utf8_enforcer_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-utf8_enforcer_tag","()","<p>Creates the hidden UTF8 enforcer tag. Override this method in a helper to\ncustomize the tag.\n"],["uuid","ActionDispatch::Request","ActionDispatch/Request.html#method-i-uuid","()","<p>Returns the unique request id, which is based off either the X-Request-Id\nheader that can be generated …\n"],["valid_accept_header","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-valid_accept_header","()",""],["validate_digest_response","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-validate_digest_response","(request, realm, &password_procedure)","<p>Returns false unless the request credentials response value matches the\nexpected value. First try the …\n"],["validate_nonce","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-validate_nonce","(secret_key, request, value, seconds_to_timeout=5*60)","<p>Might want a shorter timeout depending on whether the request is a PUT or\nPOST, and if client is browser …\n"],["value","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-c-value","(object, method_name)",""],["value","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-value","(object)",""],["value_before_type_cast","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-value_before_type_cast","(object)",""],["value_before_type_cast","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-c-value_before_type_cast","(object, method_name)",""],["verified_request?","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-verified_request-3F","()","<p>Returns true or false if a request is verified. Checks:\n<p>is it a GET request?  Gets should be safe and …\n"],["verify_authenticity_token","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-verify_authenticity_token","()","<p>The actual before_filter that is used. Modify this to change how you handle\nunverified requests.\n"],["verify_request?","Mime::Type","Mime/Type.html#method-i-verify_request-3F","()","<p>Returns true if Action Pack should check requests using this Mime Type for\npossible request forgery. …\n"],["video_path","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-video_path","(source)","<p>Computes the path to a video asset in the public videos directory. Full\npaths from the document root …\n"],["video_tag","ActionView::Helpers::AssetTagHelper","ActionView/Helpers/AssetTagHelper.html#method-i-video_tag","(sources, options = {})","<p>Returns an html video tag for the <code>sources</code>. If\n<code>sources</code> is a string, a single video tag will be returned. …\n"],["view_assigns","AbstractController::Rendering","AbstractController/Rendering.html#method-i-view_assigns","()","<p>This method should return a hash with assigns. You can overwrite this\nconfiguration per controller. :api: …\n"],["view_context","AbstractController::Rendering","AbstractController/Rendering.html#method-i-view_context","()","<p>An instance of a view class. The default view class is ActionView::Base\n<p>The view class must have the following …\n"],["view_context_class","AbstractController::Rendering","AbstractController/Rendering.html#method-i-view_context_class","()",""],["view_context_class","AbstractController::Rendering::ClassMethods","AbstractController/Rendering/ClassMethods.html#method-i-view_context_class","()",""],["view_paths","AbstractController::ViewPaths::ClassMethods","AbstractController/ViewPaths/ClassMethods.html#method-i-view_paths","()","<p>A list of all of the default view paths for this controller.\n"],["view_paths=","AbstractController::ViewPaths::ClassMethods","AbstractController/ViewPaths/ClassMethods.html#method-i-view_paths-3D","(paths)","<p>Set the view paths.\n<p>Parameters\n<p><code>paths</code> - If a PathSet is provided, use that; otherwise, process\nthe parameter ...\n"],["view_paths=","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-view_paths-3D","(paths)","<p>Whenever setting view paths, makes a copy so we can manipulate then in\ninstance objects as we wish.\n"],["view_renderer","AbstractController::Rendering","AbstractController/Rendering.html#method-i-view_renderer","()","<p>Returns an object that is able to render templates.\n"],["visible_action?","ActionController::HideActions::ClassMethods","ActionController/HideActions/ClassMethods.html#method-i-visible_action-3F","(action_name)",""],["with","AbstractController::Railties::RoutesHelpers","AbstractController/Railties/RoutesHelpers.html#method-c-with","(routes)",""],["with","ActionController::Railties::Paths","ActionController/Railties/Paths.html#method-c-with","(app)",""],["with_default_scope","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-with_default_scope","(scope, &block)",""],["with_exclusive_scope","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-with_exclusive_scope","()",""],["with_fallbacks","ActionView::LookupContext::ViewPaths","ActionView/LookupContext/ViewPaths.html#method-i-with_fallbacks","()","<p>Add fallbacks to the view paths. Useful in cases you are rendering a :file.\n"],["with_routing","ActionDispatch::Assertions::RoutingAssertions","ActionDispatch/Assertions/RoutingAssertions.html#method-i-with_routing","()","<p>A helper to make it easier to test different route configurations. This\nmethod temporarily replaces @routes …\n"],["with_scope_level","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-with_scope_level","(kind, resource = parent_resource)",""],["without_modules","ActionController::Base","ActionController/Base.html#method-c-without_modules","(*modules)",""],["word_wrap","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-word_wrap","(text, *args)","<p>Wraps the <code>text</code> into lines no longer than\n<code>line_width</code> width. This method breaks on the first whitespace …\n"],["wrap_parameters","ActionController::ParamsWrapper::ClassMethods","ActionController/ParamsWrapper/ClassMethods.html#method-i-wrap_parameters","(name_or_model_or_options, options = {})","<p>Sets the name of the wrapper key, or the model which\n<code>ParamsWrapper</code> would use to determine the attribute …\n"],["write","ActionDispatch::RailsEntityStore","ActionDispatch/RailsEntityStore.html#method-i-write","(body)",""],["write","ActionDispatch::RailsMetaStore","ActionDispatch/RailsMetaStore.html#method-i-write","(key, value)",""],["write_asset","Sprockets::StaticCompiler","Sprockets/StaticCompiler.html#method-i-write_asset","(asset)",""],["write_fragment","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-write_fragment","(key, content, options = nil)","<p>Writes <code>content</code> to the location signified by  <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats).\n"],["write_manifest","Sprockets::StaticCompiler","Sprockets/StaticCompiler.html#method-i-write_manifest","(manifest)",""],["xhr","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-xhr","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xhr","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-xhr","(request_method, path, parameters = nil, headers = nil)",""],["xhr?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-xhr-3F","()",""],["xml_http_request","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-xml_http_request","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xml_http_request","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-xml_http_request","(request_method, path, parameters = nil, headers = nil)","<p>Performs an XMLHttpRequest request with the given parameters, mirroring a\nrequest from the Prototype …\n"],["xml_http_request?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-xml_http_request-3F","()","<p>Returns true if the “X-Requested-With” header contains “XMLHttpRequest”\n(case-insensitive). …\n"]]}}