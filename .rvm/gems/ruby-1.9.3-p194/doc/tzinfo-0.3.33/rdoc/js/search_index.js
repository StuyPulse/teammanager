var search_data = {"index":{"searchIndex":["tzinfo","ambiguoustime","country","countrytimezone","invalidcountrycode","invalidtimezoneidentifier","nooffsetsdefined","periodnotfound","tzdataparser","timezone","timezoneperiod","timezoneproxy","unknowntimezone","<=>()","<=>()","==()","==()","_dump()","_dump()","_dump()","_load()","_load()","_load()","abbreviation()","all()","all()","all_codes()","all_country_zone_identifiers()","all_country_zones()","all_data_zone_identifiers()","all_data_zones()","all_identifiers()","all_linked_zone_identifiers()","all_linked_zones()","code()","current_period()","current_period_and_time()","current_time_and_period()","default_dst()","default_dst=()","description_or_friendly_identifier()","dst?()","eql?()","eql?()","eql?()","eql?()","execute()","friendly_identifier()","get()","get()","get_proxy()","hash()","hash()","hash()","hash()","identifier()","identifier()","inspect()","inspect()","inspect()","inspect()","latitude()","local_after_start?()","local_before_end?()","local_end()","local_start()","local_to_utc()","longitude()","name()","name()","new()","new()","new()","new()","new()","now()","parse_month()","parse_offset()","period_for_local()","period_for_utc()","period_for_utc()","periods_for_local()","periods_for_local()","quote_str()","std_offset()","strftime()","timezone()","to_local()","to_s()","to_s()","to_utc()","us_zone_identifiers()","us_zones()","utc_after_start?()","utc_before_end?()","utc_end()","utc_offset()","utc_start()","utc_to_local()","utc_total_offset()","utc_total_offset_rational()","valid_for_local?()","valid_for_utc?()","zone_identifier()","zone_identifiers()","zone_info()","zone_names()","zones()","changes","readme"],"longSearchIndex":["tzinfo","tzinfo::ambiguoustime","tzinfo::country","tzinfo::countrytimezone","tzinfo::invalidcountrycode","tzinfo::invalidtimezoneidentifier","tzinfo::nooffsetsdefined","tzinfo::periodnotfound","tzinfo::tzdataparser","tzinfo::timezone","tzinfo::timezoneperiod","tzinfo::timezoneproxy","tzinfo::unknowntimezone","tzinfo::country#<=>()","tzinfo::timezone#<=>()","tzinfo::countrytimezone#==()","tzinfo::timezoneperiod#==()","tzinfo::country#_dump()","tzinfo::timezone#_dump()","tzinfo::timezoneproxy#_dump()","tzinfo::country::_load()","tzinfo::timezone::_load()","tzinfo::timezoneproxy::_load()","tzinfo::timezoneperiod#abbreviation()","tzinfo::country::all()","tzinfo::timezone::all()","tzinfo::country::all_codes()","tzinfo::timezone::all_country_zone_identifiers()","tzinfo::timezone::all_country_zones()","tzinfo::timezone::all_data_zone_identifiers()","tzinfo::timezone::all_data_zones()","tzinfo::timezone::all_identifiers()","tzinfo::timezone::all_linked_zone_identifiers()","tzinfo::timezone::all_linked_zones()","tzinfo::country#code()","tzinfo::timezone#current_period()","tzinfo::timezone#current_period_and_time()","tzinfo::timezone#current_time_and_period()","tzinfo::timezone::default_dst()","tzinfo::timezone::default_dst=()","tzinfo::countrytimezone#description_or_friendly_identifier()","tzinfo::timezoneperiod#dst?()","tzinfo::country#eql?()","tzinfo::countrytimezone#eql?()","tzinfo::timezone#eql?()","tzinfo::timezoneperiod#eql?()","tzinfo::tzdataparser#execute()","tzinfo::timezone#friendly_identifier()","tzinfo::country::get()","tzinfo::timezone::get()","tzinfo::timezone::get_proxy()","tzinfo::country#hash()","tzinfo::countrytimezone#hash()","tzinfo::timezone#hash()","tzinfo::timezoneperiod#hash()","tzinfo::timezone#identifier()","tzinfo::timezoneproxy#identifier()","tzinfo::country#inspect()","tzinfo::countrytimezone#inspect()","tzinfo::timezone#inspect()","tzinfo::timezoneperiod#inspect()","tzinfo::countrytimezone#latitude()","tzinfo::timezoneperiod#local_after_start?()","tzinfo::timezoneperiod#local_before_end?()","tzinfo::timezoneperiod#local_end()","tzinfo::timezoneperiod#local_start()","tzinfo::timezone#local_to_utc()","tzinfo::countrytimezone#longitude()","tzinfo::country#name()","tzinfo::timezone#name()","tzinfo::country::new()","tzinfo::tzdataparser::new()","tzinfo::timezone::new()","tzinfo::timezoneperiod::new()","tzinfo::timezoneproxy::new()","tzinfo::timezone#now()","tzinfo::tzdataparser::parse_month()","tzinfo::tzdataparser::parse_offset()","tzinfo::timezone#period_for_local()","tzinfo::timezone#period_for_utc()","tzinfo::timezoneproxy#period_for_utc()","tzinfo::timezone#periods_for_local()","tzinfo::timezoneproxy#periods_for_local()","tzinfo::tzdataparser::quote_str()","tzinfo::timezoneperiod#std_offset()","tzinfo::timezone#strftime()","tzinfo::countrytimezone#timezone()","tzinfo::timezoneperiod#to_local()","tzinfo::country#to_s()","tzinfo::timezone#to_s()","tzinfo::timezoneperiod#to_utc()","tzinfo::timezone::us_zone_identifiers()","tzinfo::timezone::us_zones()","tzinfo::timezoneperiod#utc_after_start?()","tzinfo::timezoneperiod#utc_before_end?()","tzinfo::timezoneperiod#utc_end()","tzinfo::timezoneperiod#utc_offset()","tzinfo::timezoneperiod#utc_start()","tzinfo::timezone#utc_to_local()","tzinfo::timezoneperiod#utc_total_offset()","tzinfo::timezoneperiod#utc_total_offset_rational()","tzinfo::timezoneperiod#valid_for_local?()","tzinfo::timezoneperiod#valid_for_utc?()","tzinfo::timezoneperiod#zone_identifier()","tzinfo::country#zone_identifiers()","tzinfo::country#zone_info()","tzinfo::country#zone_names()","tzinfo::country#zones()","",""],"info":[["TZInfo","","TZInfo.html","",""],["TZInfo::AmbiguousTime","","TZInfo/AmbiguousTime.html","","<p>Indicate a specified time in a local timezone has more than one possible\ntime in UTC. This happens when …\n"],["TZInfo::Country","","TZInfo/Country.html","","<p>An ISO 3166 country. Can be used to get a list of Timezones for a country.\nFor example:\n\n<pre>us = Country.get('US') ...</pre>\n"],["TZInfo::CountryTimezone","","TZInfo/CountryTimezone.html","","<p>A Timezone within a Country. This contains extra information about the\nTimezone that is specific to the …\n"],["TZInfo::InvalidCountryCode","","TZInfo/InvalidCountryCode.html","","<p>Thrown by Country#get if the code given is not valid.\n"],["TZInfo::InvalidTimezoneIdentifier","","TZInfo/InvalidTimezoneIdentifier.html","","<p>Thrown by Timezone#get if the identifier given is not valid.\n"],["TZInfo::NoOffsetsDefined","","TZInfo/NoOffsetsDefined.html","","<p>Thrown if no offsets have been defined when calling period_for_utc or\nperiods_for_local. Indicates an …\n"],["TZInfo::PeriodNotFound","","TZInfo/PeriodNotFound.html","","<p>Thrown to indicate that no TimezonePeriod matching a given time could be\nfound.\n"],["TZInfo::TZDataParser","","TZInfo/TZDataParser.html","","<p>Parses tzdata from elsie.nci.nih.gov/pub/ and transforms it into  a set of\nRuby modules that can be used …\n"],["TZInfo::Timezone","","TZInfo/Timezone.html","","<p>Timezone is the base class of all timezones. It provides a factory method\nget to access timezones by …\n"],["TZInfo::TimezonePeriod","","TZInfo/TimezonePeriod.html","","<p>A period of time in a timezone where the same offset from UTC applies.\n<p>All the methods that take times …\n"],["TZInfo::TimezoneProxy","","TZInfo/TimezoneProxy.html","","<p>A proxy class representing a timezone with a given identifier.\nTimezoneProxy inherits from Timezone and …\n"],["TZInfo::UnknownTimezone","","TZInfo/UnknownTimezone.html","","<p>Thrown if an attempt is made to use a timezone created with\nTimezone.new(nil).\n"],["<=>","TZInfo::Country","TZInfo/Country.html#method-i-3C-3D-3E","(c)","<p>Compare two Countries based on their code. Returns -1 if c is less than\nself, 0 if c is equal to self …\n"],["<=>","TZInfo::Timezone","TZInfo/Timezone.html#method-i-3C-3D-3E","(tz)","<p>Compares two Timezones based on their identifier. Returns -1 if tz is less\nthan self, 0 if tz is equal …\n"],["==","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-3D-3D","(ct)","<p>Returns true if and only if the given CountryTimezone is equal to the\ncurrent CountryTimezone (has the …\n"],["==","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-3D-3D","(p)","<p>Returns true if this TimezonePeriod is equal to p. This compares the \nstart_transition, end_transition …\n"],["_dump","TZInfo::Country","TZInfo/Country.html#method-i-_dump","(limit)","<p>Dumps this Country for marshalling.\n"],["_dump","TZInfo::Timezone","TZInfo/Timezone.html#method-i-_dump","(limit)","<p>Dumps this Timezone for marshalling.\n"],["_dump","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-_dump","(limit)","<p>Dumps this TimezoneProxy for marshalling.\n"],["_load","TZInfo::Country","TZInfo/Country.html#method-c-_load","(data)","<p>Loads a marshalled Country.\n"],["_load","TZInfo::Timezone","TZInfo/Timezone.html#method-c-_load","(data)","<p>Loads a marshalled Timezone.\n"],["_load","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-c-_load","(data)","<p>Loads a marshalled TimezoneProxy.\n"],["abbreviation","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-abbreviation","()","<p>The identifier of this period, e.g. “GMT” (Greenwich Mean Time) or “BST”\n(British …\n"],["all","TZInfo::Country","TZInfo/Country.html#method-c-all","()","<p>Returns an Array of all the defined Countries.\n"],["all","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all","()","<p>Returns an array containing all the available Timezones.\n<p>Returns TimezoneProxy objects to avoid the overhead …\n"],["all_codes","TZInfo::Country","TZInfo/Country.html#method-c-all_codes","()","<p>Returns an Array of all the valid country codes.\n"],["all_country_zone_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_country_zone_identifiers","()","<p>Returns all the zone identifiers defined for all Countries. This is not the\ncomplete set of zone identifiers …\n"],["all_country_zones","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_country_zones","()","<p>Returns all the Timezones defined for all Countries. This is not the\ncomplete set of Timezones as some …\n"],["all_data_zone_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_data_zone_identifiers","()","<p>Returns an array containing the identifiers of all the available  Timezones\nthat are based on data (are …\n"],["all_data_zones","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_data_zones","()","<p>Returns an array containing all the available Timezones that are based on\ndata (are not links to other …\n"],["all_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_identifiers","()","<p>Returns an array containing the identifiers of all the available \nTimezones.\n"],["all_linked_zone_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_linked_zone_identifiers","()","<p>Returns an array containing the identifiers of all the available  Timezones\nthat are links to other  …\n"],["all_linked_zones","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_linked_zones","()","<p>Returns an array containing all the available Timezones that are links to\nother Timezones.\n<p>Returns TimezoneProxy …\n"],["code","TZInfo::Country","TZInfo/Country.html#method-i-code","()","<p>The ISO 3166 country code.\n"],["current_period","TZInfo::Timezone","TZInfo/Timezone.html#method-i-current_period","()","<p>Returns the TimezonePeriod for the current time.\n"],["current_period_and_time","TZInfo::Timezone","TZInfo/Timezone.html#method-i-current_period_and_time","()","<p>Returns the current Time and TimezonePeriod as an array. The first element\nis the time, the second element …\n"],["current_time_and_period","TZInfo::Timezone","TZInfo/Timezone.html#method-i-current_time_and_period","()",""],["default_dst","TZInfo::Timezone","TZInfo/Timezone.html#method-c-default_dst","()","<p>Gets the default value of the optional dst parameter of the  local_to_utc\nand period_for_local methods. …\n"],["default_dst=","TZInfo::Timezone","TZInfo/Timezone.html#method-c-default_dst-3D","(value)","<p>Sets the default value of the optional dst parameter of the  local_to_utc\nand period_for_local methods. …\n"],["description_or_friendly_identifier","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-description_or_friendly_identifier","()","<p>if description is not nil, this method returns description; otherwise it\nreturns timezone.friendly_identifier …\n"],["dst?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-dst-3F","()","<p>true if daylight savings is in effect for this period; otherwise false.\n"],["eql?","TZInfo::Country","TZInfo/Country.html#method-i-eql-3F","(c)","<p>Returns true if and only if the code of c is equal to the code of this\nCountry.\n"],["eql?","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-eql-3F","(ct)","<p>Returns true if and only if the given CountryTimezone is equal to the\ncurrent CountryTimezone (has the …\n"],["eql?","TZInfo::Timezone","TZInfo/Timezone.html#method-i-eql-3F","(tz)","<p>Returns true if and only if the identifier of tz is equal to the \nidentifier of this Timezone.\n"],["eql?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-eql-3F","(p)","<p>Returns true if this TimezonePeriods is equal to p. This compares the\nstart_transition, end_transition …\n"],["execute","TZInfo::TZDataParser","TZInfo/TZDataParser.html#method-i-execute","()","<p>Reads the tzdata source and generates the classes. Takes a long time to\nrun. Currently outputs debugging …\n"],["friendly_identifier","TZInfo::Timezone","TZInfo/Timezone.html#method-i-friendly_identifier","(skip_first_part = false)","<p>Returns a friendlier version of the identifier. Set skip_first_part to \nomit the first part of the identifier …\n"],["get","TZInfo::Country","TZInfo/Country.html#method-c-get","(identifier)","<p>Gets a Country by its ISO 3166 code. Raises an InvalidCountryCode \nexception if it couldn’t be found. …\n"],["get","TZInfo::Timezone","TZInfo/Timezone.html#method-c-get","(identifier)","<p>Returns a timezone by its identifier (e.g. “Europe/London”, \n“America/Chicago” or …\n"],["get_proxy","TZInfo::Timezone","TZInfo/Timezone.html#method-c-get_proxy","(identifier)","<p>Returns a proxy for the Timezone with the given identifier. The proxy will\ncause the real timezone to …\n"],["hash","TZInfo::Country","TZInfo/Country.html#method-i-hash","()","<p>Returns a hash value for this Country.\n"],["hash","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-hash","()","<p>Returns a hash of this CountryTimezone.\n"],["hash","TZInfo::Timezone","TZInfo/Timezone.html#method-i-hash","()","<p>Returns a hash of this Timezone.\n"],["hash","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-hash","()","<p>Returns a hash of this TimezonePeriod.\n"],["identifier","TZInfo::Timezone","TZInfo/Timezone.html#method-i-identifier","()","<p>The identifier of the timezone, e.g. “Europe/Paris”.\n"],["identifier","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-identifier","()","<p>The identifier of the timezone, e.g. “Europe/Paris”.\n"],["inspect","TZInfo::Country","TZInfo/Country.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::Timezone","TZInfo/Timezone.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["latitude","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-latitude","()","<p>The latitude of this timezone in degrees as a Rational.\n"],["local_after_start?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-local_after_start-3F","(local)","<p>true if the given local DateTime is after the start of the period \n(inclusive); otherwise false.\n"],["local_before_end?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-local_before_end-3F","(local)","<p>true if the given local DateTime is before the end of the period \n(exclusive); otherwise false.\n"],["local_end","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-local_end","()","<p>The end time of the period in local time as a DateTime. May be nil if \nunbounded.\n"],["local_start","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-local_start","()","<p>The start time of the period in local time as a DateTime. May be nil if \nunbounded.\n"],["local_to_utc","TZInfo::Timezone","TZInfo/Timezone.html#method-i-local_to_utc","(local, dst = Timezone.default_dst)","<p>Converts a time in the local timezone to UTC. local can either be a\nDateTime, Time or timestamp (Time.to_i …\n"],["longitude","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-longitude","()","<p>The longitude of this timezone in degrees as a Rational.\n"],["name","TZInfo::Country","TZInfo/Country.html#method-i-name","()","<p>The name of the country.\n"],["name","TZInfo::Timezone","TZInfo/Timezone.html#method-i-name","()","<p>An alias for identifier.\n"],["new","TZInfo::Country","TZInfo/Country.html#method-c-new","(identifier)","<p>If identifier is a CountryInfo object, initializes the Country instance, \notherwise calls get(identifier). …\n"],["new","TZInfo::TZDataParser","TZInfo/TZDataParser.html#method-c-new","(input_dir, output_dir)","<p>Initializes a new TZDataParser. input_dir must contain the extracted tzdata\ntarball. output_dir is the …\n"],["new","TZInfo::Timezone","TZInfo/Timezone.html#method-c-new","(identifier = nil)","<p>If identifier is nil calls super(), otherwise calls get. An identfier \nshould always be passed in when …\n"],["new","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-c-new","(start_transition, end_transition, offset = nil)","<p>Initializes a new TimezonePeriod.\n"],["new","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-c-new","(identifier)","<p>Construct a new TimezoneProxy for the given identifier. The identifier is\nnot checked when constructing …\n"],["now","TZInfo::Timezone","TZInfo/Timezone.html#method-i-now","()","<p>Returns the current time in the timezone as a Time.\n"],["parse_month","TZInfo::TZDataParser","TZInfo/TZDataParser.html#method-c-parse_month","(month)","<p>Parses a month specified in the tz data and converts it to a number between\n1 and 12 representing January …\n"],["parse_offset","TZInfo::TZDataParser","TZInfo/TZDataParser.html#method-c-parse_offset","(offset)","<p>Parses an offset string [-]h:m:s (minutes and seconds are optional).\nReturns the offset in seconds.\n"],["period_for_local","TZInfo::Timezone","TZInfo/Timezone.html#method-i-period_for_local","(local, dst = Timezone.default_dst)","<p>Returns the TimezonePeriod for the given local time. local can either be a\nDateTime, Time or integer …\n"],["period_for_utc","TZInfo::Timezone","TZInfo/Timezone.html#method-i-period_for_utc","(utc)","<p>Returns the TimezonePeriod for the given UTC time. utc can either be a\nDateTime, Time or integer timestamp …\n"],["period_for_utc","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-period_for_utc","(utc)","<p>Returns the TimezonePeriod for the given UTC time. utc can either be a\nDateTime, Time or integer timestamp …\n"],["periods_for_local","TZInfo::Timezone","TZInfo/Timezone.html#method-i-periods_for_local","(local)","<p>Returns the set of TimezonePeriod instances that are valid for the given\nlocal time as an array. If you …\n"],["periods_for_local","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-periods_for_local","(local)","<p>Returns the set of TimezonePeriod instances that are valid for the given\nlocal time as an array. If you …\n"],["quote_str","TZInfo::TZDataParser","TZInfo/TZDataParser.html#method-c-quote_str","(str)","<p>Encloses the string in single quotes and escapes any single quotes in the\ncontent.\n"],["std_offset","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-std_offset","()","<p>Offset from the local time where daylight savings is in effect (seconds).\nE.g.: utc_offset could be -5 …\n"],["strftime","TZInfo::Timezone","TZInfo/Timezone.html#method-i-strftime","(format, utc = Time.now.utc)","<p>Converts a time in UTC to local time and returns it as a string  according\nto the given format. The formatting …\n"],["timezone","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-timezone","()","<p>The Timezone (actually a TimezoneProxy for performance reasons).\n"],["to_local","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-to_local","(utc)","<p>Converts a UTC DateTime to local time based on the offset of this period.\n"],["to_s","TZInfo::Country","TZInfo/Country.html#method-i-to_s","()","<p>Alias for name.\n"],["to_s","TZInfo::Timezone","TZInfo/Timezone.html#method-i-to_s","()","<p>Returns a friendlier version of the identifier.\n"],["to_utc","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-to_utc","(local)","<p>Converts a local DateTime to UTC based on the offset of this period.\n"],["us_zone_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-us_zone_identifiers","()","<p>Returns all US zone identifiers. A shortcut for \nTZInfo::Country.get(‘US’).zone_identifiers.\n"],["us_zones","TZInfo::Timezone","TZInfo/Timezone.html#method-c-us_zones","()","<p>Returns all US Timezone instances. A shortcut for \nTZInfo::Country.get(‘US’).zones.\n<p>Returns TimezoneProxy …\n"],["utc_after_start?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_after_start-3F","(utc)","<p>true if the given UTC DateTime is after the start of the period \n(inclusive); otherwise false.\n"],["utc_before_end?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_before_end-3F","(utc)","<p>true if the given UTC DateTime is before the end of the period \n(exclusive); otherwise false.\n"],["utc_end","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_end","()","<p>The end time of the period in UTC as a DateTime. May be nil if unbounded.\n"],["utc_offset","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_offset","()","<p>Base offset of the timezone from UTC (seconds).\n"],["utc_start","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_start","()","<p>The start time of the period in UTC as a DateTime. May be nil if unbounded.\n"],["utc_to_local","TZInfo::Timezone","TZInfo/Timezone.html#method-i-utc_to_local","(utc)","<p>Converts a time in UTC to the local timezone. utc can either be a DateTime,\nTime or timestamp (Time.to_i …\n"],["utc_total_offset","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_total_offset","()","<p>Total offset from UTC (seconds). Equal to utc_offset + std_offset.\n"],["utc_total_offset_rational","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_total_offset_rational","()","<p>Total offset from UTC (days). Result is a Rational.\n"],["valid_for_local?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-valid_for_local-3F","(local)","<p>true if this period is valid for the given local DateTime; otherwise false.\n"],["valid_for_utc?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-valid_for_utc-3F","(utc)","<p>true if this period is valid for the given UTC DateTime; otherwise false.\n"],["zone_identifier","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-zone_identifier","()",""],["zone_identifiers","TZInfo::Country","TZInfo/Country.html#method-i-zone_identifiers","()","<p>Returns a frozen array of all the zone identifiers for the country. These\nare in an order that\n\n<pre>(1) makes ...</pre>\n"],["zone_info","TZInfo::Country","TZInfo/Country.html#method-i-zone_info","()","<p>Returns a frozen array of all the timezones for the for the country as\nCountryTimezone instances (containing …\n"],["zone_names","TZInfo::Country","TZInfo/Country.html#method-i-zone_names","()",""],["zones","TZInfo::Country","TZInfo/Country.html#method-i-zones","()","<p>An array of all the Timezones for this country. Returns TimezoneProxy\nobjects to avoid the overhead of …\n"],["CHANGES","","CHANGES.html","","<p>Version 0.3.33 (tzdata v2012c) - 8-Apr-2012\n<p>Updated to tzdata version 2012c (article.gmane.org/gmane.comp.time.tz/4859\n…\n\n"],["README","","README.html","","<p>TZInfo – Daylight-savings aware timezone support for Ruby\n<p>TZInfo uses the tz database  (www.twinsun.com/tz/tz-link.htm …\n"]]}}