var search_data = {"index":{"searchIndex":["fcgi","stream","rack","auth","abstracthandler","abstractrequest","basic","request","digest","md5","nonce","params","request","bodyproxy","builder","cascade","chunked","body","commonlogger","conditionalget","config","contentlength","contenttype","deflater","deflatestream","gzipstream","directory","etag","file","forwardrequest","handler","cgi","eventedmongrel","fastcgi","lsws","mongrel","scgi","swiftipliedmongrel","thin","webrick","head","lint","assertion","errorwrapper","inputwrapper","linterror","lobster","lock","logger","methodoverride","mime","mockrequest","fatalwarner","fatalwarning","mockresponse","multipart","generator","parser","uploadedfile","nulllogger","recursive","reloader","stat","request","response","helpers","rewindableinput","tempfile","runtime","sendfile","server","options","session","abstract","id","sessionhash","cookie","base64","marshal","identity","reverse","memcache","pool","showexceptions","showstatus","static","urlmap","utils","context","headerhash","keyspaceconstrainedparams","uri","<<()","=~()","get()","post()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","_call()","_call()","_call()","_close()","_rack_read_without_buffer()","accept_encoding()","add()","app()","app()","bad_request?()","base_url()","basic?()","body()","body()","build_multipart()","build_nested_query()","build_query()","byte_ranges()","bytesize()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","can_serve()","check_forbidden()","clear()","client_error?()","close()","close()","close()","close()","closed?()","content_charset()","content_length()","content_length()","content_type()","content_type()","context()","context()","cookies()","correct_uri?()","credentials()","debug()","decode()","decode()","decode()","decode()","default()","default_options()","delete()","delete()","delete()","delete?()","delete_cookie()","delete_cookie_header!()","dequote()","destroy_session()","destroy_session()","digest()","digest?()","dump()","dump_exception()","each()","each()","each()","each()","each()","each()","each()","each()","empty?()","empty?()","empty?()","encode()","encode()","encode()","encode()","entity_not_found()","env_for()","error()","escape()","escape_html()","escape_path()","exists?()","fatal()","figure_path()","filesize_format()","finish()","flush()","forbidden?()","form_data?()","fresh?()","fullpath()","generate_sid()","generate_sid()","get()","get()","get?()","get_session()","get_session()","gets()","handler_opts()","has_key?()","has_key?()","head()","head?()","host()","host_with_port()","include()","include?()","include?()","include?()","include?()","info()","informational?()","inspect()","invalid?()","ip()","key?()","key?()","key?()","list_directory()","list_path()","loaded?()","local_path()","location()","logger()","logging_middleware()","map()","match()","media_type()","media_type_params()","member?()","merge()","merge!()","method()","method_missing()","method_missing()","method_not_allowed?()","method_override()","middleware()","middleware()","mime_type()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nonce()","normalize_params()","not_found?()","ok?()","options()","options?()","overwrite_file_path()","params()","params()","params()","params_hash_type?()","parse()","parse()","parse()","parse!()","parse_file()","parse_multipart()","parse_multipart()","parse_nested_query()","parse_query()","parse_query()","parseable_data?()","parts()","passwords_hashed?()","patch?()","path()","path()","path_info()","path_info=()","port()","post()","post?()","prefers_plain_text?()","pretty()","process()","process_request()","provided?()","put()","put?()","puts()","query_string()","quote()","read()","read()","recontext()","redirect()","redirect?()","redirection?()","referer()","referrer()","register()","release()","reload!()","remap()","replace()","request()","request()","request_method()","respond_to?()","respond_to?()","respond_to?()","rewind()","rfc2822()","rotation()","route_file()","run()","run()","run()","run()","run()","run()","run()","run()","safe_load()","safe_stat()","scheme()","scheme()","script_name()","script_name=()","select_best_encoding()","send_body()","send_body()","send_body()","send_headers()","send_headers()","send_headers()","serve()","serve()","serve()","server()","server_error?()","service()","serving()","session()","session_options()","set_cookie()","set_cookie_header!()","set_session()","set_session()","shutdown()","split_header_value()","ssl?()","stale?()","start()","start()","stat()","status_code()","string()","successful?()","to_a()","to_app()","to_ary()","to_hash()","to_hash()","to_params_hash()","to_s()","to_s()","trace?()","trusted_proxy?()","try_require()","unescape()","unprocessable?()","update()","url()","use()","user_agent()","username()","valid?()","valid_options()","valid_options()","valid_options()","valid_options()","valid_options()","values_at()","version()","warn()","with_lock()","with_lock()","write()","write()","write()","xhr?()","known-issues","readme"],"longSearchIndex":["fcgi","fcgi::stream","rack","rack::auth","rack::auth::abstracthandler","rack::auth::abstractrequest","rack::auth::basic","rack::auth::basic::request","rack::auth::digest","rack::auth::digest::md5","rack::auth::digest::nonce","rack::auth::digest::params","rack::auth::digest::request","rack::bodyproxy","rack::builder","rack::cascade","rack::chunked","rack::chunked::body","rack::commonlogger","rack::conditionalget","rack::config","rack::contentlength","rack::contenttype","rack::deflater","rack::deflater::deflatestream","rack::deflater::gzipstream","rack::directory","rack::etag","rack::file","rack::forwardrequest","rack::handler","rack::handler::cgi","rack::handler::eventedmongrel","rack::handler::fastcgi","rack::handler::lsws","rack::handler::mongrel","rack::handler::scgi","rack::handler::swiftipliedmongrel","rack::handler::thin","rack::handler::webrick","rack::head","rack::lint","rack::lint::assertion","rack::lint::errorwrapper","rack::lint::inputwrapper","rack::lint::linterror","rack::lobster","rack::lock","rack::logger","rack::methodoverride","rack::mime","rack::mockrequest","rack::mockrequest::fatalwarner","rack::mockrequest::fatalwarning","rack::mockresponse","rack::multipart","rack::multipart::generator","rack::multipart::parser","rack::multipart::uploadedfile","rack::nulllogger","rack::recursive","rack::reloader","rack::reloader::stat","rack::request","rack::response","rack::response::helpers","rack::rewindableinput","rack::rewindableinput::tempfile","rack::runtime","rack::sendfile","rack::server","rack::server::options","rack::session","rack::session::abstract","rack::session::abstract::id","rack::session::abstract::sessionhash","rack::session::cookie","rack::session::cookie::base64","rack::session::cookie::base64::marshal","rack::session::cookie::identity","rack::session::cookie::reverse","rack::session::memcache","rack::session::pool","rack::showexceptions","rack::showstatus","rack::static","rack::urlmap","rack::utils","rack::utils::context","rack::utils::headerhash","rack::utils::keyspaceconstrainedparams","uri","rack::cascade#<<()","rack::mockresponse#=~()","rack::request#get()","rack::request#post()","rack::auth::digest::params#[]()","rack::request#[]()","rack::response#[]()","rack::session::abstract::sessionhash#[]()","rack::utils::headerhash#[]()","rack::utils::keyspaceconstrainedparams#[]()","rack::auth::digest::params#[]=()","rack::request#[]=()","rack::response#[]=()","rack::session::abstract::sessionhash#[]=()","rack::utils::headerhash#[]=()","rack::utils::keyspaceconstrainedparams#[]=()","rack::directory#_call()","rack::file#_call()","rack::recursive#_call()","rack::rewindableinput::tempfile#_close()","fcgi::stream#_rack_read_without_buffer()","rack::request#accept_encoding()","rack::cascade#add()","rack::builder::app()","rack::server#app()","rack::response::helpers#bad_request?()","rack::request#base_url()","rack::auth::basic::request#basic?()","rack::mockresponse#body()","rack::request#body()","rack::multipart::build_multipart()","rack::utils::build_nested_query()","rack::utils::build_query()","rack::utils::byte_ranges()","rack::utils::bytesize()","rack::auth::basic#call()","rack::auth::digest::md5#call()","rack::builder#call()","rack::cascade#call()","rack::chunked#call()","rack::commonlogger#call()","rack::conditionalget#call()","rack::config#call()","rack::contentlength#call()","rack::contenttype#call()","rack::deflater#call()","rack::directory#call()","rack::etag#call()","rack::file#call()","rack::head#call()","rack::lobster#call()","rack::lock#call()","rack::logger#call()","rack::methodoverride#call()","rack::nulllogger#call()","rack::recursive#call()","rack::reloader#call()","rack::runtime#call()","rack::sendfile#call()","rack::session::abstract::id#call()","rack::showexceptions#call()","rack::showstatus#call()","rack::static#call()","rack::urlmap#call()","rack::utils::context#call()","rack::static#can_serve()","rack::directory#check_forbidden()","rack::session::abstract::sessionhash#clear()","rack::response::helpers#client_error?()","rack::bodyproxy#close()","rack::chunked::body#close()","rack::response#close()","rack::rewindableinput#close()","rack::bodyproxy#closed?()","rack::request#content_charset()","rack::request#content_length()","rack::response::helpers#content_length()","rack::request#content_type()","rack::response::helpers#content_type()","rack::session::abstract::id#context()","rack::utils::context#context()","rack::request#cookies()","rack::auth::digest::request#correct_uri?()","rack::auth::basic::request#credentials()","rack::nulllogger#debug()","rack::session::cookie::base64#decode()","rack::session::cookie::base64::marshal#decode()","rack::session::cookie::identity#decode()","rack::session::cookie::reverse#decode()","rack::handler::default()","rack::server#default_options()","rack::mockrequest#delete()","rack::session::abstract::sessionhash#delete()","rack::utils::headerhash#delete()","rack::request#delete?()","rack::response#delete_cookie()","rack::utils::delete_cookie_header!()","rack::auth::digest::params::dequote()","rack::session::memcache#destroy_session()","rack::session::pool#destroy_session()","rack::auth::digest::nonce#digest()","rack::auth::digest::request#digest?()","rack::multipart::generator#dump()","rack::showexceptions#dump_exception()","rack::chunked::body#each()","rack::deflater::deflatestream#each()","rack::deflater::gzipstream#each()","rack::directory#each()","rack::file#each()","rack::response#each()","rack::rewindableinput#each()","rack::utils::headerhash#each()","rack::mockresponse#empty?()","rack::response#empty?()","rack::session::abstract::sessionhash#empty?()","rack::session::cookie::base64#encode()","rack::session::cookie::base64::marshal#encode()","rack::session::cookie::identity#encode()","rack::session::cookie::reverse#encode()","rack::directory#entity_not_found()","rack::mockrequest::env_for()","rack::nulllogger#error()","rack::utils::escape()","rack::utils::escape_html()","rack::utils::escape_path()","rack::session::abstract::sessionhash#exists?()","rack::nulllogger#fatal()","rack::reloader::stat#figure_path()","rack::directory#filesize_format()","rack::response#finish()","rack::mockrequest::fatalwarner#flush()","rack::response::helpers#forbidden?()","rack::request#form_data?()","rack::auth::digest::nonce#fresh?()","rack::request#fullpath()","rack::session::memcache#generate_sid()","rack::session::pool#generate_sid()","rack::handler::get()","rack::mockrequest#get()","rack::request#get?()","rack::session::memcache#get_session()","rack::session::pool#get_session()","rack::rewindableinput#gets()","rack::server::options#handler_opts()","rack::session::abstract::sessionhash#has_key?()","rack::utils::headerhash#has_key?()","rack::mockrequest#head()","rack::request#head?()","rack::request#host()","rack::request#host_with_port()","rack::recursive#include()","rack::cascade#include?()","rack::response::helpers#include?()","rack::session::abstract::sessionhash#include?()","rack::utils::headerhash#include?()","rack::nulllogger#info()","rack::response::helpers#informational?()","rack::session::abstract::sessionhash#inspect()","rack::response::helpers#invalid?()","rack::request#ip()","rack::session::abstract::sessionhash#key?()","rack::utils::headerhash#key?()","rack::utils::keyspaceconstrainedparams#key?()","rack::directory#list_directory()","rack::directory#list_path()","rack::session::abstract::sessionhash#loaded?()","rack::multipart::uploadedfile#local_path()","rack::response::helpers#location()","rack::request#logger()","rack::server::logging_middleware()","rack::builder#map()","rack::mockresponse#match()","rack::request#media_type()","rack::request#media_type_params()","rack::utils::headerhash#member?()","rack::utils::headerhash#merge()","rack::utils::headerhash#merge!()","rack::auth::digest::request#method()","rack::auth::digest::request#method_missing()","rack::bodyproxy#method_missing()","rack::response::helpers#method_not_allowed?()","rack::methodoverride#method_override()","rack::server#middleware()","rack::server::middleware()","rack::mime::mime_type()","rack::auth::abstracthandler::new()","rack::auth::abstractrequest::new()","rack::auth::digest::md5::new()","rack::auth::digest::nonce::new()","rack::auth::digest::params::new()","rack::bodyproxy::new()","rack::builder::new()","rack::cascade::new()","rack::chunked::new()","rack::chunked::body::new()","rack::commonlogger::new()","rack::conditionalget::new()","rack::config::new()","rack::contentlength::new()","rack::contenttype::new()","rack::deflater::new()","rack::deflater::deflatestream::new()","rack::deflater::gzipstream::new()","rack::directory::new()","rack::etag::new()","rack::file::new()","rack::forwardrequest::new()","rack::handler::mongrel::new()","rack::handler::scgi::new()","rack::handler::webrick::new()","rack::head::new()","rack::lint::new()","rack::lock::new()","rack::logger::new()","rack::methodoverride::new()","rack::mockrequest::new()","rack::mockresponse::new()","rack::multipart::generator::new()","rack::multipart::parser::new()","rack::multipart::uploadedfile::new()","rack::nulllogger::new()","rack::recursive::new()","rack::reloader::new()","rack::request::new()","rack::response::new()","rack::rewindableinput::new()","rack::runtime::new()","rack::sendfile::new()","rack::server::new()","rack::session::abstract::id::new()","rack::session::abstract::sessionhash::new()","rack::session::cookie::new()","rack::session::memcache::new()","rack::session::pool::new()","rack::showexceptions::new()","rack::showstatus::new()","rack::static::new()","rack::urlmap::new()","rack::utils::context::new()","rack::utils::headerhash::new()","rack::utils::headerhash::new()","rack::utils::keyspaceconstrainedparams::new()","rack::auth::digest::request#nonce()","rack::utils::normalize_params()","rack::response::helpers#not_found?()","rack::response::helpers#ok?()","rack::server#options()","rack::request#options?()","rack::static#overwrite_file_path()","rack::auth::abstractrequest#params()","rack::auth::digest::request#params()","rack::request#params()","rack::utils::params_hash_type?()","rack::auth::digest::nonce::parse()","rack::auth::digest::params::parse()","rack::multipart::parser#parse()","rack::server::options#parse!()","rack::builder::parse_file()","rack::multipart::parse_multipart()","rack::request#parse_multipart()","rack::utils::parse_nested_query()","rack::request#parse_query()","rack::utils::parse_query()","rack::request#parseable_data?()","rack::auth::abstractrequest#parts()","rack::auth::digest::md5#passwords_hashed?()","rack::request#patch?()","rack::multipart::uploadedfile#path()","rack::request#path()","rack::request#path_info()","rack::request#path_info=()","rack::request#port()","rack::mockrequest#post()","rack::request#post?()","rack::showexceptions#prefers_plain_text?()","rack::showexceptions#pretty()","rack::handler::mongrel#process()","rack::handler::scgi#process_request()","rack::auth::abstractrequest#provided?()","rack::mockrequest#put()","rack::request#put?()","rack::mockrequest::fatalwarner#puts()","rack::request#query_string()","rack::auth::digest::params#quote()","fcgi::stream#read()","rack::rewindableinput#read()","rack::utils::context#recontext()","rack::response#redirect()","rack::response::helpers#redirect?()","rack::response::helpers#redirection?()","rack::request#referer()","rack::request#referrer()","rack::handler::register()","rack::release()","rack::reloader#reload!()","rack::urlmap#remap()","rack::utils::headerhash#replace()","rack::auth::abstractrequest#request()","rack::mockrequest#request()","rack::request#request_method()","rack::auth::digest::request#respond_to?()","rack::bodyproxy#respond_to?()","rack::multipart::uploadedfile#respond_to?()","rack::rewindableinput#rewind()","rack::utils::rfc2822()","rack::reloader::stat#rotation()","rack::static#route_file()","rack::builder#run()","rack::handler::cgi::run()","rack::handler::fastcgi::run()","rack::handler::lsws::run()","rack::handler::mongrel::run()","rack::handler::scgi::run()","rack::handler::thin::run()","rack::handler::webrick::run()","rack::reloader#safe_load()","rack::reloader::stat#safe_stat()","rack::auth::abstractrequest#scheme()","rack::request#scheme()","rack::request#script_name()","rack::request#script_name=()","rack::utils::select_best_encoding()","rack::handler::cgi::send_body()","rack::handler::fastcgi::send_body()","rack::handler::lsws::send_body()","rack::handler::cgi::send_headers()","rack::handler::fastcgi::send_headers()","rack::handler::lsws::send_headers()","rack::handler::cgi::serve()","rack::handler::fastcgi::serve()","rack::handler::lsws::serve()","rack::server#server()","rack::response::helpers#server_error?()","rack::handler::webrick#service()","rack::file#serving()","rack::request#session()","rack::request#session_options()","rack::response#set_cookie()","rack::utils::set_cookie_header!()","rack::session::memcache#set_session()","rack::session::pool#set_session()","rack::handler::webrick::shutdown()","rack::auth::digest::params::split_header_value()","rack::request#ssl?()","rack::auth::digest::nonce#stale?()","rack::server#start()","rack::server::start()","rack::directory#stat()","rack::utils::status_code()","rack::mockrequest::fatalwarner#string()","rack::response::helpers#successful?()","rack::response#to_a()","rack::builder#to_app()","rack::response#to_ary()","rack::session::abstract::sessionhash#to_hash()","rack::utils::headerhash#to_hash()","rack::utils::keyspaceconstrainedparams#to_params_hash()","rack::auth::digest::nonce#to_s()","rack::auth::digest::params#to_s()","rack::request#trace?()","rack::request#trusted_proxy?()","rack::handler::try_require()","rack::utils::unescape()","rack::response::helpers#unprocessable?()","rack::session::abstract::sessionhash#update()","rack::request#url()","rack::builder#use()","rack::request#user_agent()","rack::auth::basic::request#username()","rack::auth::digest::nonce#valid?()","rack::handler::fastcgi::valid_options()","rack::handler::mongrel::valid_options()","rack::handler::scgi::valid_options()","rack::handler::thin::valid_options()","rack::handler::webrick::valid_options()","rack::request#values_at()","rack::version()","rack::nulllogger#warn()","rack::session::memcache#with_lock()","rack::session::pool#with_lock()","rack::deflater::gzipstream#write()","rack::mockrequest::fatalwarner#write()","rack::response#write()","rack::request#xhr?()","",""],"info":[["FCGI","","FCGI.html","",""],["FCGI::Stream","","FCGI/Stream.html","",""],["Rack","","Rack.html","","<p>The Rack main module, serving as a namespace for all core Rack modules and\nclasses.\n<p>All modules meant …\n"],["Rack::Auth","","Rack/Auth.html","",""],["Rack::Auth::AbstractHandler","","Rack/Auth/AbstractHandler.html","","<p>Rack::Auth::AbstractHandler implements common authentication functionality.\n<p><code>realm</code> should be set for all ...\n"],["Rack::Auth::AbstractRequest","","Rack/Auth/AbstractRequest.html","",""],["Rack::Auth::Basic","","Rack/Auth/Basic.html","","<p>Rack::Auth::Basic implements HTTP Basic Authentication, as per RFC 2617.\n<p>Initialize with the Rack application …\n"],["Rack::Auth::Basic::Request","","Rack/Auth/Basic/Request.html","",""],["Rack::Auth::Digest","","Rack/Auth/Digest.html","",""],["Rack::Auth::Digest::MD5","","Rack/Auth/Digest/MD5.html","","<p>Rack::Auth::Digest::MD5 implements the MD5 algorithm version of HTTP Digest\nAuthentication, as per RFC …\n"],["Rack::Auth::Digest::Nonce","","Rack/Auth/Digest/Nonce.html","","<p>Rack::Auth::Digest::Nonce is the default nonce generator for the\nRack::Auth::Digest::MD5 authentication …\n"],["Rack::Auth::Digest::Params","","Rack/Auth/Digest/Params.html","",""],["Rack::Auth::Digest::Request","","Rack/Auth/Digest/Request.html","",""],["Rack::BodyProxy","","Rack/BodyProxy.html","",""],["Rack::Builder","","Rack/Builder.html","","<p>Rack::Builder implements a small DSL to iteratively construct Rack\napplications.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'rack/lobster'</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Rack::Cascade","","Rack/Cascade.html","","<p>Rack::Cascade tries an request on several apps, and returns the first\nresponse that is not 404 (or in …\n"],["Rack::Chunked","","Rack/Chunked.html","","<p>Middleware that applies chunked transfer encoding to response bodies when\nthe response does not include …\n"],["Rack::Chunked::Body","","Rack/Chunked/Body.html","","<p>A body wrapper that emits chunked responses\n"],["Rack::CommonLogger","","Rack/CommonLogger.html","","<p>Rack::CommonLogger forwards every request to an <code>app</code> given, and\nlogs a line in the Apache common log format …\n"],["Rack::ConditionalGet","","Rack/ConditionalGet.html","","<p>Middleware that enables conditional GET using If-None-Match and\nIf-Modified-Since. The application should …\n"],["Rack::Config","","Rack/Config.html","","<p>Rack::Config modifies the environment using the block given during\ninitialization.\n"],["Rack::ContentLength","","Rack/ContentLength.html","","<p>Sets the Content-Length header on responses with fixed-length bodies.\n"],["Rack::ContentType","","Rack/ContentType.html","","<p>Sets the Content-Type header on responses which don’t have one.\n<p>Builder Usage:\n\n<pre>use Rack::ContentType, &quot;text/plain&quot;</pre>\n"],["Rack::Deflater","","Rack/Deflater.html","",""],["Rack::Deflater::DeflateStream","","Rack/Deflater/DeflateStream.html","",""],["Rack::Deflater::GzipStream","","Rack/Deflater/GzipStream.html","",""],["Rack::Directory","","Rack/Directory.html","","<p>Rack::Directory serves entries below the <code>root</code> given, according\nto the path info of the Rack request. …\n"],["Rack::ETag","","Rack/ETag.html","","<p>Automatically sets the ETag header on all String bodies.\n<p>The ETag header is skipped if ETag or Last-Modified …\n"],["Rack::File","","Rack/File.html","","<p>Rack::File serves files below the <code>root</code> directory given,\naccording to the path info of the Rack request. …\n"],["Rack::ForwardRequest","","Rack/ForwardRequest.html","","<p>Rack::ForwardRequest gets caught by Rack::Recursive and redirects the\ncurrent request to the app at  …\n"],["Rack::Handler","","Rack/Handler.html","","<p><strong>Handlers</strong> connect web servers with Rack.\n<p>Rack includes Handlers for Thin, WEBrick, FastCGI, CGI, SCGI and …\n"],["Rack::Handler::CGI","","Rack/Handler/CGI.html","",""],["Rack::Handler::EventedMongrel","","Rack/Handler/EventedMongrel.html","",""],["Rack::Handler::FastCGI","","Rack/Handler/FastCGI.html","",""],["Rack::Handler::LSWS","","Rack/Handler/LSWS.html","",""],["Rack::Handler::Mongrel","","Rack/Handler/Mongrel.html","",""],["Rack::Handler::SCGI","","Rack/Handler/SCGI.html","",""],["Rack::Handler::SwiftipliedMongrel","","Rack/Handler/SwiftipliedMongrel.html","",""],["Rack::Handler::Thin","","Rack/Handler/Thin.html","",""],["Rack::Handler::WEBrick","","Rack/Handler/WEBrick.html","",""],["Rack::Head","","Rack/Head.html","",""],["Rack::Lint","","Rack/Lint.html","","<p>Rack::Lint validates your application and the requests and responses\naccording to the Rack spec.\n"],["Rack::Lint::Assertion","","Rack/Lint/Assertion.html","",""],["Rack::Lint::ErrorWrapper","","Rack/Lint/ErrorWrapper.html","",""],["Rack::Lint::InputWrapper","","Rack/Lint/InputWrapper.html","",""],["Rack::Lint::LintError","","Rack/Lint/LintError.html","",""],["Rack::Lobster","","Rack/Lobster.html","","<p>Paste has a Pony, Rack has a Lobster!\n"],["Rack::Lock","","Rack/Lock.html","",""],["Rack::Logger","","Rack/Logger.html","","<p>Sets up rack.logger to write to rack.errors stream\n"],["Rack::MethodOverride","","Rack/MethodOverride.html","",""],["Rack::Mime","","Rack/Mime.html","",""],["Rack::MockRequest","","Rack/MockRequest.html","","<p>Rack::MockRequest helps testing your Rack application without actually\nusing HTTP.\n<p>After performing a …\n"],["Rack::MockRequest::FatalWarner","","Rack/MockRequest/FatalWarner.html","",""],["Rack::MockRequest::FatalWarning","","Rack/MockRequest/FatalWarning.html","",""],["Rack::MockResponse","","Rack/MockResponse.html","","<p>Rack::MockResponse provides useful helpers for testing your apps. Usually,\nyou don’t create the MockResponse …\n"],["Rack::Multipart","","Rack/Multipart.html","","<p>A multipart form data parser, adapted from IOWA.\n<p>Usually, Rack::Request#POST takes care of calling this. …\n"],["Rack::Multipart::Generator","","Rack/Multipart/Generator.html","",""],["Rack::Multipart::Parser","","Rack/Multipart/Parser.html","",""],["Rack::Multipart::UploadedFile","","Rack/Multipart/UploadedFile.html","",""],["Rack::NullLogger","","Rack/NullLogger.html","",""],["Rack::Recursive","","Rack/Recursive.html","","<p>Rack::Recursive allows applications called down the chain to include data\nfrom other applications (by …\n"],["Rack::Reloader","","Rack/Reloader.html","","<p>High performant source reloader\n<p>This class acts as Rack middleware.\n<p>What makes it especially suited for …\n"],["Rack::Reloader::Stat","","Rack/Reloader/Stat.html","",""],["Rack::Request","","Rack/Request.html","","<p>Rack::Request provides a convenient interface to a Rack environment.  It is\nstateless, the environment …\n"],["Rack::Response","","Rack/Response.html","","<p>Rack::Response provides a convenient interface to create a Rack response.\n<p>It allows setting of headers …\n"],["Rack::Response::Helpers","","Rack/Response/Helpers.html","",""],["Rack::RewindableInput","","Rack/RewindableInput.html","","<p>Class which can make any IO object rewindable, including non-rewindable\nones. It does this by buffering …\n"],["Rack::RewindableInput::Tempfile","","Rack/RewindableInput/Tempfile.html","","<p>Ruby’s Tempfile class has a bug. Subclass it and fix it.\n"],["Rack::Runtime","","Rack/Runtime.html","","<p>Sets an “X-Runtime” response header, indicating the response time of the\nrequest, in seconds …\n"],["Rack::Sendfile","","Rack/Sendfile.html","","<p>Sendfile\n<p>The Sendfile middleware intercepts responses whose body is being served\nfrom a file and replaces …\n"],["Rack::Server","","Rack/Server.html","",""],["Rack::Server::Options","","Rack/Server/Options.html","",""],["Rack::Session","","Rack/Session.html","",""],["Rack::Session::Abstract","","Rack/Session/Abstract.html","",""],["Rack::Session::Abstract::ID","","Rack/Session/Abstract/ID.html","","<p>ID sets up a basic framework for implementing an id based sessioning\nservice. Cookies sent to the client …\n"],["Rack::Session::Abstract::SessionHash","","Rack/Session/Abstract/SessionHash.html","","<p>SessionHash is responsible to lazily load the session from store.\n"],["Rack::Session::Cookie","","Rack/Session/Cookie.html","","<p>Rack::Session::Cookie provides simple cookie based session management. By\ndefault, the session is a  …\n"],["Rack::Session::Cookie::Base64","","Rack/Session/Cookie/Base64.html","","<p>Encode session cookies as Base64\n"],["Rack::Session::Cookie::Base64::Marshal","","Rack/Session/Cookie/Base64/Marshal.html","","<p>Encode session cookies as Marshaled Base64 data\n"],["Rack::Session::Cookie::Identity","","Rack/Session/Cookie/Identity.html","","<p>Use no encoding for session cookies\n"],["Rack::Session::Cookie::Reverse","","Rack/Session/Cookie/Reverse.html","","<p>Reverse string encoding. (trollface)\n"],["Rack::Session::Memcache","","Rack/Session/Memcache.html","","<p>Rack::Session::Memcache provides simple cookie based session management.\nSession data is stored in memcached. …\n"],["Rack::Session::Pool","","Rack/Session/Pool.html","","<p>Rack::Session::Pool provides simple cookie based session management.\nSession data is stored in a hash …\n"],["Rack::ShowExceptions","","Rack/ShowExceptions.html","","<p>Rack::ShowExceptions catches all exceptions raised from the app it wraps. \nIt shows a useful backtrace …\n"],["Rack::ShowStatus","","Rack/ShowStatus.html","","<p>Rack::ShowStatus catches all empty responses and replaces them  with a site\nexplaining the error.\n<p>Additional …\n"],["Rack::Static","","Rack/Static.html","","<p>The Rack::Static middleware intercepts requests for static files\n(javascript files, images, stylesheets, …\n"],["Rack::URLMap","","Rack/URLMap.html","","<p>Rack::URLMap takes a hash mapping urls or paths to apps, and dispatches\naccordingly.  Support for HTTP/1.1 …\n"],["Rack::Utils","","Rack/Utils.html","","<p>Rack::Utils contains a grab-bag of useful methods for writing web\napplications adopted from all kinds …\n"],["Rack::Utils::Context","","Rack/Utils/Context.html","","<p>Context allows the use of a compatible middleware at different points in a\nrequest handling stack. A …\n"],["Rack::Utils::HeaderHash","","Rack/Utils/HeaderHash.html","","<p>A case-insensitive Hash that preserves the original case of a header when\nset.\n"],["Rack::Utils::KeySpaceConstrainedParams","","Rack/Utils/KeySpaceConstrainedParams.html","",""],["URI","","URI.html","",""],["<<","Rack::Cascade","Rack/Cascade.html#method-i-3C-3C","(app)",""],["=~","Rack::MockResponse","Rack/MockResponse.html#method-i-3D-7E","(other)",""],["GET","Rack::Request","Rack/Request.html#method-i-GET","()","<p>Returns the data received in the query string.\n"],["POST","Rack::Request","Rack/Request.html#method-i-POST","()","<p>Returns the data received in the request body.\n<p>This method support both application/x-www-form-urlencoded …\n"],["[]","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-i-5B-5D","(k)",""],["[]","Rack::Request","Rack/Request.html#method-i-5B-5D","(key)","<p>shortcut for request.params\n"],["[]","Rack::Response","Rack/Response.html#method-i-5B-5D","(key)",""],["[]","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-5B-5D","(key)",""],["[]","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-5B-5D","(k)",""],["[]","Rack::Utils::KeySpaceConstrainedParams","Rack/Utils/KeySpaceConstrainedParams.html#method-i-5B-5D","(key)",""],["[]=","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-i-5B-5D-3D","(k, v)",""],["[]=","Rack::Request","Rack/Request.html#method-i-5B-5D-3D","(key, value)","<p>shortcut for request.params = value\n"],["[]=","Rack::Response","Rack/Response.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-5B-5D-3D","(k, v)",""],["[]=","Rack::Utils::KeySpaceConstrainedParams","Rack/Utils/KeySpaceConstrainedParams.html#method-i-5B-5D-3D","(key, value)",""],["_call","Rack::Directory","Rack/Directory.html#method-i-_call","(env)",""],["_call","Rack::File","Rack/File.html#method-i-_call","(env)",""],["_call","Rack::Recursive","Rack/Recursive.html#method-i-_call","(env)",""],["_close","Rack::RewindableInput::Tempfile","Rack/RewindableInput/Tempfile.html#method-i-_close","()",""],["_rack_read_without_buffer","FCGI::Stream","FCGI/Stream.html#method-i-_rack_read_without_buffer","(n, buffer=nil)",""],["accept_encoding","Rack::Request","Rack/Request.html#method-i-accept_encoding","()",""],["add","Rack::Cascade","Rack/Cascade.html#method-i-add","(app)",""],["app","Rack::Builder","Rack/Builder.html#method-c-app","(default_app = nil, &block)",""],["app","Rack::Server","Rack/Server.html#method-i-app","()",""],["bad_request?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-bad_request-3F","()",""],["base_url","Rack::Request","Rack/Request.html#method-i-base_url","()",""],["basic?","Rack::Auth::Basic::Request","Rack/Auth/Basic/Request.html#method-i-basic-3F","()",""],["body","Rack::MockResponse","Rack/MockResponse.html#method-i-body","()",""],["body","Rack::Request","Rack/Request.html#method-i-body","()",""],["build_multipart","Rack::Multipart","Rack/Multipart.html#method-c-build_multipart","(params, first = true)",""],["build_nested_query","Rack::Utils","Rack/Utils.html#method-c-build_nested_query","(value, prefix = nil)",""],["build_query","Rack::Utils","Rack/Utils.html#method-c-build_query","(params)",""],["byte_ranges","Rack::Utils","Rack/Utils.html#method-c-byte_ranges","(env, size)","<p>Parses the “Range:” header, if present, into an array of Range objects.\nReturns nil if the …\n"],["bytesize","Rack::Utils","Rack/Utils.html#method-c-bytesize","(string)",""],["call","Rack::Auth::Basic","Rack/Auth/Basic.html#method-i-call","(env)",""],["call","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-call","(env)",""],["call","Rack::Builder","Rack/Builder.html#method-i-call","(env)",""],["call","Rack::Cascade","Rack/Cascade.html#method-i-call","(env)",""],["call","Rack::Chunked","Rack/Chunked.html#method-i-call","(env)",""],["call","Rack::CommonLogger","Rack/CommonLogger.html#method-i-call","(env)",""],["call","Rack::ConditionalGet","Rack/ConditionalGet.html#method-i-call","(env)",""],["call","Rack::Config","Rack/Config.html#method-i-call","(env)",""],["call","Rack::ContentLength","Rack/ContentLength.html#method-i-call","(env)",""],["call","Rack::ContentType","Rack/ContentType.html#method-i-call","(env)",""],["call","Rack::Deflater","Rack/Deflater.html#method-i-call","(env)",""],["call","Rack::Directory","Rack/Directory.html#method-i-call","(env)",""],["call","Rack::ETag","Rack/ETag.html#method-i-call","(env)",""],["call","Rack::File","Rack/File.html#method-i-call","(env)",""],["call","Rack::Head","Rack/Head.html#method-i-call","(env)",""],["call","Rack::Lobster","Rack/Lobster.html#method-i-call","(env)",""],["call","Rack::Lock","Rack/Lock.html#method-i-call","(env)",""],["call","Rack::Logger","Rack/Logger.html#method-i-call","(env)",""],["call","Rack::MethodOverride","Rack/MethodOverride.html#method-i-call","(env)",""],["call","Rack::NullLogger","Rack/NullLogger.html#method-i-call","(env)",""],["call","Rack::Recursive","Rack/Recursive.html#method-i-call","(env)",""],["call","Rack::Reloader","Rack/Reloader.html#method-i-call","(env)",""],["call","Rack::Runtime","Rack/Runtime.html#method-i-call","(env)",""],["call","Rack::Sendfile","Rack/Sendfile.html#method-i-call","(env)",""],["call","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-call","(env)",""],["call","Rack::ShowExceptions","Rack/ShowExceptions.html#method-i-call","(env)",""],["call","Rack::ShowStatus","Rack/ShowStatus.html#method-i-call","(env)",""],["call","Rack::Static","Rack/Static.html#method-i-call","(env)",""],["call","Rack::URLMap","Rack/URLMap.html#method-i-call","(env)",""],["call","Rack::Utils::Context","Rack/Utils/Context.html#method-i-call","(env)",""],["can_serve","Rack::Static","Rack/Static.html#method-i-can_serve","(path)",""],["check_forbidden","Rack::Directory","Rack/Directory.html#method-i-check_forbidden","()",""],["clear","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-clear","()",""],["client_error?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-client_error-3F","()",""],["close","Rack::BodyProxy","Rack/BodyProxy.html#method-i-close","()",""],["close","Rack::Chunked::Body","Rack/Chunked/Body.html#method-i-close","()",""],["close","Rack::Response","Rack/Response.html#method-i-close","()",""],["close","Rack::RewindableInput","Rack/RewindableInput.html#method-i-close","()","<p>Closes this RewindableInput object without closing the originally wrapped\nIO oject. Cleans up any temporary …\n"],["closed?","Rack::BodyProxy","Rack/BodyProxy.html#method-i-closed-3F","()",""],["content_charset","Rack::Request","Rack/Request.html#method-i-content_charset","()","<p>The character set of the request body if a “charset” media type parameter\nwas given, or nil …\n"],["content_length","Rack::Request","Rack/Request.html#method-i-content_length","()",""],["content_length","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-content_length","()",""],["content_type","Rack::Request","Rack/Request.html#method-i-content_type","()",""],["content_type","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-content_type","()",""],["context","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-context","(env, app=@app)",""],["context","Rack::Utils::Context","Rack/Utils/Context.html#method-i-context","(env, app=@app)",""],["cookies","Rack::Request","Rack/Request.html#method-i-cookies","()",""],["correct_uri?","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-correct_uri-3F","()",""],["credentials","Rack::Auth::Basic::Request","Rack/Auth/Basic/Request.html#method-i-credentials","()",""],["debug","Rack::NullLogger","Rack/NullLogger.html#method-i-debug","(progname = nil, &block)",""],["decode","Rack::Session::Cookie::Base64","Rack/Session/Cookie/Base64.html#method-i-decode","(str)",""],["decode","Rack::Session::Cookie::Base64::Marshal","Rack/Session/Cookie/Base64/Marshal.html#method-i-decode","(str)",""],["decode","Rack::Session::Cookie::Identity","Rack/Session/Cookie/Identity.html#method-i-decode","(str)",""],["decode","Rack::Session::Cookie::Reverse","Rack/Session/Cookie/Reverse.html#method-i-decode","(str)",""],["default","Rack::Handler","Rack/Handler.html#method-c-default","(options = {})",""],["default_options","Rack::Server","Rack/Server.html#method-i-default_options","()",""],["delete","Rack::MockRequest","Rack/MockRequest.html#method-i-delete","(uri, opts={})",""],["delete","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-delete","(key)",""],["delete","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-delete","(k)",""],["delete?","Rack::Request","Rack/Request.html#method-i-delete-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type DELETE\n"],["delete_cookie","Rack::Response","Rack/Response.html#method-i-delete_cookie","(key, value={})",""],["delete_cookie_header!","Rack::Utils","Rack/Utils.html#method-c-delete_cookie_header-21","(header, key, value = {})",""],["dequote","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-c-dequote","(str)",""],["destroy_session","Rack::Session::Memcache","Rack/Session/Memcache.html#method-i-destroy_session","(env, session_id, options)",""],["destroy_session","Rack::Session::Pool","Rack/Session/Pool.html#method-i-destroy_session","(env, session_id, options)",""],["digest","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-i-digest","()",""],["digest?","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-digest-3F","()",""],["dump","Rack::Multipart::Generator","Rack/Multipart/Generator.html#method-i-dump","()",""],["dump_exception","Rack::ShowExceptions","Rack/ShowExceptions.html#method-i-dump_exception","(exception)",""],["each","Rack::Chunked::Body","Rack/Chunked/Body.html#method-i-each","()",""],["each","Rack::Deflater::DeflateStream","Rack/Deflater/DeflateStream.html#method-i-each","()",""],["each","Rack::Deflater::GzipStream","Rack/Deflater/GzipStream.html#method-i-each","(&block)",""],["each","Rack::Directory","Rack/Directory.html#method-i-each","()",""],["each","Rack::File","Rack/File.html#method-i-each","()",""],["each","Rack::Response","Rack/Response.html#method-i-each","(&callback)",""],["each","Rack::RewindableInput","Rack/RewindableInput.html#method-i-each","(&block)",""],["each","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-each","()",""],["empty?","Rack::MockResponse","Rack/MockResponse.html#method-i-empty-3F","()",""],["empty?","Rack::Response","Rack/Response.html#method-i-empty-3F","()",""],["empty?","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-empty-3F","()",""],["encode","Rack::Session::Cookie::Base64","Rack/Session/Cookie/Base64.html#method-i-encode","(str)",""],["encode","Rack::Session::Cookie::Base64::Marshal","Rack/Session/Cookie/Base64/Marshal.html#method-i-encode","(str)",""],["encode","Rack::Session::Cookie::Identity","Rack/Session/Cookie/Identity.html#method-i-encode","(str)",""],["encode","Rack::Session::Cookie::Reverse","Rack/Session/Cookie/Reverse.html#method-i-encode","(str)",""],["entity_not_found","Rack::Directory","Rack/Directory.html#method-i-entity_not_found","()",""],["env_for","Rack::MockRequest","Rack/MockRequest.html#method-c-env_for","(uri=\"\", opts={})","<p>Return the Rack environment used for a request to <code>uri</code>.\n"],["error","Rack::NullLogger","Rack/NullLogger.html#method-i-error","(progname = nil, &block)",""],["escape","Rack::Utils","Rack/Utils.html#method-c-escape","(s)","<p>URI escapes. (CGI style space to +)\n"],["escape_html","Rack::Utils","Rack/Utils.html#method-c-escape_html","(string)","<p>Escape ampersands, brackets and quotes to their HTML/XML entities.\n"],["escape_path","Rack::Utils","Rack/Utils.html#method-c-escape_path","(s)","<p>Like URI escaping, but with %20 instead of +. Strictly speaking this is\ntrue URI escaping.\n"],["exists?","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-exists-3F","()",""],["fatal","Rack::NullLogger","Rack/NullLogger.html#method-i-fatal","(progname = nil, &block)",""],["figure_path","Rack::Reloader::Stat","Rack/Reloader/Stat.html#method-i-figure_path","(file, paths)","<p>Takes a relative or absolute <code>file</code> name, a couple possible\n<code>paths</code> that the <code>file</code> might reside in. Returns …\n"],["filesize_format","Rack::Directory","Rack/Directory.html#method-i-filesize_format","(int)",""],["finish","Rack::Response","Rack/Response.html#method-i-finish","(&block)",""],["flush","Rack::MockRequest::FatalWarner","Rack/MockRequest/FatalWarner.html#method-i-flush","()",""],["forbidden?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-forbidden-3F","()",""],["form_data?","Rack::Request","Rack/Request.html#method-i-form_data-3F","()","<p>Determine whether the request body contains form-data by checking the\nrequest Content-Type for one of …\n"],["fresh?","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-i-fresh-3F","()",""],["fullpath","Rack::Request","Rack/Request.html#method-i-fullpath","()",""],["generate_sid","Rack::Session::Memcache","Rack/Session/Memcache.html#method-i-generate_sid","()",""],["generate_sid","Rack::Session::Pool","Rack/Session/Pool.html#method-i-generate_sid","()",""],["get","Rack::Handler","Rack/Handler.html#method-c-get","(server)",""],["get","Rack::MockRequest","Rack/MockRequest.html#method-i-get","(uri, opts={})",""],["get?","Rack::Request","Rack/Request.html#method-i-get-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type GET\n"],["get_session","Rack::Session::Memcache","Rack/Session/Memcache.html#method-i-get_session","(env, sid)",""],["get_session","Rack::Session::Pool","Rack/Session/Pool.html#method-i-get_session","(env, sid)",""],["gets","Rack::RewindableInput","Rack/RewindableInput.html#method-i-gets","()",""],["handler_opts","Rack::Server::Options","Rack/Server/Options.html#method-i-handler_opts","(options)",""],["has_key?","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-has_key-3F","(key)",""],["has_key?","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-has_key-3F","(k)",""],["head","Rack::MockRequest","Rack/MockRequest.html#method-i-head","(uri, opts={})",""],["head?","Rack::Request","Rack/Request.html#method-i-head-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type HEAD\n"],["host","Rack::Request","Rack/Request.html#method-i-host","()",""],["host_with_port","Rack::Request","Rack/Request.html#method-i-host_with_port","()",""],["include","Rack::Recursive","Rack/Recursive.html#method-i-include","(env, path)",""],["include?","Rack::Cascade","Rack/Cascade.html#method-i-include-3F","(app)",""],["include?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-include-3F","(header)",""],["include?","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-include-3F","(key)",""],["include?","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-include-3F","(k)",""],["info","Rack::NullLogger","Rack/NullLogger.html#method-i-info","(progname = nil, &block)",""],["informational?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-informational-3F","()",""],["inspect","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-inspect","()",""],["invalid?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-invalid-3F","()",""],["ip","Rack::Request","Rack/Request.html#method-i-ip","()",""],["key?","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-key-3F","(key)",""],["key?","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-key-3F","(k)",""],["key?","Rack::Utils::KeySpaceConstrainedParams","Rack/Utils/KeySpaceConstrainedParams.html#method-i-key-3F","(key)",""],["list_directory","Rack::Directory","Rack/Directory.html#method-i-list_directory","()",""],["list_path","Rack::Directory","Rack/Directory.html#method-i-list_path","()","<p>TODO: add correct response if not readable, not sure if 404 is the best\n\n<pre>option</pre>\n"],["loaded?","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-loaded-3F","()",""],["local_path","Rack::Multipart::UploadedFile","Rack/Multipart/UploadedFile.html#method-i-local_path","()",""],["location","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-location","()",""],["logger","Rack::Request","Rack/Request.html#method-i-logger","()",""],["logging_middleware","Rack::Server","Rack/Server.html#method-c-logging_middleware","()",""],["map","Rack::Builder","Rack/Builder.html#method-i-map","(path, &block)","<p>Creates a route within the application.\n\n<pre>Rack::Builder.app do\n  map '/' do\n    run Heartbeat\n  end\nend</pre>\n"],["match","Rack::MockResponse","Rack/MockResponse.html#method-i-match","(other)",""],["media_type","Rack::Request","Rack/Request.html#method-i-media_type","()","<p>The media type (type/subtype) portion of the CONTENT_TYPE header without\nany media type parameters.  …\n"],["media_type_params","Rack::Request","Rack/Request.html#method-i-media_type_params","()","<p>The media type parameters provided in CONTENT_TYPE as a Hash, or an empty\nHash if no CONTENT_TYPE or …\n"],["member?","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-member-3F","(k)",""],["merge","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-merge","(other)",""],["merge!","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-merge-21","(other)",""],["method","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-method","()",""],["method_missing","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-method_missing","(sym, *args)",""],["method_missing","Rack::BodyProxy","Rack/BodyProxy.html#method-i-method_missing","(*args, &block)",""],["method_not_allowed?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-method_not_allowed-3F","()",""],["method_override","Rack::MethodOverride","Rack/MethodOverride.html#method-i-method_override","(env)",""],["middleware","Rack::Server","Rack/Server.html#method-i-middleware","()",""],["middleware","Rack::Server","Rack/Server.html#method-c-middleware","()",""],["mime_type","Rack::Mime","Rack/Mime.html#method-c-mime_type","(ext, fallback='application/octet-stream')","<p>Returns String with mime type if found, otherwise use\n<code>fallback</code>. <code>ext</code> should be filename extension in the\n…\n"],["new","Rack::Auth::AbstractHandler","Rack/Auth/AbstractHandler.html#method-c-new","(app, realm=nil, &authenticator)",""],["new","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-c-new","(env)",""],["new","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-c-new","(app, realm=nil, opaque=nil, &authenticator)",""],["new","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-c-new","(timestamp = Time.now, given_digest = nil)",""],["new","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-c-new","()",""],["new","Rack::BodyProxy","Rack/BodyProxy.html#method-c-new","(body, &block)",""],["new","Rack::Builder","Rack/Builder.html#method-c-new","(default_app = nil,&block)",""],["new","Rack::Cascade","Rack/Cascade.html#method-c-new","(apps, catch=[404, 405])",""],["new","Rack::Chunked","Rack/Chunked.html#method-c-new","(app)",""],["new","Rack::Chunked::Body","Rack/Chunked/Body.html#method-c-new","(body)",""],["new","Rack::CommonLogger","Rack/CommonLogger.html#method-c-new","(app, logger=nil)",""],["new","Rack::ConditionalGet","Rack/ConditionalGet.html#method-c-new","(app)",""],["new","Rack::Config","Rack/Config.html#method-c-new","(app, &block)",""],["new","Rack::ContentLength","Rack/ContentLength.html#method-c-new","(app)",""],["new","Rack::ContentType","Rack/ContentType.html#method-c-new","(app, content_type = \"text/html\")",""],["new","Rack::Deflater","Rack/Deflater.html#method-c-new","(app)",""],["new","Rack::Deflater::DeflateStream","Rack/Deflater/DeflateStream.html#method-c-new","(body)",""],["new","Rack::Deflater::GzipStream","Rack/Deflater/GzipStream.html#method-c-new","(body, mtime)",""],["new","Rack::Directory","Rack/Directory.html#method-c-new","(root, app=nil)",""],["new","Rack::ETag","Rack/ETag.html#method-c-new","(app, no_cache_control = nil, cache_control = DEFAULT_CACHE_CONTROL)",""],["new","Rack::File","Rack/File.html#method-c-new","(root, cache_control = nil)",""],["new","Rack::ForwardRequest","Rack/ForwardRequest.html#method-c-new","(url, env={})",""],["new","Rack::Handler::Mongrel","Rack/Handler/Mongrel.html#method-c-new","(app)",""],["new","Rack::Handler::SCGI","Rack/Handler/SCGI.html#method-c-new","(settings = {})",""],["new","Rack::Handler::WEBrick","Rack/Handler/WEBrick.html#method-c-new","(server, app)",""],["new","Rack::Head","Rack/Head.html#method-c-new","(app)",""],["new","Rack::Lint","Rack/Lint.html#method-c-new","(app)",""],["new","Rack::Lock","Rack/Lock.html#method-c-new","(app, mutex = Mutex.new)",""],["new","Rack::Logger","Rack/Logger.html#method-c-new","(app, level = ::Logger::INFO)",""],["new","Rack::MethodOverride","Rack/MethodOverride.html#method-c-new","(app)",""],["new","Rack::MockRequest","Rack/MockRequest.html#method-c-new","(app)",""],["new","Rack::MockResponse","Rack/MockResponse.html#method-c-new","(status, headers, body, errors=StringIO.new(\"\"))",""],["new","Rack::Multipart::Generator","Rack/Multipart/Generator.html#method-c-new","(params, first = true)",""],["new","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-c-new","(env)",""],["new","Rack::Multipart::UploadedFile","Rack/Multipart/UploadedFile.html#method-c-new","(path, content_type = \"text/plain\", binary = false)",""],["new","Rack::NullLogger","Rack/NullLogger.html#method-c-new","(app)",""],["new","Rack::Recursive","Rack/Recursive.html#method-c-new","(app)",""],["new","Rack::Reloader","Rack/Reloader.html#method-c-new","(app, cooldown = 10, backend = Stat)",""],["new","Rack::Request","Rack/Request.html#method-c-new","(env)",""],["new","Rack::Response","Rack/Response.html#method-c-new","(body=[], status=200, header={})",""],["new","Rack::RewindableInput","Rack/RewindableInput.html#method-c-new","(io)",""],["new","Rack::Runtime","Rack/Runtime.html#method-c-new","(app, name = nil)",""],["new","Rack::Sendfile","Rack/Sendfile.html#method-c-new","(app, variation=nil)",""],["new","Rack::Server","Rack/Server.html#method-c-new","(options = nil)","<p>Options may include:\n<p>:app\n\n<pre>a rack application to run (overrides :config)</pre>\n"],["new","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-c-new","(app, options={})",""],["new","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-c-new","(by, env)",""],["new","Rack::Session::Cookie","Rack/Session/Cookie.html#method-c-new","(app, options={})",""],["new","Rack::Session::Memcache","Rack/Session/Memcache.html#method-c-new","(app, options={})",""],["new","Rack::Session::Pool","Rack/Session/Pool.html#method-c-new","(app, options={})",""],["new","Rack::ShowExceptions","Rack/ShowExceptions.html#method-c-new","(app)",""],["new","Rack::ShowStatus","Rack/ShowStatus.html#method-c-new","(app)",""],["new","Rack::Static","Rack/Static.html#method-c-new","(app, options={})",""],["new","Rack::URLMap","Rack/URLMap.html#method-c-new","(map = {})",""],["new","Rack::Utils::Context","Rack/Utils/Context.html#method-c-new","(app_f, app_r)",""],["new","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-c-new","(hash={})",""],["new","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-c-new","(hash={})",""],["new","Rack::Utils::KeySpaceConstrainedParams","Rack/Utils/KeySpaceConstrainedParams.html#method-c-new","(limit = Utils.key_space_limit)",""],["nonce","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-nonce","()",""],["normalize_params","Rack::Utils","Rack/Utils.html#method-c-normalize_params","(params, name, v = nil)",""],["not_found?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-not_found-3F","()",""],["ok?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-ok-3F","()",""],["options","Rack::Server","Rack/Server.html#method-i-options","()",""],["options?","Rack::Request","Rack/Request.html#method-i-options-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type OPTIONS\n"],["overwrite_file_path","Rack::Static","Rack/Static.html#method-i-overwrite_file_path","(path)",""],["params","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-i-params","()",""],["params","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-params","()",""],["params","Rack::Request","Rack/Request.html#method-i-params","()","<p>The union of GET and POST data.\n"],["params_hash_type?","Rack::Utils","Rack/Utils.html#method-c-params_hash_type-3F","(obj)",""],["parse","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-c-parse","(string)",""],["parse","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-c-parse","(str)",""],["parse","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-i-parse","()",""],["parse!","Rack::Server::Options","Rack/Server/Options.html#method-i-parse-21","(args)",""],["parse_file","Rack::Builder","Rack/Builder.html#method-c-parse_file","(config, opts = Server::Options.new)",""],["parse_multipart","Rack::Multipart","Rack/Multipart.html#method-c-parse_multipart","(env)",""],["parse_multipart","Rack::Request","Rack/Request.html#method-i-parse_multipart","(env)",""],["parse_nested_query","Rack::Utils","Rack/Utils.html#method-c-parse_nested_query","(qs, d = nil)",""],["parse_query","Rack::Request","Rack/Request.html#method-i-parse_query","(qs)",""],["parse_query","Rack::Utils","Rack/Utils.html#method-c-parse_query","(qs, d = nil)","<p>Stolen from Mongrel, with some small modifications: Parses a query string\nby breaking it up at the ‘&amp;’ …\n"],["parseable_data?","Rack::Request","Rack/Request.html#method-i-parseable_data-3F","()","<p>Determine whether the request body contains data by checking the request\nmedia_type against registered …\n"],["parts","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-i-parts","()",""],["passwords_hashed?","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-passwords_hashed-3F","()",""],["patch?","Rack::Request","Rack/Request.html#method-i-patch-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type PATCH\n"],["path","Rack::Multipart::UploadedFile","Rack/Multipart/UploadedFile.html#method-i-path","()",""],["path","Rack::Request","Rack/Request.html#method-i-path","()",""],["path_info","Rack::Request","Rack/Request.html#method-i-path_info","()",""],["path_info=","Rack::Request","Rack/Request.html#method-i-path_info-3D","(s)",""],["port","Rack::Request","Rack/Request.html#method-i-port","()",""],["post","Rack::MockRequest","Rack/MockRequest.html#method-i-post","(uri, opts={})",""],["post?","Rack::Request","Rack/Request.html#method-i-post-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type POST\n"],["prefers_plain_text?","Rack::ShowExceptions","Rack/ShowExceptions.html#method-i-prefers_plain_text-3F","(env)",""],["pretty","Rack::ShowExceptions","Rack/ShowExceptions.html#method-i-pretty","(env, exception)",""],["process","Rack::Handler::Mongrel","Rack/Handler/Mongrel.html#method-i-process","(request, response)",""],["process_request","Rack::Handler::SCGI","Rack/Handler/SCGI.html#method-i-process_request","(request, input_body, socket)",""],["provided?","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-i-provided-3F","()",""],["put","Rack::MockRequest","Rack/MockRequest.html#method-i-put","(uri, opts={})",""],["put?","Rack::Request","Rack/Request.html#method-i-put-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type PUT\n"],["puts","Rack::MockRequest::FatalWarner","Rack/MockRequest/FatalWarner.html#method-i-puts","(warning)",""],["query_string","Rack::Request","Rack/Request.html#method-i-query_string","()",""],["quote","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-i-quote","(str)",""],["read","FCGI::Stream","FCGI/Stream.html#method-i-read","(n, buffer=nil)",""],["read","Rack::RewindableInput","Rack/RewindableInput.html#method-i-read","(*args)",""],["recontext","Rack::Utils::Context","Rack/Utils/Context.html#method-i-recontext","(app)",""],["redirect","Rack::Response","Rack/Response.html#method-i-redirect","(target, status=302)",""],["redirect?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-redirect-3F","()",""],["redirection?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-redirection-3F","()",""],["referer","Rack::Request","Rack/Request.html#method-i-referer","()","<p>the referer of the client\n"],["referrer","Rack::Request","Rack/Request.html#method-i-referrer","()",""],["register","Rack::Handler","Rack/Handler.html#method-c-register","(server, klass)",""],["release","Rack","Rack.html#method-c-release","()","<p>Return the Rack release as a dotted string.\n"],["reload!","Rack::Reloader","Rack/Reloader.html#method-i-reload-21","(stderr = $stderr)",""],["remap","Rack::URLMap","Rack/URLMap.html#method-i-remap","(map)",""],["replace","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-replace","(other)",""],["request","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-i-request","()",""],["request","Rack::MockRequest","Rack/MockRequest.html#method-i-request","(method=\"GET\", uri=\"\", opts={})",""],["request_method","Rack::Request","Rack/Request.html#method-i-request_method","()",""],["respond_to?","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-respond_to-3F","(sym, *)",""],["respond_to?","Rack::BodyProxy","Rack/BodyProxy.html#method-i-respond_to-3F","(*args)",""],["respond_to?","Rack::Multipart::UploadedFile","Rack/Multipart/UploadedFile.html#method-i-respond_to-3F","(*args)",""],["rewind","Rack::RewindableInput","Rack/RewindableInput.html#method-i-rewind","()",""],["rfc2822","Rack::Utils","Rack/Utils.html#method-c-rfc2822","(time)","<p>Modified version of stdlib time.rb Time#rfc2822 to use ‘%d-%b-%Y’ instead\nof ‘% %b %Y’. It assumes that …\n"],["rotation","Rack::Reloader::Stat","Rack/Reloader/Stat.html#method-i-rotation","()",""],["route_file","Rack::Static","Rack/Static.html#method-i-route_file","(path)",""],["run","Rack::Builder","Rack/Builder.html#method-i-run","(app)","<p>Takes an argument that is an object that responds to #call and returns a\nRack response. The simplest …\n"],["run","Rack::Handler::CGI","Rack/Handler/CGI.html#method-c-run","(app, options=nil)",""],["run","Rack::Handler::FastCGI","Rack/Handler/FastCGI.html#method-c-run","(app, options={})",""],["run","Rack::Handler::LSWS","Rack/Handler/LSWS.html#method-c-run","(app, options=nil)",""],["run","Rack::Handler::Mongrel","Rack/Handler/Mongrel.html#method-c-run","(app, options={})",""],["run","Rack::Handler::SCGI","Rack/Handler/SCGI.html#method-c-run","(app, options=nil)",""],["run","Rack::Handler::Thin","Rack/Handler/Thin.html#method-c-run","(app, options={})",""],["run","Rack::Handler::WEBrick","Rack/Handler/WEBrick.html#method-c-run","(app, options={})",""],["safe_load","Rack::Reloader","Rack/Reloader.html#method-i-safe_load","(file, mtime, stderr = $stderr)","<p>A safe Kernel::load, issuing the hooks depending on the results\n"],["safe_stat","Rack::Reloader::Stat","Rack/Reloader/Stat.html#method-i-safe_stat","(file)",""],["scheme","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-i-scheme","()",""],["scheme","Rack::Request","Rack/Request.html#method-i-scheme","()",""],["script_name","Rack::Request","Rack/Request.html#method-i-script_name","()",""],["script_name=","Rack::Request","Rack/Request.html#method-i-script_name-3D","(s)",""],["select_best_encoding","Rack::Utils","Rack/Utils.html#method-c-select_best_encoding","(available_encodings, accept_encoding)",""],["send_body","Rack::Handler::CGI","Rack/Handler/CGI.html#method-c-send_body","(body)",""],["send_body","Rack::Handler::FastCGI","Rack/Handler/FastCGI.html#method-c-send_body","(out, body)",""],["send_body","Rack::Handler::LSWS","Rack/Handler/LSWS.html#method-c-send_body","(body)",""],["send_headers","Rack::Handler::CGI","Rack/Handler/CGI.html#method-c-send_headers","(status, headers)",""],["send_headers","Rack::Handler::FastCGI","Rack/Handler/FastCGI.html#method-c-send_headers","(out, status, headers)",""],["send_headers","Rack::Handler::LSWS","Rack/Handler/LSWS.html#method-c-send_headers","(status, headers)",""],["serve","Rack::Handler::CGI","Rack/Handler/CGI.html#method-c-serve","(app)",""],["serve","Rack::Handler::FastCGI","Rack/Handler/FastCGI.html#method-c-serve","(request, app)",""],["serve","Rack::Handler::LSWS","Rack/Handler/LSWS.html#method-c-serve","(app)",""],["server","Rack::Server","Rack/Server.html#method-i-server","()",""],["server_error?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-server_error-3F","()",""],["service","Rack::Handler::WEBrick","Rack/Handler/WEBrick.html#method-i-service","(req, res)",""],["serving","Rack::File","Rack/File.html#method-i-serving","(env)",""],["session","Rack::Request","Rack/Request.html#method-i-session","()",""],["session_options","Rack::Request","Rack/Request.html#method-i-session_options","()",""],["set_cookie","Rack::Response","Rack/Response.html#method-i-set_cookie","(key, value)",""],["set_cookie_header!","Rack::Utils","Rack/Utils.html#method-c-set_cookie_header-21","(header, key, value)",""],["set_session","Rack::Session::Memcache","Rack/Session/Memcache.html#method-i-set_session","(env, session_id, new_session, options)",""],["set_session","Rack::Session::Pool","Rack/Session/Pool.html#method-i-set_session","(env, session_id, new_session, options)",""],["shutdown","Rack::Handler::WEBrick","Rack/Handler/WEBrick.html#method-c-shutdown","()",""],["split_header_value","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-c-split_header_value","(str)",""],["ssl?","Rack::Request","Rack/Request.html#method-i-ssl-3F","()",""],["stale?","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-i-stale-3F","()",""],["start","Rack::Server","Rack/Server.html#method-i-start","(&blk)",""],["start","Rack::Server","Rack/Server.html#method-c-start","(options = nil)","<p>Start a new rack server (like running rackup). This will parse ARGV and\nprovide standard ARGV rackup …\n"],["stat","Rack::Directory","Rack/Directory.html#method-i-stat","(node, max = 10)",""],["status_code","Rack::Utils","Rack/Utils.html#method-c-status_code","(status)",""],["string","Rack::MockRequest::FatalWarner","Rack/MockRequest/FatalWarner.html#method-i-string","()",""],["successful?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-successful-3F","()",""],["to_a","Rack::Response","Rack/Response.html#method-i-to_a","(&block)",""],["to_app","Rack::Builder","Rack/Builder.html#method-i-to_app","()",""],["to_ary","Rack::Response","Rack/Response.html#method-i-to_ary","(&block)",""],["to_hash","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-to_hash","()",""],["to_hash","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-to_hash","()",""],["to_params_hash","Rack::Utils::KeySpaceConstrainedParams","Rack/Utils/KeySpaceConstrainedParams.html#method-i-to_params_hash","()",""],["to_s","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-i-to_s","()",""],["to_s","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-i-to_s","()",""],["trace?","Rack::Request","Rack/Request.html#method-i-trace-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type TRACE\n"],["trusted_proxy?","Rack::Request","Rack/Request.html#method-i-trusted_proxy-3F","(ip)",""],["try_require","Rack::Handler","Rack/Handler.html#method-c-try_require","(prefix, const_name)","<p>Transforms server-name constants to their canonical form as filenames, then\ntries to require them but …\n"],["unescape","Rack::Utils","Rack/Utils.html#method-c-unescape","(s, encoding = Encoding::UTF_8)",""],["unprocessable?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-unprocessable-3F","()",""],["update","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-update","(hash)",""],["url","Rack::Request","Rack/Request.html#method-i-url","()","<p>Tries to return a remake of the original request URL as a string.\n"],["use","Rack::Builder","Rack/Builder.html#method-i-use","(middleware, *args, &block)","<p>Specifies a middleware to use in a stack.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Middleware</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">initialize</span>(<span class=\"ruby-identifier\">app</span>)\n    <span class=\"ruby-ivar\">@app</span> = <span class=\"ruby-identifier\">app</span>\n  <span class=\"ruby-keyword\">end</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["user_agent","Rack::Request","Rack/Request.html#method-i-user_agent","()",""],["username","Rack::Auth::Basic::Request","Rack/Auth/Basic/Request.html#method-i-username","()",""],["valid?","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-i-valid-3F","()",""],["valid_options","Rack::Handler::FastCGI","Rack/Handler/FastCGI.html#method-c-valid_options","()",""],["valid_options","Rack::Handler::Mongrel","Rack/Handler/Mongrel.html#method-c-valid_options","()",""],["valid_options","Rack::Handler::SCGI","Rack/Handler/SCGI.html#method-c-valid_options","()",""],["valid_options","Rack::Handler::Thin","Rack/Handler/Thin.html#method-c-valid_options","()",""],["valid_options","Rack::Handler::WEBrick","Rack/Handler/WEBrick.html#method-c-valid_options","()",""],["values_at","Rack::Request","Rack/Request.html#method-i-values_at","(*keys)","<p>like Hash#values_at\n"],["version","Rack","Rack.html#method-c-version","()","<p>Return the Rack protocol version as a dotted string.\n"],["warn","Rack::NullLogger","Rack/NullLogger.html#method-i-warn","(progname = nil, &block)",""],["with_lock","Rack::Session::Memcache","Rack/Session/Memcache.html#method-i-with_lock","(env, default=nil)",""],["with_lock","Rack::Session::Pool","Rack/Session/Pool.html#method-i-with_lock","(env, default=nil)",""],["write","Rack::Deflater::GzipStream","Rack/Deflater/GzipStream.html#method-i-write","(data)",""],["write","Rack::MockRequest::FatalWarner","Rack/MockRequest/FatalWarner.html#method-i-write","(warning)",""],["write","Rack::Response","Rack/Response.html#method-i-write","(str)","<p>Append to body and update Content-Length.\n<p>NOTE: Do not mix #write and direct #body access!\n"],["xhr?","Rack::Request","Rack/Request.html#method-i-xhr-3F","()",""],["KNOWN-ISSUES","","KNOWN-ISSUES.html","","<p>Known issues with Rack and Web servers\n<p>Lighttpd sets wrong SCRIPT_NAME and PATH_INFO if you mount your …\n"],["README","","README_rdoc.html","","<p>Rack, a modular Ruby webserver interface <img src=“https://secure.travis-ci.org/rack/rack.png” alt=“Build …\n"]]}}