var search_data = {"index":{"searchIndex":["sprockets","argumenterror","asset","assetattributes","base","bundledasset","cache","filestore","caching","charsetnormalizer","circulardependencyerror","contenttypemismatch","context","directiveprocessor","ecotemplate","ejstemplate","encodingerror","engineerror","engines","environment","error","filenotfound","fileoutsidepaths","index","jstprocessor","mime","processedasset","dependencyfile","processing","processor","safetycolons","server","staticasset","trail","unserializeerror","utils","==()","[]()","[]()","[]=()","append_path()","asset_data_uri()","asset_requirable?()","attributes_for()","body()","body()","build_asset()","build_asset()","bundle_processors()","cache=()","cache_asset()","cache_key_for()","call()","circular_call_protection()","clear_paths()","compat?()","constants()","content_type()","content_type()","content_type_of()","css_compressor()","css_compressor=()","default_mime_type()","default_namespace()","depend_on()","depend_on_asset()","dependencies()","dependencies()","dependency_fresh?()","dependency_paths()","digest()","digest_class=()","digest_path()","directives()","each()","each_entry()","each_file()","each_logical_path()","encode_with()","encode_with()","encode_with()","engine_extensions()","engine_extensions()","engine_initialized?()","engine_initialized?()","engines()","engines()","entries()","eql?()","eql?()","evaluate()","evaluate()","evaluate()","evaluate()","evaluate()","evaluate()","evaluate()","evaluate()","expand_root_path()","expire_index!()","expire_index!()","expire_index!()","extension_for_mime_type()","extensions()","extensions()","file_digest()","file_digest()","find_asset()","find_asset()","find_asset()","format_extension()","format_extensions()","fresh?()","fresh?()","fresh?()","from_hash()","hash()","hash()","index()","index()","index()","init_with()","init_with()","init_with()","initialize_engine()","initialize_engine()","inspect()","inspect()","js_compressor()","js_compressor=()","logical_path()","logical_path()","message()","mime_types()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","normalize_extension()","paths()","postprocessors()","prepare()","prepare()","prepare()","prepare()","prepare()","prepare()","prepare()","prepend_path()","preprocessors()","process_compat_directive()","process_depend_on_asset_directive()","process_depend_on_directive()","process_directives()","process_include_directive()","process_provide_directive()","process_require_directive()","process_require_directory_directive()","process_require_self_directive()","process_require_tree_directive()","process_source()","processed_header()","processed_source()","processor()","processors()","processors()","read_unicode()","register_bundle_processor()","register_engine()","register_engine()","register_mime_type()","register_mime_type()","register_postprocessor()","register_preprocessor()","register_processor()","relative_pathname()","relativize_root_path()","require_asset()","required_assets()","resolve()","resolve()","root()","root_path()","search_paths()","source()","stale?()","stat()","to_a()","to_a()","to_path()","to_s()","to_s()","trail()","unregister_bundle_processor()","unregister_postprocessor()","unregister_preprocessor()","unregister_processor()","version=()","write_to()","write_to()"],"longSearchIndex":["sprockets","sprockets::argumenterror","sprockets::asset","sprockets::assetattributes","sprockets::base","sprockets::bundledasset","sprockets::cache","sprockets::cache::filestore","sprockets::caching","sprockets::charsetnormalizer","sprockets::circulardependencyerror","sprockets::contenttypemismatch","sprockets::context","sprockets::directiveprocessor","sprockets::ecotemplate","sprockets::ejstemplate","sprockets::encodingerror","sprockets::engineerror","sprockets::engines","sprockets::environment","sprockets::error","sprockets::filenotfound","sprockets::fileoutsidepaths","sprockets::index","sprockets::jstprocessor","sprockets::mime","sprockets::processedasset","sprockets::processedasset::dependencyfile","sprockets::processing","sprockets::processor","sprockets::safetycolons","sprockets::server","sprockets::staticasset","sprockets::trail","sprockets::unserializeerror","sprockets::utils","sprockets::asset#==()","sprockets::base#[]()","sprockets::cache::filestore#[]()","sprockets::cache::filestore#[]=()","sprockets::trail#append_path()","sprockets::context#asset_data_uri()","sprockets::context#asset_requirable?()","sprockets::base#attributes_for()","sprockets::asset#body()","sprockets::bundledasset#body()","sprockets::base#build_asset()","sprockets::index#build_asset()","sprockets::processing#bundle_processors()","sprockets::base#cache=()","sprockets::caching#cache_asset()","sprockets::base#cache_key_for()","sprockets::server#call()","sprockets::base#circular_call_protection()","sprockets::trail#clear_paths()","sprockets::directiveprocessor#compat?()","sprockets::directiveprocessor#constants()","sprockets::assetattributes#content_type()","sprockets::context#content_type()","sprockets::base#content_type_of()","sprockets::processing#css_compressor()","sprockets::processing#css_compressor=()","sprockets::jstprocessor::default_mime_type()","sprockets::jstprocessor::default_namespace()","sprockets::context#depend_on()","sprockets::context#depend_on_asset()","sprockets::asset#dependencies()","sprockets::bundledasset#dependencies()","sprockets::asset#dependency_fresh?()","sprockets::asset#dependency_paths()","sprockets::base#digest()","sprockets::base#digest_class=()","sprockets::asset#digest_path()","sprockets::directiveprocessor#directives()","sprockets::asset#each()","sprockets::base#each_entry()","sprockets::base#each_file()","sprockets::base#each_logical_path()","sprockets::asset#encode_with()","sprockets::bundledasset#encode_with()","sprockets::processedasset#encode_with()","sprockets::assetattributes#engine_extensions()","sprockets::engines#engine_extensions()","sprockets::ecotemplate::engine_initialized?()","sprockets::ejstemplate::engine_initialized?()","sprockets::assetattributes#engines()","sprockets::engines#engines()","sprockets::base#entries()","sprockets::asset#eql?()","sprockets::processedasset::dependencyfile#eql?()","sprockets::charsetnormalizer#evaluate()","sprockets::context#evaluate()","sprockets::directiveprocessor#evaluate()","sprockets::ecotemplate#evaluate()","sprockets::ejstemplate#evaluate()","sprockets::jstprocessor#evaluate()","sprockets::processor#evaluate()","sprockets::safetycolons#evaluate()","sprockets::asset#expand_root_path()","sprockets::base#expire_index!()","sprockets::environment#expire_index!()","sprockets::index#expire_index!()","sprockets::mime#extension_for_mime_type()","sprockets::assetattributes#extensions()","sprockets::trail#extensions()","sprockets::base#file_digest()","sprockets::index#file_digest()","sprockets::base#find_asset()","sprockets::environment#find_asset()","sprockets::index#find_asset()","sprockets::assetattributes#format_extension()","sprockets::processing#format_extensions()","sprockets::asset#fresh?()","sprockets::bundledasset#fresh?()","sprockets::processedasset#fresh?()","sprockets::asset::from_hash()","sprockets::asset#hash()","sprockets::processedasset::dependencyfile#hash()","sprockets::base#index()","sprockets::environment#index()","sprockets::index#index()","sprockets::asset#init_with()","sprockets::bundledasset#init_with()","sprockets::processedasset#init_with()","sprockets::ecotemplate#initialize_engine()","sprockets::ejstemplate#initialize_engine()","sprockets::asset#inspect()","sprockets::base#inspect()","sprockets::processing#js_compressor()","sprockets::processing#js_compressor=()","sprockets::assetattributes#logical_path()","sprockets::context#logical_path()","sprockets::engineerror#message()","sprockets::mime#mime_types()","sprockets::processor::name()","sprockets::asset::new()","sprockets::assetattributes::new()","sprockets::bundledasset::new()","sprockets::cache::filestore::new()","sprockets::context::new()","sprockets::environment::new()","sprockets::index::new()","sprockets::processedasset::new()","sprockets::processedasset::dependencyfile::new()","sprockets::utils::normalize_extension()","sprockets::trail#paths()","sprockets::processing#postprocessors()","sprockets::charsetnormalizer#prepare()","sprockets::directiveprocessor#prepare()","sprockets::ecotemplate#prepare()","sprockets::ejstemplate#prepare()","sprockets::jstprocessor#prepare()","sprockets::processor#prepare()","sprockets::safetycolons#prepare()","sprockets::trail#prepend_path()","sprockets::processing#preprocessors()","sprockets::directiveprocessor#process_compat_directive()","sprockets::directiveprocessor#process_depend_on_asset_directive()","sprockets::directiveprocessor#process_depend_on_directive()","sprockets::directiveprocessor#process_directives()","sprockets::directiveprocessor#process_include_directive()","sprockets::directiveprocessor#process_provide_directive()","sprockets::directiveprocessor#process_require_directive()","sprockets::directiveprocessor#process_require_directory_directive()","sprockets::directiveprocessor#process_require_self_directive()","sprockets::directiveprocessor#process_require_tree_directive()","sprockets::directiveprocessor#process_source()","sprockets::directiveprocessor#processed_header()","sprockets::directiveprocessor#processed_source()","sprockets::processor::processor()","sprockets::assetattributes#processors()","sprockets::processing#processors()","sprockets::utils::read_unicode()","sprockets::processing#register_bundle_processor()","sprockets::engines#register_engine()","sprockets::processing#register_engine()","sprockets::mime#register_mime_type()","sprockets::processing#register_mime_type()","sprockets::processing#register_postprocessor()","sprockets::processing#register_preprocessor()","sprockets::processing#register_processor()","sprockets::asset#relative_pathname()","sprockets::asset#relativize_root_path()","sprockets::context#require_asset()","sprockets::asset#required_assets()","sprockets::context#resolve()","sprockets::trail#resolve()","sprockets::trail#root()","sprockets::context#root_path()","sprockets::assetattributes#search_paths()","sprockets::staticasset#source()","sprockets::asset#stale?()","sprockets::base#stat()","sprockets::asset#to_a()","sprockets::bundledasset#to_a()","sprockets::staticasset#to_path()","sprockets::asset#to_s()","sprockets::processor::to_s()","sprockets::trail#trail()","sprockets::processing#unregister_bundle_processor()","sprockets::processing#unregister_postprocessor()","sprockets::processing#unregister_preprocessor()","sprockets::processing#unregister_processor()","sprockets::base#version=()","sprockets::asset#write_to()","sprockets::staticasset#write_to()"],"info":[["Sprockets","","Sprockets.html","","<p>Define some basic Sprockets error classes\n"],["Sprockets::ArgumentError","","Sprockets/ArgumentError.html","",""],["Sprockets::Asset","","Sprockets/Asset.html","","<p>`Asset` is the base class for `BundledAsset` and `StaticAsset`.\n"],["Sprockets::AssetAttributes","","Sprockets/AssetAttributes.html","","<p>`AssetAttributes` is a wrapper similar to `Pathname` that provides some\nhelper accessors.\n<p>These methods …\n"],["Sprockets::Base","","Sprockets/Base.html","","<p>`Base` class for `Environment` and `Index`.\n"],["Sprockets::BundledAsset","","Sprockets/BundledAsset.html","","<p>`BundledAsset`s are used for files that need to be processed and\nconcatenated with other assets. Use …\n"],["Sprockets::Cache","","Sprockets/Cache.html","",""],["Sprockets::Cache::FileStore","","Sprockets/Cache/FileStore.html","","<p>A simple file system cache store.\n\n<pre>environment.cache = Sprockets::Cache::FileStore.new(&quot;/tmp&quot;)</pre>\n"],["Sprockets::Caching","","Sprockets/Caching.html","","<p>`Caching` is an internal mixin whose public methods are exposed on the\n`Environment` and `Index` classes. …\n"],["Sprockets::CharsetNormalizer","","Sprockets/CharsetNormalizer.html","","<p>Some browsers have issues with stylesheets that contain multiple `@charset`\ndefinitions. The issue surfaces …\n"],["Sprockets::CircularDependencyError","","Sprockets/CircularDependencyError.html","",""],["Sprockets::ContentTypeMismatch","","Sprockets/ContentTypeMismatch.html","",""],["Sprockets::Context","","Sprockets/Context.html","","<p>`Context` provides helper methods to all `Tilt` processors. They are\ntypically accessed by ERB templates. …\n"],["Sprockets::DirectiveProcessor","","Sprockets/DirectiveProcessor.html","","<p>The `DirectiveProcessor` is responsible for parsing and evaluating\ndirective comments in a source file. …\n"],["Sprockets::EcoTemplate","","Sprockets/EcoTemplate.html","","<p>Tilt engine class for the Eco compiler. Depends on the `eco` gem.\n<p>For more infomation see:\n\n<pre>https://github.com/sstephenson/ruby-eco ...</pre>\n"],["Sprockets::EjsTemplate","","Sprockets/EjsTemplate.html","","<p>Tilt engine class for the EJS compiler. Depends on the `ejs` gem.\n<p>For more infomation see:\n\n<pre>https://github.com/sstephenson/ruby-ejs</pre>\n"],["Sprockets::EncodingError","","Sprockets/EncodingError.html","",""],["Sprockets::EngineError","","Sprockets/EngineError.html","",""],["Sprockets::Engines","","Sprockets/Engines.html","","<p>`Engines` provides a global and `Environment` instance registry.\n<p>An engine is a type of processor that …\n"],["Sprockets::Environment","","Sprockets/Environment.html","",""],["Sprockets::Error","","Sprockets/Error.html","",""],["Sprockets::FileNotFound","","Sprockets/FileNotFound.html","",""],["Sprockets::FileOutsidePaths","","Sprockets/FileOutsidePaths.html","",""],["Sprockets::Index","","Sprockets/Index.html","","<p>`Index` is a special cached version of `Environment`.\n<p>The expection is that all of its file system methods …\n"],["Sprockets::JstProcessor","","Sprockets/JstProcessor.html","",""],["Sprockets::Mime","","Sprockets/Mime.html","",""],["Sprockets::ProcessedAsset","","Sprockets/ProcessedAsset.html","",""],["Sprockets::ProcessedAsset::DependencyFile","","Sprockets/ProcessedAsset/DependencyFile.html","",""],["Sprockets::Processing","","Sprockets/Processing.html","","<p>`Processing` is an internal mixin whose public methods are exposed on the\n`Environment` and `Index` classes. …\n"],["Sprockets::Processor","","Sprockets/Processor.html","","<p>`Processor` creates an anonymous processor class from a block.\n\n<pre>register_preprocessor :my_processor do ...</pre>\n"],["Sprockets::SafetyColons","","Sprockets/SafetyColons.html","","<p>For JS developers who are colonfobic, concatenating JS files using the\nmodule pattern usually leads to …\n"],["Sprockets::Server","","Sprockets/Server.html","","<p>`Server` is a concern mixed into `Environment` and `Index` that provides a\nRack compatible `call` interface …\n"],["Sprockets::StaticAsset","","Sprockets/StaticAsset.html","","<p>`StaticAsset`s are used for files that are served verbatim without any\nprocessing or concatenation.  …\n"],["Sprockets::Trail","","Sprockets/Trail.html","","<p>`Trail` is an internal mixin whose public methods are exposed on the\n`Environment` and `Index` classes. …\n"],["Sprockets::UnserializeError","","Sprockets/UnserializeError.html","",""],["Sprockets::Utils","","Sprockets/Utils.html","","<p>`Utils`, we didn’t know where else to put it!\n"],["==","Sprockets::Asset","Sprockets/Asset.html#method-i-3D-3D","(other)",""],["[]","Sprockets::Base","Sprockets/Base.html#method-i-5B-5D","(*args)","<p>Preferred `find_asset` shorthand.\n\n<pre>environment['application.js']</pre>\n"],["[]","Sprockets::Cache::FileStore","Sprockets/Cache/FileStore.html#method-i-5B-5D","(key)","<p>Lookup value in cache\n"],["[]=","Sprockets::Cache::FileStore","Sprockets/Cache/FileStore.html#method-i-5B-5D-3D","(key, value)","<p>Save value to cache\n"],["append_path","Sprockets::Trail","Sprockets/Trail.html#method-i-append_path","(path)","<p>Append a `path` to the `paths` list.\n<p>Paths at the beginning of the `Array` have a higher priority.\n"],["asset_data_uri","Sprockets::Context","Sprockets/Context.html#method-i-asset_data_uri","(path)","<p>Returns a Base64-encoded `data:` URI with the contents of the asset at the\nspecified path, and marks …\n"],["asset_requirable?","Sprockets::Context","Sprockets/Context.html#method-i-asset_requirable-3F","(path)","<p>Tests if target path is able to be safely required into the current\nconcatenation.\n"],["attributes_for","Sprockets::Base","Sprockets/Base.html#method-i-attributes_for","(path)","<p>Internal. Return a `AssetAttributes` for `path`.\n"],["body","Sprockets::Asset","Sprockets/Asset.html#method-i-body","()","<p>`body` is aliased to source by default if it can’t have any dependencies.\n"],["body","Sprockets::BundledAsset","Sprockets/BundledAsset.html#method-i-body","()","<p>Get asset’s own processed contents. Excludes any of its required\ndependencies but does run any processors …\n"],["build_asset","Sprockets::Base","Sprockets/Base.html#method-i-build_asset","(logical_path, pathname, options)",""],["build_asset","Sprockets::Index","Sprockets/Index.html#method-i-build_asset","(path, pathname, options)","<p>Cache asset building in memory and in persisted cache.\n"],["bundle_processors","Sprockets::Processing","Sprockets/Processing.html#method-i-bundle_processors","(mime_type = nil)","<p>Returns an `Array` of `Processor` classes. If a `mime_type` argument is\nsupplied, the processors registered …\n"],["cache=","Sprockets::Base","Sprockets/Base.html#method-i-cache-3D","(cache)","<p>Set persistent cache store\n<p>The cache store must implement a pair of getters and setters. Either\n`get(key)`/`set(key, …\n"],["cache_asset","Sprockets::Caching","Sprockets/Caching.html#method-i-cache_asset","(path)","<p>Cache helper method. Takes a `path` argument which maybe a logical path or\nfully expanded path. The `&amp;block` …\n"],["cache_key_for","Sprockets::Base","Sprockets/Base.html#method-i-cache_key_for","(path, options)",""],["call","Sprockets::Server","Sprockets/Server.html#method-i-call","(env)","<p>`call` implements the Rack 1.x specification which accepts an `env` Hash\nand returns a three item tuple …\n"],["circular_call_protection","Sprockets::Base","Sprockets/Base.html#method-i-circular_call_protection","(path)",""],["clear_paths","Sprockets::Trail","Sprockets/Trail.html#method-i-clear_paths","()","<p>Clear all paths and start fresh.\n<p>There is no mechanism for reordering paths, so its best to completely …\n"],["compat?","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-compat-3F","()","<p>Checks if Sprockets 1.x compat mode enabled\n"],["constants","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-constants","()","<p>Sprockets 1.x allowed for constant interpolation if a constants.yml was\npresent. This is only available …\n"],["content_type","Sprockets::AssetAttributes","Sprockets/AssetAttributes.html#method-i-content_type","()","<p>Returns the content type for the pathname. Falls back to\n`application/octet-stream`.\n"],["content_type","Sprockets::Context","Sprockets/Context.html#method-i-content_type","()","<p>Returns content type of file\n\n<pre>'application/javascript'\n'text/css'</pre>\n"],["content_type_of","Sprockets::Base","Sprockets/Base.html#method-i-content_type_of","(path)","<p>Internal. Return content type of `path`.\n"],["css_compressor","Sprockets::Processing","Sprockets/Processing.html#method-i-css_compressor","()","<p>Return CSS compressor or nil if none is set\n"],["css_compressor=","Sprockets::Processing","Sprockets/Processing.html#method-i-css_compressor-3D","(compressor)","<p>Assign a compressor to run on `text/css` assets.\n<p>The compressor object must respond to `compress` or `compile`. …\n"],["default_mime_type","Sprockets::JstProcessor","Sprockets/JstProcessor.html#method-c-default_mime_type","()",""],["default_namespace","Sprockets::JstProcessor","Sprockets/JstProcessor.html#method-c-default_namespace","()",""],["depend_on","Sprockets::Context","Sprockets/Context.html#method-i-depend_on","(path)","<p>`depend_on` allows you to state a dependency on a file without including\nit.\n<p>This is used for caching …\n"],["depend_on_asset","Sprockets::Context","Sprockets/Context.html#method-i-depend_on_asset","(path)","<p>`depend_on_asset` allows you to state an asset dependency without including\nit.\n<p>This is used for caching …\n"],["dependencies","Sprockets::Asset","Sprockets/Asset.html#method-i-dependencies","()","<p>Return an `Array` of `Asset` files that are declared dependencies.\n"],["dependencies","Sprockets::BundledAsset","Sprockets/BundledAsset.html#method-i-dependencies","()","<p>Return an `Array` of `Asset` files that are declared dependencies.\n"],["dependency_fresh?","Sprockets::Asset","Sprockets/Asset.html#method-i-dependency_fresh-3F","(environment, dep)","<p>Check if dependency is fresh.\n<p>`dep` is a `Hash` with `path`, `mtime` and `hexdigest` keys.\n<p>A `Hash` is …\n"],["dependency_paths","Sprockets::Asset","Sprockets/Asset.html#method-i-dependency_paths","()","<p>Internal: String paths that are marked as dependencies after processing.\n<p>Default to an empty `Array`. …\n"],["digest","Sprockets::Base","Sprockets/Base.html#method-i-digest","()","<p>Returns a `Digest` instance for the `Environment`.\n<p>This value serves two purposes. If two `Environment`s …\n"],["digest_class=","Sprockets::Base","Sprockets/Base.html#method-i-digest_class-3D","(klass)","<p>Assign a `Digest` implementation class. This maybe any Ruby `Digest::`\nimplementation such as `Digest::MD5` …\n"],["digest_path","Sprockets::Asset","Sprockets/Asset.html#method-i-digest_path","()","<p>Return logical path with digest spliced in.\n\n<pre>&quot;foo/bar-37b51d194a7513e45b56f6524f2d51f2.js&quot;</pre>\n"],["directives","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-directives","()","<p>Returns an Array of directive structures. Each structure is an Array with\nthe line number as the first …\n"],["each","Sprockets::Asset","Sprockets/Asset.html#method-i-each","()","<p>Add enumerator to allow `Asset` instances to be used as Rack compatible\nbody objects.\n"],["each_entry","Sprockets::Base","Sprockets/Base.html#method-i-each_entry","(root, &block)",""],["each_file","Sprockets::Base","Sprockets/Base.html#method-i-each_file","()",""],["each_logical_path","Sprockets::Base","Sprockets/Base.html#method-i-each_logical_path","()",""],["encode_with","Sprockets::Asset","Sprockets/Asset.html#method-i-encode_with","(coder)","<p>Copy serialized attributes to the coder object\n"],["encode_with","Sprockets::BundledAsset","Sprockets/BundledAsset.html#method-i-encode_with","(coder)","<p>Serialize custom attributes in `BundledAsset`.\n"],["encode_with","Sprockets::ProcessedAsset","Sprockets/ProcessedAsset.html#method-i-encode_with","(coder)","<p>Serialize custom attributes in `BundledAsset`.\n"],["engine_extensions","Sprockets::AssetAttributes","Sprockets/AssetAttributes.html#method-i-engine_extensions","()","<p>Returns an `Array` of engine extensions.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;foo.js.coffee.erb&quot;</span>\n<span class=\"ruby-comment\"># =&gt; [&quot;.coffee&quot;, &quot;.erb&quot;]</span>\n</pre>\n"],["engine_extensions","Sprockets::Engines","Sprockets/Engines.html#method-i-engine_extensions","()","<p>Returns an `Array` of engine extension `String`s.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">environment</span>.<span class=\"ruby-identifier\">engine_extensions</span>\n<span class=\"ruby-comment\"># =&gt; ['.coffee', '.sass', ...</span>\n</pre>\n"],["engine_initialized?","Sprockets::EcoTemplate","Sprockets/EcoTemplate.html#method-c-engine_initialized-3F","()","<p>Check to see if Eco is loaded\n"],["engine_initialized?","Sprockets::EjsTemplate","Sprockets/EjsTemplate.html#method-c-engine_initialized-3F","()","<p>Check to see if EJS is loaded\n"],["engines","Sprockets::AssetAttributes","Sprockets/AssetAttributes.html#method-i-engines","()","<p>Returns engine classes.\n"],["engines","Sprockets::Engines","Sprockets/Engines.html#method-i-engines","(ext = nil)","<p>Returns an `Array` of `Engine`s registered on the `Environment`. If an\n`ext` argument is supplied, the …\n"],["entries","Sprockets::Base","Sprockets/Base.html#method-i-entries","(pathname)","<p>Works like `Dir.entries`.\n<p>Subclasses may cache this method.\n"],["eql?","Sprockets::Asset","Sprockets/Asset.html#method-i-eql-3F","(other)","<p>Assets are equal if they share the same path, mtime and digest.\n"],["eql?","Sprockets::ProcessedAsset::DependencyFile","Sprockets/ProcessedAsset/DependencyFile.html#method-i-eql-3F","(other)",""],["evaluate","Sprockets::CharsetNormalizer","Sprockets/CharsetNormalizer.html#method-i-evaluate","(context, locals, &block)",""],["evaluate","Sprockets::Context","Sprockets/Context.html#method-i-evaluate","(path, options = {})","<p>Reads `path` and runs processors on the file.\n<p>This allows you to capture the result of an asset and include …\n"],["evaluate","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-evaluate","(context, locals, &block)","<p>Implemented for Tilt#render.\n<p>`context` is a `Context` instance with methods that allow you to access the\n…\n"],["evaluate","Sprockets::EcoTemplate","Sprockets/EcoTemplate.html#method-i-evaluate","(scope, locals, &block)","<p>Compile template data with Eco compiler.\n<p>Returns a JS function definition String. The result should be …\n"],["evaluate","Sprockets::EjsTemplate","Sprockets/EjsTemplate.html#method-i-evaluate","(scope, locals, &block)","<p>Compile template data with EJS compiler.\n<p>Returns a JS function definition String. The result should be …\n"],["evaluate","Sprockets::JstProcessor","Sprockets/JstProcessor.html#method-i-evaluate","(scope, locals, &block)",""],["evaluate","Sprockets::Processor","Sprockets/Processor.html#method-i-evaluate","(context, locals)","<p>Call processor block with `context` and `data`.\n"],["evaluate","Sprockets::SafetyColons","Sprockets/SafetyColons.html#method-i-evaluate","(context, locals, &block)",""],["expand_root_path","Sprockets::Asset","Sprockets/Asset.html#method-i-expand_root_path","(path)","<p>Replace `$root` placeholder with actual environment root.\n"],["expire_index!","Sprockets::Base","Sprockets/Base.html#method-i-expire_index-21","()","<p>Clear index after mutating state. Must be implemented by the subclass.\n"],["expire_index!","Sprockets::Environment","Sprockets/Environment.html#method-i-expire_index-21","()",""],["expire_index!","Sprockets::Index","Sprockets/Index.html#method-i-expire_index-21","()","<p>Index is immutable, any methods that try to clear the cache should bomb.\n"],["extension_for_mime_type","Sprockets::Mime","Sprockets/Mime.html#method-i-extension_for_mime_type","(type)",""],["extensions","Sprockets::AssetAttributes","Sprockets/AssetAttributes.html#method-i-extensions","()","<p>Returns `Array` of extension `String`s.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;foo.js.coffee&quot;</span>\n<span class=\"ruby-comment\"># =&gt; [&quot;.js&quot;, &quot;.coffee&quot;]</span>\n</pre>\n"],["extensions","Sprockets::Trail","Sprockets/Trail.html#method-i-extensions","()","<p>Returns an `Array` of extensions.\n<p>These extensions maybe omitted from logical path searches.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># =&gt; [&quot;.js&quot;, ...</span>\n</pre>\n"],["file_digest","Sprockets::Base","Sprockets/Base.html#method-i-file_digest","(path)","<p>Read and compute digest of filename.\n<p>Subclasses may cache this method.\n"],["file_digest","Sprockets::Index","Sprockets/Index.html#method-i-file_digest","(pathname)","<p>Cache calls to `file_digest`\n"],["find_asset","Sprockets::Base","Sprockets/Base.html#method-i-find_asset","(path, options = {})","<p>Find asset by logical path or expanded path.\n"],["find_asset","Sprockets::Environment","Sprockets/Environment.html#method-i-find_asset","(path, options = {})","<p>Cache `find_asset` calls\n"],["find_asset","Sprockets::Index","Sprockets/Index.html#method-i-find_asset","(path, options = {})","<p>Cache `find_asset` calls\n"],["format_extension","Sprockets::AssetAttributes","Sprockets/AssetAttributes.html#method-i-format_extension","()","<p>Returns the format extension.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;foo.js.coffee&quot;</span>\n<span class=\"ruby-comment\"># =&gt; &quot;.js&quot;</span>\n</pre>\n"],["format_extensions","Sprockets::Processing","Sprockets/Processing.html#method-i-format_extensions","()","<p>Returns an `Array` of format extension `String`s.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">format_extensions</span>\n<span class=\"ruby-comment\"># =&gt; ['.js', '.css']</span>\n</pre>\n"],["fresh?","Sprockets::Asset","Sprockets/Asset.html#method-i-fresh-3F","(environment)","<p>Checks if Asset is fresh by comparing the actual mtime and digest to the\ninmemory model.\n<p>Used to test …\n"],["fresh?","Sprockets::BundledAsset","Sprockets/BundledAsset.html#method-i-fresh-3F","(environment)","<p>Checks if Asset is stale by comparing the actual mtime and digest to the\ninmemory model.\n"],["fresh?","Sprockets::ProcessedAsset","Sprockets/ProcessedAsset.html#method-i-fresh-3F","(environment)","<p>Checks if Asset is stale by comparing the actual mtime and digest to the\ninmemory model.\n"],["from_hash","Sprockets::Asset","Sprockets/Asset.html#method-c-from_hash","(environment, hash)","<p>Internal initializer to load `Asset` from serialized `Hash`.\n"],["hash","Sprockets::Asset","Sprockets/Asset.html#method-i-hash","()",""],["hash","Sprockets::ProcessedAsset::DependencyFile","Sprockets/ProcessedAsset/DependencyFile.html#method-i-hash","()",""],["index","Sprockets::Base","Sprockets/Base.html#method-i-index","()","<p>Return an `Index`. Must be implemented by the subclass.\n"],["index","Sprockets::Environment","Sprockets/Environment.html#method-i-index","()","<p>Returns a cached version of the environment.\n<p>All its file system calls are cached which makes `index` …\n"],["index","Sprockets::Index","Sprockets/Index.html#method-i-index","()","<p>No-op return self as index\n"],["init_with","Sprockets::Asset","Sprockets/Asset.html#method-i-init_with","(environment, coder)","<p>Initialize `Asset` from serialized `Hash`.\n"],["init_with","Sprockets::BundledAsset","Sprockets/BundledAsset.html#method-i-init_with","(environment, coder)","<p>Initialize `BundledAsset` from serialized `Hash`.\n"],["init_with","Sprockets::ProcessedAsset","Sprockets/ProcessedAsset.html#method-i-init_with","(environment, coder)","<p>Initialize `BundledAsset` from serialized `Hash`.\n"],["initialize_engine","Sprockets::EcoTemplate","Sprockets/EcoTemplate.html#method-i-initialize_engine","()","<p>Autoload eco library. If the library isn’t loaded, Tilt will produce a\nthread safetly warning. If you …\n"],["initialize_engine","Sprockets::EjsTemplate","Sprockets/EjsTemplate.html#method-i-initialize_engine","()","<p>Autoload ejs library. If the library isn’t loaded, Tilt will produce a\nthread safetly warning. If you …\n"],["inspect","Sprockets::Asset","Sprockets/Asset.html#method-i-inspect","()","<p>Pretty inspect\n"],["inspect","Sprockets::Base","Sprockets/Base.html#method-i-inspect","()","<p>Pretty inspect\n"],["js_compressor","Sprockets::Processing","Sprockets/Processing.html#method-i-js_compressor","()","<p>Return JS compressor or nil if none is set\n"],["js_compressor=","Sprockets::Processing","Sprockets/Processing.html#method-i-js_compressor-3D","(compressor)","<p>Assign a compressor to run on `application/javascript` assets.\n<p>The compressor object must respond to `compress` …\n"],["logical_path","Sprockets::AssetAttributes","Sprockets/AssetAttributes.html#method-i-logical_path","()","<p>Reverse guess logical path for fully expanded path.\n<p>This has some known issues. For an example if a file …\n"],["logical_path","Sprockets::Context","Sprockets/Context.html#method-i-logical_path","()","<p>Returns logical path without any file extensions.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'app/javascripts/application.js'</span>\n<span class=\"ruby-comment\"># =&gt; 'application'</span>\n</pre>\n"],["message","Sprockets::EngineError","Sprockets/EngineError.html#method-i-message","()",""],["mime_types","Sprockets::Mime","Sprockets/Mime.html#method-i-mime_types","(ext = nil)","<p>Returns a `Hash` of registered mime types registered on the environment and\nthose part of `Rack::Mime`. …\n"],["name","Sprockets::Processor","Sprockets/Processor.html#method-c-name","()",""],["new","Sprockets::Asset","Sprockets/Asset.html#method-c-new","(environment, logical_path, pathname)",""],["new","Sprockets::AssetAttributes","Sprockets/AssetAttributes.html#method-c-new","(environment, path)",""],["new","Sprockets::BundledAsset","Sprockets/BundledAsset.html#method-c-new","(environment, logical_path, pathname)",""],["new","Sprockets::Cache::FileStore","Sprockets/Cache/FileStore.html#method-c-new","(root)",""],["new","Sprockets::Context","Sprockets/Context.html#method-c-new","(environment, logical_path, pathname)",""],["new","Sprockets::Environment","Sprockets/Environment.html#method-c-new","(root = \".\")","<p>`Environment` should initialized with your application’s root directory.\nThis should be the same as your …\n"],["new","Sprockets::Index","Sprockets/Index.html#method-c-new","(environment)",""],["new","Sprockets::ProcessedAsset","Sprockets/ProcessedAsset.html#method-c-new","(environment, logical_path, pathname)",""],["new","Sprockets::ProcessedAsset::DependencyFile","Sprockets/ProcessedAsset/DependencyFile.html#method-c-new","(pathname, mtime, digest)",""],["normalize_extension","Sprockets::Utils","Sprockets/Utils.html#method-c-normalize_extension","(extension)","<p>Prepends a leading “.” to an extension if its missing.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">normalize_extension</span>(<span class=\"ruby-string\">&quot;js&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &quot;.js&quot; ...</span>\n</pre>\n"],["paths","Sprockets::Trail","Sprockets/Trail.html#method-i-paths","()","<p>Returns an `Array` of path `String`s.\n<p>These paths will be used for asset logical path lookups.\n<p>Note that …\n"],["postprocessors","Sprockets::Processing","Sprockets/Processing.html#method-i-postprocessors","(mime_type = nil)","<p>Returns an `Array` of `Processor` classes. If a `mime_type` argument is\nsupplied, the processors registered …\n"],["prepare","Sprockets::CharsetNormalizer","Sprockets/CharsetNormalizer.html#method-i-prepare","()",""],["prepare","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-prepare","()",""],["prepare","Sprockets::EcoTemplate","Sprockets/EcoTemplate.html#method-i-prepare","()",""],["prepare","Sprockets::EjsTemplate","Sprockets/EjsTemplate.html#method-i-prepare","()",""],["prepare","Sprockets::JstProcessor","Sprockets/JstProcessor.html#method-i-prepare","()",""],["prepare","Sprockets::Processor","Sprockets/Processor.html#method-i-prepare","()",""],["prepare","Sprockets::SafetyColons","Sprockets/SafetyColons.html#method-i-prepare","()",""],["prepend_path","Sprockets::Trail","Sprockets/Trail.html#method-i-prepend_path","(path)","<p>Prepend a `path` to the `paths` list.\n<p>Paths at the end of the `Array` have the least priority.\n"],["preprocessors","Sprockets::Processing","Sprockets/Processing.html#method-i-preprocessors","(mime_type = nil)","<p>Returns an `Array` of `Processor` classes. If a `mime_type` argument is\nsupplied, the processors registered …\n"],["process_compat_directive","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-process_compat_directive","()","<p>Enable Sprockets 1.x compat mode.\n<p>Makes it possible to use the same JavaScript source file in both Sprockets\n…\n"],["process_depend_on_asset_directive","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-process_depend_on_asset_directive","(path)","<p>Allows you to state a dependency on an asset without including it.\n<p>This is used for caching purposes. …\n"],["process_depend_on_directive","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-process_depend_on_directive","(path)","<p>Allows you to state a dependency on a file without including it.\n<p>This is used for caching purposes. Any …\n"],["process_directives","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-process_directives","()","<p>Gathers comment directives in the source and processes them. Any directive\nmethod matching `process_*_directive` …\n"],["process_include_directive","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-process_include_directive","(path)","<p>The `include` directive works similar to `require` but inserts the contents\nof the dependency even if …\n"],["process_provide_directive","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-process_provide_directive","(path)","<p>`provide` is stubbed out for Sprockets 1.x compat. Mutating the path when\nan asset is being built is …\n"],["process_require_directive","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-process_require_directive","(path)","<p>The `require` directive functions similar to Ruby’s own `require`. It\nprovides a way to declare a dependency …\n"],["process_require_directory_directive","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-process_require_directory_directive","(path = \".\")","<p>`require_directory` requires all the files inside a single directory. It’s\nsimilar to `path/*` since …\n"],["process_require_self_directive","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-process_require_self_directive","()","<p>`require_self` causes the body of the current file to be inserted before\nany subsequent `require` or …\n"],["process_require_tree_directive","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-process_require_tree_directive","(path = \".\")","<p>`require_tree` requires all the nested files in a directory. Its glob\nequivalent is `path   /*`.\n\n<pre>//= require_tree ...</pre>\n"],["process_source","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-process_source","()",""],["processed_header","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-processed_header","()","<p>Returns the header String with any directives stripped.\n"],["processed_source","Sprockets::DirectiveProcessor","Sprockets/DirectiveProcessor.html#method-i-processed_source","()","<p>Returns the source String with any directives stripped.\n"],["processor","Sprockets::Processor","Sprockets/Processor.html#method-c-processor","()","<p>`processor` is a lambda or block\n"],["processors","Sprockets::AssetAttributes","Sprockets/AssetAttributes.html#method-i-processors","()","<p>Returns all processors to run on the path.\n"],["processors","Sprockets::Processing","Sprockets/Processing.html#method-i-processors","(*args)","<p>Deprecated alias for `preprocessors`.\n"],["read_unicode","Sprockets::Utils","Sprockets/Utils.html#method-c-read_unicode","(pathname)",""],["register_bundle_processor","Sprockets::Processing","Sprockets/Processing.html#method-i-register_bundle_processor","(mime_type, klass, &block)","<p>Registers a new Bundle Processor `klass` for `mime_type`.\n\n<pre>register_bundle_processor  'text/css', Sprockets::CharsetNormalizer</pre>\n"],["register_engine","Sprockets::Engines","Sprockets/Engines.html#method-i-register_engine","(ext, klass)","<p>Registers a new Engine `klass` for `ext`. If the `ext` already has an\nengine registered, it will be overridden. …\n"],["register_engine","Sprockets::Processing","Sprockets/Processing.html#method-i-register_engine","(ext, klass)","<p>Registers a new Engine `klass` for `ext`.\n"],["register_mime_type","Sprockets::Mime","Sprockets/Mime.html#method-i-register_mime_type","(mime_type, ext)","<p>Register a new mime type.\n"],["register_mime_type","Sprockets::Processing","Sprockets/Processing.html#method-i-register_mime_type","(mime_type, ext)","<p>Register a new mime type.\n"],["register_postprocessor","Sprockets::Processing","Sprockets/Processing.html#method-i-register_postprocessor","(mime_type, klass, &block)","<p>Registers a new Postprocessor `klass` for `mime_type`.\n\n<pre>register_postprocessor 'text/css', Sprockets::CharsetNormalizer</pre>\n"],["register_preprocessor","Sprockets::Processing","Sprockets/Processing.html#method-i-register_preprocessor","(mime_type, klass, &block)","<p>Registers a new Preprocessor `klass` for `mime_type`.\n\n<pre>register_preprocessor 'text/css', Sprockets::DirectiveProcessor</pre>\n"],["register_processor","Sprockets::Processing","Sprockets/Processing.html#method-i-register_processor","(*args, &block)","<p>Deprecated alias for `register_preprocessor`.\n"],["relative_pathname","Sprockets::Asset","Sprockets/Asset.html#method-i-relative_pathname","()","<p>Get pathname with its root stripped.\n"],["relativize_root_path","Sprockets::Asset","Sprockets/Asset.html#method-i-relativize_root_path","(path)","<p>Replace actual environment root with `$root` placeholder.\n"],["require_asset","Sprockets::Context","Sprockets/Context.html#method-i-require_asset","(path)","<p>`require_asset` declares `path` as a dependency of the file. The dependency\nwill be inserted before the …\n"],["required_assets","Sprockets::Asset","Sprockets/Asset.html#method-i-required_assets","()","<p>Internal: `ProccessedAsset`s that are required after processing.\n<p>Default to an empty `Array`.\n"],["resolve","Sprockets::Context","Sprockets/Context.html#method-i-resolve","(path, options = {}, &block)","<p>Given a logical path, `resolve` will find and return the fully expanded\npath. Relative paths will also …\n"],["resolve","Sprockets::Trail","Sprockets/Trail.html#method-i-resolve","(logical_path, options = {})","<p>Finds the expanded real path for a given logical path by searching the\nenvironment’s paths.\n\n<pre>resolve(&quot;application.js&quot;) ...</pre>\n"],["root","Sprockets::Trail","Sprockets/Trail.html#method-i-root","()","<p>Returns `Environment` root.\n<p>All relative paths are expanded with root as its base. To be useful set\nthis …\n"],["root_path","Sprockets::Context","Sprockets/Context.html#method-i-root_path","()","<p>Returns the environment path that contains the file.\n<p>If `app/javascripts` and `app/stylesheets` are in …\n"],["search_paths","Sprockets::AssetAttributes","Sprockets/AssetAttributes.html#method-i-search_paths","()","<p>Returns paths search the load path for.\n"],["source","Sprockets::StaticAsset","Sprockets/StaticAsset.html#method-i-source","()","<p>Returns file contents as its `source`.\n"],["stale?","Sprockets::Asset","Sprockets/Asset.html#method-i-stale-3F","(environment)","<p>Checks if Asset is stale by comparing the actual mtime and digest to the\ninmemory model.\n<p>Subclass must …\n"],["stat","Sprockets::Base","Sprockets/Base.html#method-i-stat","(path)","<p>Works like `File.stat`.\n<p>Subclasses may cache this method.\n"],["to_a","Sprockets::Asset","Sprockets/Asset.html#method-i-to_a","()","<p>Expand asset into an `Array` of parts.\n<p>Appending all of an assets body parts together should give you …\n"],["to_a","Sprockets::BundledAsset","Sprockets/BundledAsset.html#method-i-to_a","()","<p>Expand asset into an `Array` of parts.\n"],["to_path","Sprockets::StaticAsset","Sprockets/StaticAsset.html#method-i-to_path","()","<p>Implemented for Rack SendFile support.\n"],["to_s","Sprockets::Asset","Sprockets/Asset.html#method-i-to_s","()","<p>Return `String` of concatenated source.\n"],["to_s","Sprockets::Processor","Sprockets/Processor.html#method-c-to_s","()",""],["trail","Sprockets::Trail","Sprockets/Trail.html#method-i-trail","()",""],["unregister_bundle_processor","Sprockets::Processing","Sprockets/Processing.html#method-i-unregister_bundle_processor","(mime_type, klass)","<p>Remove Bundle Processor `klass` for `mime_type`.\n\n<pre>unregister_bundle_processor 'text/css', Sprockets::CharsetNormalizer</pre>\n"],["unregister_postprocessor","Sprockets::Processing","Sprockets/Processing.html#method-i-unregister_postprocessor","(mime_type, klass)","<p>Remove Postprocessor `klass` for `mime_type`.\n\n<pre>unregister_postprocessor 'text/css', Sprockets::DirectiveProcessor</pre>\n"],["unregister_preprocessor","Sprockets::Processing","Sprockets/Processing.html#method-i-unregister_preprocessor","(mime_type, klass)","<p>Remove Preprocessor `klass` for `mime_type`.\n\n<pre>unregister_preprocessor 'text/css', Sprockets::DirectiveProcessor</pre>\n"],["unregister_processor","Sprockets::Processing","Sprockets/Processing.html#method-i-unregister_processor","(*args)","<p>Deprecated alias for `unregister_preprocessor`.\n"],["version=","Sprockets::Base","Sprockets/Base.html#method-i-version-3D","(version)","<p>Assign an environment version.\n\n<pre>environment.version = '2.0'</pre>\n"],["write_to","Sprockets::Asset","Sprockets/Asset.html#method-i-write_to","(filename, options = {})","<p>Save asset to disk.\n"],["write_to","Sprockets::StaticAsset","Sprockets/StaticAsset.html#method-i-write_to","(filename, options = {})","<p>Save asset to disk.\n"]]}}