var search_data = {"index":{"searchIndex":["rack","test","error","methods","session","uploadedfile","authorize()","basic_authorize()","delete()","digest_authorize()","encoding_aware_strings?()","follow_redirect!()","get()","head()","header()","local_path()","new()","new()","options()","path()","post()","put()","request()","mit-license","readme"],"longSearchIndex":["rack","rack::test","rack::test::error","rack::test::methods","rack::test::session","rack::test::uploadedfile","rack::test::session#authorize()","rack::test::session#basic_authorize()","rack::test::session#delete()","rack::test::session#digest_authorize()","rack::test::encoding_aware_strings?()","rack::test::session#follow_redirect!()","rack::test::session#get()","rack::test::session#head()","rack::test::session#header()","rack::test::uploadedfile#local_path()","rack::test::session::new()","rack::test::uploadedfile::new()","rack::test::session#options()","rack::test::uploadedfile#path()","rack::test::session#post()","rack::test::session#put()","rack::test::session#request()","",""],"info":[["Rack","","Rack.html","",""],["Rack::Test","","Rack/Test.html","",""],["Rack::Test::Error","","Rack/Test/Error.html","","<p>The common base class for exceptions raised by Rack::Test\n"],["Rack::Test::Methods","","Rack/Test/Methods.html","","<p>This module serves as the primary integration point for using Rack::Test in\na testing environment. It …\n"],["Rack::Test::Session","","Rack/Test/Session.html","","<p>This class represents a series of requests issued to a Rack app, sharing a\nsingle cookie jar\n<p>Rack::Test::Session’s …\n"],["Rack::Test::UploadedFile","","Rack/Test/UploadedFile.html","","<p>Wraps a Tempfile with a content type. Including one or more UploadedFile’s\nin the params causes Rack::Test …\n"],["authorize","Rack::Test::Session","Rack/Test/Session.html#method-i-authorize","(username, password)",""],["basic_authorize","Rack::Test::Session","Rack/Test/Session.html#method-i-basic_authorize","(username, password)","<p>Set the username and password for HTTP Basic authorization, to be included\nin subsequent requests in …\n"],["delete","Rack::Test::Session","Rack/Test/Session.html#method-i-delete","(uri, params = {}, env = {}, &block)","<p>Issue a DELETE request for the given URI. See #get\n<p>Example:\n\n<pre>delete &quot;/&quot;</pre>\n"],["digest_authorize","Rack::Test::Session","Rack/Test/Session.html#method-i-digest_authorize","(username, password)","<p>Set the username and password for HTTP Digest authorization, to be included\nin subsequent requests in …\n"],["encoding_aware_strings?","Rack::Test","Rack/Test.html#method-c-encoding_aware_strings-3F","()",""],["follow_redirect!","Rack::Test::Session","Rack/Test/Session.html#method-i-follow_redirect-21","()","<p>Rack::Test will not follow any redirects automatically. This method will\nfollow the redirect returned …\n"],["get","Rack::Test::Session","Rack/Test/Session.html#method-i-get","(uri, params = {}, env = {}, &block)","<p>Issue a GET request for the given URI with the given params and Rack\nenvironment. Stores the issues request …\n"],["head","Rack::Test::Session","Rack/Test/Session.html#method-i-head","(uri, params = {}, env = {}, &block)","<p>Issue a HEAD request for the given URI. See #get\n<p>Example:\n\n<pre>head &quot;/&quot;</pre>\n"],["header","Rack::Test::Session","Rack/Test/Session.html#method-i-header","(name, value)","<p>Set a header to be included on all subsequent requests through the session.\nUse a value of nil to remove …\n"],["local_path","Rack::Test::UploadedFile","Rack/Test/UploadedFile.html#method-i-local_path","()",""],["new","Rack::Test::Session","Rack/Test/Session.html#method-c-new","(mock_session)","<p>Creates a Rack::Test::Session for a given Rack app or Rack::MockSession.\n<p>Note: Generally, you won’t need …\n"],["new","Rack::Test::UploadedFile","Rack/Test/UploadedFile.html#method-c-new","(path, content_type = \"text/plain\", binary = false)",""],["options","Rack::Test::Session","Rack/Test/Session.html#method-i-options","(uri, params = {}, env = {}, &block)","<p>Issue an OPTIONS request for the given URI. See #get\n<p>Example:\n\n<pre>options &quot;/&quot;</pre>\n"],["path","Rack::Test::UploadedFile","Rack/Test/UploadedFile.html#method-i-path","()",""],["post","Rack::Test::Session","Rack/Test/Session.html#method-i-post","(uri, params = {}, env = {}, &block)","<p>Issue a POST request for the given URI. See #get\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">post</span> <span class=\"ruby-string\">&quot;/signup&quot;</span>, <span class=\"ruby-string\">&quot;name&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;Bryan&quot;</span>\n</pre>\n"],["put","Rack::Test::Session","Rack/Test/Session.html#method-i-put","(uri, params = {}, env = {}, &block)","<p>Issue a PUT request for the given URI. See #get\n<p>Example:\n\n<pre>put &quot;/&quot;</pre>\n"],["request","Rack::Test::Session","Rack/Test/Session.html#method-i-request","(uri, env = {}, &block)","<p>Issue a request to the Rack app for the given URI and optional Rack\nenvironment. Stores the issues request …\n"],["MIT-LICENSE","","MIT-LICENSE_txt.html","","<p>Copyright © 2008-2009 Bryan Helmkamp, Engine Yard Inc.\n<p>Permission is hereby granted, free of charge, …\n"],["README","","README_rdoc.html","","<p>Rack::Test\n<p>Code: github.com/brynary/rack-test\n<p>Build: runcoderun.com/brynary/rack-test\n"]]}}