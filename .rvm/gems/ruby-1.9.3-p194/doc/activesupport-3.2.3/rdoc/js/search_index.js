var search_data = {"index":{"searchIndex":["activesupport","autoload","backtracecleaner","base64","basicobject","benchmarkable","bufferedlogger","severity","cache","entry","filestore","memcachestore","memorystore","nullstore","store","strategy","localcache","localstore","callbacks","classmethods","concern","configurable","classmethods","configuration","dependencies","classcache","watchstack","deprecation","descendantstracker","duration","fileupdatechecker","filewatcher","backend","gzip","stream","hashwithindifferentaccess","inflector","inflections","inheritableoptions","json","encoding","circularreferenceerror","encoder","variable","logsubscriber","testhelper","mocklogger","memoizable","instancemethods","messageencryptor","invalidmessage","messageverifier","invalidsignature","multibyte","chars","encodingerror","unicode","codepoint","unicodedatabase","notifications","event","fanout","instrumenter","orderedhash","orderedoptions","railtie","rescuable","classmethods","safebuffer","safeconcaterror","stringinquirer","taggedlogging","testcase","testing","assertions","declarative","isolation","forking","minitest","subprocess","testunit","pending","performance","benchmarker","forclassictestunit","forminitest","metrics","amount","base","cputime","digitalinformationunit","gcruns","gctime","memory","objects","processtime","time","usertime","walltime","performer","profiler","proxytestresult","remoteerror","setupandteardown","classmethods","forclassictestunit","forminitest","timewithzone","timezone","xmlmini","xmlmini_libxmlsax","hashbuilder","xmlmini_nokogirisax","hashbuilder","array","base64","benchmark","bigdecimal","class","date","datetime","erb","util","enumerable","falseclass","file","float","hash","i18n","railtie","io","integer","kernel","loaderror","logger","simpleformatter","module","nameerror","nilclass","numeric","object","hashwithindifferentaccess","missingsourcefile","process","qualifiedconstutils","range","regexp","string","symbol","test","unit","collector","objectspace","time","trueclass","uri","+()","+()","+()","+()","-()","-()","-()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","===()","===()","=~()","=~()",">>()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","__callback_runner_name()","__replay__()","__reset_runner()","_dasherize()","_dump()","_dump_without_utc_flag()","_dump_without_zone()","_get()","_load()","_load_without_utc_flag()","_load_without_zone()","_original_to_s()","_parse_file()","_run_class_setup()","acronym()","acts_like?()","acts_like_date?()","acts_like_date?()","acts_like_string?()","acts_like_string?()","acts_like_time?()","acts_like_time?()","acts_like_time?()","add()","add()","add_error()","add_filter()","add_silencer()","add_whiner()","advance()","advance()","advance()","advance()","ago()","ago()","ago()","ago()","ago()","ago()","alias_attribute()","alias_method_chain()","all()","all_day()","all_month()","all_quarter()","all_week()","all_year()","anonymous?()","append_features()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","assert_blank()","assert_difference()","assert_no_difference()","assert_present()","assert_valid_keys()","at()","at()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_month()","at_beginning_of_month()","at_beginning_of_quarter()","at_beginning_of_quarter()","at_beginning_of_week()","at_beginning_of_week()","at_beginning_of_year()","at_beginning_of_year()","at_end_of_month()","at_end_of_month()","at_end_of_quarter()","at_end_of_quarter()","at_end_of_week()","at_end_of_week()","at_end_of_year()","at_end_of_year()","at_midnight()","at_midnight()","at_midnight()","atomic_write()","attach_to()","attr_internal()","attr_internal_accessor()","attr_internal_reader()","attr_internal_writer()","auto_flushing=()","autoload()","autoload_at()","autoload_under()","autoloads()","backend()","backend=()","backend=()","beginning_of_day()","beginning_of_day()","beginning_of_day()","beginning_of_month()","beginning_of_month()","beginning_of_quarter()","beginning_of_quarter()","beginning_of_week()","beginning_of_week()","beginning_of_year()","beginning_of_year()","behavior()","behavior=()","benchmark()","benchmark()","between?()","blank?()","blank?()","blank?()","blank?()","blank?()","breakpoint()","build_mem_cache()","byte()","bytes()","call()","call()","camelcase()","camelize()","camelize()","capitalize()","capture()","cattr_accessor()","cattr_reader()","cattr_writer()","cdata_block()","center()","change()","change()","change()","characters()","civil_from_format()","class_attribute()","class_eval()","classify()","classify()","clean()","cleanup()","cleanup()","cleanup()","cleanup()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear!()","clone_empty()","close()","close()","color()","comparable_time()","compare_with_coercion()","compare_without_coercion()","compile_methods!()","compile_methods!()","compose()","compose_codepoints()","compress()","compressed?()","concat()","config()","config()","config_accessor()","configure()","constantize()","constantize()","consumes?()","convert_key()","convert_key()","convert_value()","convert_value()","create()","create()","create_path_and_open_file()","current()","current()","current()","current_hash()","current_hash()","current_tags()","daemon()","dasherize()","dasherize()","day()","days()","days_in_month()","days_to_week_start()","days_to_week_start()","debugger()","decode()","decode64()","decode64()","decompose()","decompose_codepoints()","decompress()","deconstantize()","deconstantize()","decrement()","decrement()","decrement()","decrement()","decrypt()","decrypt_and_verify()","deep_dup()","deep_merge()","deep_merge!()","default()","default()","default_inspect()","default_inspect()","define_callbacks()","delegate()","delete()","delete()","delete()","delete()","delete_entry()","delete_entry()","delete_if()","delete_matched()","delete_matched()","delete_matched()","delete_matched()","demodulize()","demodulize()","deprecate()","deprecate_methods()","deprecated_method_warning()","descendants()","descendants()","describe()","diff()","direct_descendants()","direct_descendants()","dirname()","downcase()","dst?()","dup()","dup()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","each()","each()","each_key()","each_pair()","each_value()","each_with_object()","eager_autoload()","eager_autoload!()","empty?()","enable_warnings()","encode()","encode()","encode64()","encode64()","encode64s()","encode_json()","encode_json()","encode_json()","encode_json()","encode_with()","encode_with()","encode_with()","encode_with()","encoding_aware?()","encrypt()","encrypt_and_sign()","end_document()","end_element()","end_of_day()","end_of_day()","end_of_day()","end_of_month()","end_of_month()","end_of_quarter()","end_of_quarter()","end_of_week()","end_of_week()","end_of_year()","end_of_year()","engine()","engine=()","environment()","eql?()","eql?()","eql_with_coercion()","eql_without_coercion()","error()","escape()","exabyte()","exabytes()","except()","except!()","exclude?()","exclude?()","execute()","execute_hook()","execute_if_updated()","exist?()","expand_cache_key()","expired?()","expires_at()","expires_at=()","extended()","extended()","extended()","extract!()","extract_options!()","extractable_options?()","extractable_options?()","extractable_options?()","extractable_options?()","fetch()","fetch()","fetch()","fifth()","filename()","find_tzinfo()","find_zone()","find_zone!()","first()","flush()","flush()","flush()","flush_all!()","flush_cache()","flushable_loggers()","for_tag()","foreign_key()","foreign_key()","forking_env?()","format()","format()","format()","formatted_offset()","formatted_offset()","formatted_offset()","formatted_offset()","fortnight()","fortnights()","forty_two()","fourth()","freeze()","freeze_with_memoizable()","from()","from()","from_now()","from_now()","from_xml()","full_profile_options()","full_test_name()","future?()","future?()","future?()","future?()","g_length()","g_pack()","g_unpack()","generate()","get()","getgm()","getlocal()","getutc()","getutc()","gigabyte()","gigabytes()","gmt?()","gmt_offset()","gmtime()","gmtoff()","group_by()","h()","handler_for_rescue()","has_key?()","has_key?()","hash()","hour()","hours()","html_escape()","html_safe()","html_safe?()","html_safe?()","html_safe?()","httpdate()","human()","humanize()","humanize()","id()","in()","in()","in()","in?()","in_char_class?()","in_groups()","in_groups_of()","in_time_zone()","in_time_zone()","in_time_zone()","include?()","include?()","include?()","include?()","include_fallbacks_module()","include_with_range?()","included()","included()","included()","increment()","increment()","increment()","increment()","index()","index_by()","inflections()","inheritable_copy()","inherited()","init_fallbacks()","initialize_copy()","initialize_copy()","initialize_i18n()","inquiry()","insert()","inspect()","inspect()","inspect()","inspect()","instance()","instance_method_names()","instance_variable_names()","instrument()","instrument()","instrument()","instrument=()","instrumenter()","invert()","irregular()","is_a?()","is_missing?()","is_missing?()","is_utf8?()","isdst()","iso8601()","iso8601()","j()","json_escape()","key?()","key?()","key?()","key_matcher()","keys()","kilobyte()","kilobytes()","kind_of?()","last()","level()","level=()","limit()","listeners_for()","listening?()","ljust()","load()","load_all!()","local()","local_constant_names()","local_constants()","local_offset()","local_time()","local_to_utc()","localtime()","log_subscribers()","logged()","logger()","lookup_store()","lstrip()","many?()","marshal_dump()","marshal_load()","mattr_accessor()","mattr_reader()","mattr_writer()","mb_chars()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure_mode()","megabyte()","megabytes()","member?()","member?()","memoize()","memoize_all()","memoized_ivar_for()","merge()","merge()","merge()","merge!()","merge!()","merge!()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_names()","middleware()","midnight()","midnight()","midnight()","minus_with_coercion()","minus_without_coercion()","minus_without_duration()","minute()","minutes()","missing_name()","missing_name?()","monday()","monday()","month()","months()","months_ago()","months_ago()","months_since()","months_since()","ms()","multiple_of?()","mute()","name()","name()","names()","nested_under_indifferent_access()","nested_under_indifferent_access()","nested_under_indifferent_access()","nested_under_indifferent_access()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_constants()","new_from_hash_copying_default()","new_from_hash_copying_default()","next_month()","next_month()","next_week()","next_week()","next_year()","next_year()","normalize()","normalize()","now()","on_cdata_block()","on_characters()","on_end_document()","on_end_element()","on_load()","on_load_all()","on_start_document()","on_start_element()","open_log()","options_for()","ord()","ord()","ordinalize()","ordinalize()","original_concat()","output_filename()","output_filename()","output_filename()","overlaps?()","parameterize()","parameterize()","parent()","parent_name()","parent_of?()","parents()","parse()","parse()","parse()","parse_error()","parser()","past?()","past?()","past?()","past?()","path()","path()","pending()","period()","period_for_local()","period_for_utc()","petabyte()","petabytes()","plural()","pluralize()","pluralize()","precisionless_round()","presence()","present?()","prev_month()","prev_month()","prev_week()","prev_week()","prev_year()","prev_year()","prime_cache()","profile()","proxy_class()","proxy_class=()","prune()","pruning?()","publish()","publish()","qualified_const_defined?()","qualified_const_get()","qualified_const_set()","quietly()","raise()","raise_if_absolute()","raw_value()","read()","read_entry()","read_entry()","read_multi()","read_multi()","readable_inspect()","readable_inspect()","record()","record()","redefine_method()","regular_update()","regular_update()","regular_writer()","regular_writer()","reject()","reject!()","reloader()","reloader_paths()","remove_filters!()","remove_possible_method()","remove_silencers!()","rename_key()","reorder_characters()","replace()","report()","require_tzinfo()","rescue_from()","rescue_with_handler()","reset_callbacks()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","reverse()","reverse_merge()","reverse_merge()","reverse_merge()","reverse_merge!()","reverse_merge!()","reverse_merge!()","reverse_update()","rfc2822()","rfc3339()","rfc822()","rindex()","rjust()","round()","rstrip()","run()","run()","run()","run()","run()","run()","run()","run()","run_callbacks()","run_gc()","run_in_isolation()","run_in_isolation()","run_load_hooks()","run_profile()","run_test()","run_test()","run_warmup()","safe_concat()","safe_constantize()","safe_constantize()","safe_get()","sample()","second()","second()","seconds()","seconds_since_midnight()","seconds_since_midnight()","seconds_to_utc_offset()","set_callback()","set_logger()","setup()","setup()","shift()","silence()","silence()","silence()","silence()","silence()","silence!()","silence_stream()","silence_warnings()","silencer()","since()","since()","since()","since()","since()","since()","singleton_class()","singular()","singularize()","singularize()","size()","size()","skip_callback()","slice()","slice()","slice!()","split()","split()","squish()","squish!()","start_document()","start_element()","stats()","step_with_blockless()","store()","store()","store()","strftime()","strict_encode64()","stringify_keys()","stringify_keys()","stringify_keys()","stringify_keys!()","stringify_keys!()","stringify_keys!()","strip()","strip_heredoc()","subscribe()","subscribe()","subscribed()","sum()","sunday()","sunday()","superclass_delegating_accessor()","suppress()","symbolize_keys()","symbolize_keys()","symbolize_keys()","symbolize_keys!()","sync_keys!()","synchronize()","tableize()","tableize()","tagged()","tags_text()","teardown()","teardown()","terabyte()","terabytes()","test()","third()","tidy_bytes()","tidy_bytes()","time()","time_with_block()","time_with_datetime_fallback()","titlecase()","titlecase()","titleize()","titleize()","titleize()","to()","to()","to_a()","to_a()","to_d()","to_date()","to_date()","to_date()","to_date()","to_datetime()","to_datetime()","to_datetime()","to_datetime()","to_datetime()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_f()","to_f()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_hash()","to_hash()","to_hash()","to_i()","to_i()","to_json()","to_options()","to_options!()","to_options!()","to_options!()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_query()","to_query()","to_query()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_sentence()","to_tag()","to_time()","to_time()","to_time()","to_time()","to_time()","to_time_in_current_zone()","to_xml()","to_xml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml_type()","today()","today?()","today?()","today?()","tomorrow()","tomorrow()","tomorrow()","transliterate()","trigger()","trigger()","truncate()","try()","try()","tv_sec()","u_unpack()","uncountable()","underscore()","underscore()","unescape()","uniq_by()","uniq_by!()","unmemoize_all()","unsubscribe()","unsubscribe()","until()","until()","upcase()","update()","update()","updated?()","us_zones()","use_zone()","usec()","utc()","utc()","utc?()","utc?()","utc_offset()","utc_offset()","utc_offset()","utc_time()","utc_to_local()","validate_fallbacks()","value()","values()","values_at()","values_at()","verify()","wait()","wait()","wants?()","warn()","watch()","watch_namespaces()","watching?()","week()","weeks()","weeks_ago()","weeks_ago()","with_backend()","with_backend()","with_gc_stats()","with_indifferent_access()","with_indifferent_access()","with_indifferent_access()","with_local_cache()","with_options()","with_output_file()","with_warnings()","wrap()","write()","write_entry()","write_entry()","xmlschema()","xmlschema()","xmlschema()","year()","years()","years_ago()","years_ago()","years_since()","years_since()","yesterday()","yesterday()","yesterday()","zone()","zone()","zone=()","zones_map()"],"longSearchIndex":["activesupport","activesupport::autoload","activesupport::backtracecleaner","activesupport::base64","activesupport::basicobject","activesupport::benchmarkable","activesupport::bufferedlogger","activesupport::bufferedlogger::severity","activesupport::cache","activesupport::cache::entry","activesupport::cache::filestore","activesupport::cache::memcachestore","activesupport::cache::memorystore","activesupport::cache::nullstore","activesupport::cache::store","activesupport::cache::strategy","activesupport::cache::strategy::localcache","activesupport::cache::strategy::localcache::localstore","activesupport::callbacks","activesupport::callbacks::classmethods","activesupport::concern","activesupport::configurable","activesupport::configurable::classmethods","activesupport::configurable::configuration","activesupport::dependencies","activesupport::dependencies::classcache","activesupport::dependencies::watchstack","activesupport::deprecation","activesupport::descendantstracker","activesupport::duration","activesupport::fileupdatechecker","activesupport::filewatcher","activesupport::filewatcher::backend","activesupport::gzip","activesupport::gzip::stream","activesupport::hashwithindifferentaccess","activesupport::inflector","activesupport::inflector::inflections","activesupport::inheritableoptions","activesupport::json","activesupport::json::encoding","activesupport::json::encoding::circularreferenceerror","activesupport::json::encoding::encoder","activesupport::json::variable","activesupport::logsubscriber","activesupport::logsubscriber::testhelper","activesupport::logsubscriber::testhelper::mocklogger","activesupport::memoizable","activesupport::memoizable::instancemethods","activesupport::messageencryptor","activesupport::messageencryptor::invalidmessage","activesupport::messageverifier","activesupport::messageverifier::invalidsignature","activesupport::multibyte","activesupport::multibyte::chars","activesupport::multibyte::encodingerror","activesupport::multibyte::unicode","activesupport::multibyte::unicode::codepoint","activesupport::multibyte::unicode::unicodedatabase","activesupport::notifications","activesupport::notifications::event","activesupport::notifications::fanout","activesupport::notifications::instrumenter","activesupport::orderedhash","activesupport::orderedoptions","activesupport::railtie","activesupport::rescuable","activesupport::rescuable::classmethods","activesupport::safebuffer","activesupport::safebuffer::safeconcaterror","activesupport::stringinquirer","activesupport::taggedlogging","activesupport::testcase","activesupport::testing","activesupport::testing::assertions","activesupport::testing::declarative","activesupport::testing::isolation","activesupport::testing::isolation::forking","activesupport::testing::isolation::minitest","activesupport::testing::isolation::subprocess","activesupport::testing::isolation::testunit","activesupport::testing::pending","activesupport::testing::performance","activesupport::testing::performance::benchmarker","activesupport::testing::performance::forclassictestunit","activesupport::testing::performance::forminitest","activesupport::testing::performance::metrics","activesupport::testing::performance::metrics::amount","activesupport::testing::performance::metrics::base","activesupport::testing::performance::metrics::cputime","activesupport::testing::performance::metrics::digitalinformationunit","activesupport::testing::performance::metrics::gcruns","activesupport::testing::performance::metrics::gctime","activesupport::testing::performance::metrics::memory","activesupport::testing::performance::metrics::objects","activesupport::testing::performance::metrics::processtime","activesupport::testing::performance::metrics::time","activesupport::testing::performance::metrics::usertime","activesupport::testing::performance::metrics::walltime","activesupport::testing::performance::performer","activesupport::testing::performance::profiler","activesupport::testing::proxytestresult","activesupport::testing::remoteerror","activesupport::testing::setupandteardown","activesupport::testing::setupandteardown::classmethods","activesupport::testing::setupandteardown::forclassictestunit","activesupport::testing::setupandteardown::forminitest","activesupport::timewithzone","activesupport::timezone","activesupport::xmlmini","activesupport::xmlmini_libxmlsax","activesupport::xmlmini_libxmlsax::hashbuilder","activesupport::xmlmini_nokogirisax","activesupport::xmlmini_nokogirisax::hashbuilder","array","base64","benchmark","bigdecimal","class","date","datetime","erb","erb::util","enumerable","falseclass","file","float","hash","i18n","i18n::railtie","io","integer","kernel","loaderror","logger","logger::simpleformatter","module","nameerror","nilclass","numeric","object","object::hashwithindifferentaccess","object::missingsourcefile","process","qualifiedconstutils","range","regexp","string","symbol","test","test::unit","test::unit::collector","test::unit::collector::objectspace","time","trueclass","uri","activesupport::duration#+()","activesupport::multibyte::chars#+()","activesupport::safebuffer#+()","activesupport::timewithzone#+()","activesupport::duration#-()","activesupport::timewithzone#-()","time#-()","activesupport::safebuffer#<<()","activesupport::multibyte::chars#<=>()","activesupport::timewithzone#<=>()","activesupport::timezone#<=>()","datetime#<=>()","time#<=>()","activesupport::duration#==()","activesupport::multibyte::unicode::unicodedatabase#===()","time::===()","activesupport::multibyte::chars#=~()","activesupport::timezone#=~()","date#>>()","activesupport::dependencies::classcache#[]()","activesupport::multibyte::chars#[]()","activesupport::orderedhash::[]()","activesupport::orderedoptions#[]()","activesupport::safebuffer#[]()","activesupport::testing::performance::metrics::[]()","activesupport::timezone::[]()","activesupport::hashwithindifferentaccess#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::multibyte::chars#[]=()","activesupport::orderedhash#[]=()","activesupport::orderedoptions#[]=()","activesupport::callbacks::classmethods#__callback_runner_name()","activesupport::testing::proxytestresult#__replay__()","activesupport::callbacks::classmethods#__reset_runner()","activesupport::xmlmini#_dasherize()","time#_dump()","time#_dump_without_utc_flag()","time#_dump_without_zone()","activesupport::orderedoptions#_get()","time::_load()","time::_load_without_utc_flag()","time::_load_without_zone()","bigdecimal#_original_to_s()","activesupport::xmlmini#_parse_file()","activesupport::testing::isolation#_run_class_setup()","activesupport::inflector::inflections#acronym()","object#acts_like?()","date#acts_like_date?()","datetime#acts_like_date?()","activesupport::multibyte::chars#acts_like_string?()","string#acts_like_string?()","activesupport::timewithzone#acts_like_time?()","datetime#acts_like_time?()","time#acts_like_time?()","activesupport::bufferedlogger#add()","activesupport::taggedlogging#add()","activesupport::testing::proxytestresult#add_error()","activesupport::backtracecleaner#add_filter()","activesupport::backtracecleaner#add_silencer()","nilclass::add_whiner()","activesupport::timewithzone#advance()","date#advance()","datetime#advance()","time#advance()","activesupport::duration#ago()","activesupport::timewithzone#ago()","date#ago()","datetime#ago()","numeric#ago()","time#ago()","module#alias_attribute()","module#alias_method_chain()","activesupport::timezone::all()","time#all_day()","time#all_month()","time#all_quarter()","time#all_week()","time#all_year()","module#anonymous?()","activesupport::concern#append_features()","activesupport::json::encoding::encoder#as_json()","activesupport::json::variable#as_json()","activesupport::timewithzone#as_json()","bigdecimal#as_json()","falseclass#as_json()","nilclass#as_json()","numeric#as_json()","regexp#as_json()","string#as_json()","symbol#as_json()","trueclass#as_json()","activesupport::testing::assertions#assert_blank()","activesupport::testing::assertions#assert_difference()","activesupport::testing::assertions#assert_no_difference()","activesupport::testing::assertions#assert_present()","hash#assert_valid_keys()","activesupport::timezone#at()","string#at()","date#at_beginning_of_day()","datetime#at_beginning_of_day()","time#at_beginning_of_day()","date#at_beginning_of_month()","time#at_beginning_of_month()","date#at_beginning_of_quarter()","time#at_beginning_of_quarter()","date#at_beginning_of_week()","time#at_beginning_of_week()","date#at_beginning_of_year()","time#at_beginning_of_year()","date#at_end_of_month()","time#at_end_of_month()","date#at_end_of_quarter()","time#at_end_of_quarter()","date#at_end_of_week()","time#at_end_of_week()","date#at_end_of_year()","time#at_end_of_year()","date#at_midnight()","datetime#at_midnight()","time#at_midnight()","file::atomic_write()","activesupport::logsubscriber::attach_to()","module#attr_internal()","module#attr_internal_accessor()","module#attr_internal_reader()","module#attr_internal_writer()","activesupport::bufferedlogger#auto_flushing=()","activesupport::autoload#autoload()","activesupport::autoload#autoload_at()","activesupport::autoload#autoload_under()","activesupport::autoload#autoloads()","activesupport::json::backend()","activesupport::json::backend=()","activesupport::xmlmini#backend=()","date#beginning_of_day()","datetime#beginning_of_day()","time#beginning_of_day()","date#beginning_of_month()","time#beginning_of_month()","date#beginning_of_quarter()","time#beginning_of_quarter()","date#beginning_of_week()","time#beginning_of_week()","date#beginning_of_year()","time#beginning_of_year()","activesupport::deprecation::behavior()","activesupport::deprecation::behavior=()","activesupport::benchmarkable#benchmark()","activesupport::testing::performance::metrics::base#benchmark()","activesupport::timewithzone#between?()","falseclass#blank?()","nilclass#blank?()","object#blank?()","string#blank?()","trueclass#blank?()","kernel#breakpoint()","activesupport::cache::memcachestore::build_mem_cache()","numeric#byte()","numeric#bytes()","activesupport::logsubscriber#call()","logger::simpleformatter#call()","string#camelcase()","activesupport::inflector#camelize()","string#camelize()","activesupport::multibyte::chars#capitalize()","kernel#capture()","class#cattr_accessor()","class#cattr_reader()","class#cattr_writer()","activesupport::xmlmini_nokogirisax::hashbuilder#cdata_block()","activesupport::multibyte::chars#center()","date#change()","datetime#change()","time#change()","activesupport::xmlmini_nokogirisax::hashbuilder#characters()","datetime::civil_from_format()","class#class_attribute()","kernel#class_eval()","activesupport::inflector#classify()","string#classify()","activesupport::backtracecleaner#clean()","activesupport::cache::filestore#cleanup()","activesupport::cache::memorystore#cleanup()","activesupport::cache::nullstore#cleanup()","activesupport::cache::store#cleanup()","activesupport::cache::filestore#clear()","activesupport::cache::memcachestore#clear()","activesupport::cache::memorystore#clear()","activesupport::cache::nullstore#clear()","activesupport::cache::store#clear()","activesupport::cache::strategy::localcache::localstore#clear()","activesupport::descendantstracker::clear()","activesupport::inflector::inflections#clear()","activesupport::orderedhash#clear()","activesupport::dependencies::classcache#clear!()","activesupport::safebuffer#clone_empty()","activesupport::bufferedlogger#close()","activesupport::gzip::stream#close()","activesupport::logsubscriber#color()","activesupport::timewithzone#comparable_time()","time#compare_with_coercion()","time#compare_without_coercion()","activesupport::configurable::configuration#compile_methods!()","activesupport::configurable::configuration::compile_methods!()","activesupport::multibyte::chars#compose()","activesupport::multibyte::unicode#compose_codepoints()","activesupport::gzip::compress()","activesupport::cache::entry#compressed?()","activesupport::safebuffer#concat()","activesupport::configurable#config()","activesupport::configurable::classmethods#config()","activesupport::configurable::classmethods#config_accessor()","activesupport::configurable::classmethods#configure()","activesupport::inflector#constantize()","string#constantize()","activesupport::multibyte::chars::consumes?()","activesupport::hashwithindifferentaccess#convert_key()","activesupport::hashwithindifferentaccess#convert_key()","activesupport::hashwithindifferentaccess#convert_value()","activesupport::hashwithindifferentaccess#convert_value()","activesupport::cache::entry::create()","activesupport::timezone::create()","activesupport::testing::performance::profiler#create_path_and_open_file()","date::current()","datetime::current()","time::current()","activesupport::xmlmini_libxmlsax::hashbuilder#current_hash()","activesupport::xmlmini_nokogirisax::hashbuilder#current_hash()","activesupport::taggedlogging#current_tags()","process::daemon()","activesupport::inflector#dasherize()","string#dasherize()","numeric#day()","numeric#days()","time::days_in_month()","date#days_to_week_start()","time#days_to_week_start()","kernel#debugger()","activesupport::json::decode()","activesupport::base64::decode64()","base64::decode64()","activesupport::multibyte::chars#decompose()","activesupport::multibyte::unicode#decompose_codepoints()","activesupport::gzip::decompress()","activesupport::inflector#deconstantize()","string#deconstantize()","activesupport::cache::filestore#decrement()","activesupport::cache::memorystore#decrement()","activesupport::cache::nullstore#decrement()","activesupport::cache::store#decrement()","activesupport::messageencryptor#decrypt()","activesupport::messageencryptor#decrypt_and_verify()","hash#deep_dup()","hash#deep_merge()","hash#deep_merge!()","activesupport::hashwithindifferentaccess#default()","activesupport::hashwithindifferentaccess#default()","date#default_inspect()","datetime#default_inspect()","activesupport::callbacks::classmethods#define_callbacks()","module#delegate()","activesupport::cache::store#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::orderedhash#delete()","activesupport::cache::filestore#delete_entry()","activesupport::cache::strategy::localcache::localstore#delete_entry()","activesupport::orderedhash#delete_if()","activesupport::cache::filestore#delete_matched()","activesupport::cache::memorystore#delete_matched()","activesupport::cache::nullstore#delete_matched()","activesupport::cache::store#delete_matched()","activesupport::inflector#demodulize()","string#demodulize()","module#deprecate()","activesupport::deprecation::deprecate_methods()","activesupport::deprecation::deprecated_method_warning()","activesupport::descendantstracker#descendants()","activesupport::descendantstracker::descendants()","activesupport::testing::declarative::describe()","hash#diff()","activesupport::descendantstracker::direct_descendants()","activesupport::descendantstracker#direct_descendants()","activesupport::multibyte::unicode::unicodedatabase::dirname()","activesupport::multibyte::chars#downcase()","activesupport::timewithzone#dst?()","activesupport::hashwithindifferentaccess#dup()","activesupport::hashwithindifferentaccess#dup()","class#duplicable?()","falseclass#duplicable?()","module#duplicable?()","nilclass#duplicable?()","numeric#duplicable?()","object#duplicable?()","symbol#duplicable?()","trueclass#duplicable?()","activesupport::dependencies::watchstack#each()","activesupport::orderedhash#each()","activesupport::orderedhash#each_key()","activesupport::orderedhash#each_pair()","activesupport::orderedhash#each_value()","enumerable#each_with_object()","activesupport::autoload#eager_autoload()","activesupport::autoload::eager_autoload!()","activesupport::dependencies::classcache#empty?()","kernel#enable_warnings()","activesupport::json::encode()","activesupport::json::encoding::encoder#encode()","activesupport::base64::encode64()","base64::encode64()","activesupport::base64::encode64s()","activesupport::json::variable#encode_json()","hash#encode_json()","numeric#encode_json()","string#encode_json()","activesupport::orderedhash#encode_with()","activesupport::safebuffer#encode_with()","activesupport::timewithzone#encode_with()","bigdecimal#encode_with()","string#encoding_aware?()","activesupport::messageencryptor#encrypt()","activesupport::messageencryptor#encrypt_and_sign()","activesupport::xmlmini_nokogirisax::hashbuilder#end_document()","activesupport::xmlmini_nokogirisax::hashbuilder#end_element()","date#end_of_day()","datetime#end_of_day()","time#end_of_day()","date#end_of_month()","time#end_of_month()","date#end_of_quarter()","time#end_of_quarter()","date#end_of_week()","time#end_of_week()","date#end_of_year()","time#end_of_year()","activesupport::json::engine()","activesupport::json::engine=()","activesupport::testing::performance::benchmarker#environment()","activesupport::timewithzone#eql?()","time#eql?()","time#eql_with_coercion()","time#eql_without_coercion()","activesupport::xmlmini_nokogirisax::hashbuilder#error()","activesupport::json::encoding::encoder#escape()","numeric#exabyte()","numeric#exabytes()","hash#except()","hash#except!()","enumerable#exclude?()","string#exclude?()","activesupport::fileupdatechecker#execute()","activesupport::execute_hook()","activesupport::fileupdatechecker#execute_if_updated()","activesupport::cache::store#exist?()","activesupport::cache::expand_cache_key()","activesupport::cache::entry#expired?()","activesupport::cache::entry#expires_at()","activesupport::cache::entry#expires_at=()","activesupport::concern::extended()","activesupport::memoizable::extended()","activesupport::testing::declarative::extended()","hash#extract!()","array#extract_options!()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::orderedhash#extractable_options?()","hash#extractable_options?()","activesupport::cache::store#fetch()","activesupport::hashwithindifferentaccess#fetch()","activesupport::hashwithindifferentaccess#fetch()","array#fifth()","activesupport::multibyte::unicode::unicodedatabase::filename()","activesupport::timezone::find_tzinfo()","time::find_zone()","time::find_zone!()","string#first()","activesupport::bufferedlogger#flush()","activesupport::logsubscriber::testhelper::mocklogger#flush()","activesupport::taggedlogging#flush()","activesupport::logsubscriber::flush_all!()","activesupport::memoizable::instancemethods#flush_cache()","activesupport::logsubscriber::flushable_loggers()","activesupport::testcase::for_tag()","activesupport::inflector#foreign_key()","string#foreign_key()","activesupport::testing::isolation::forking_env?()","activesupport::testing::performance::metrics::amount#format()","activesupport::testing::performance::metrics::digitalinformationunit#format()","activesupport::testing::performance::metrics::time#format()","activesupport::timewithzone#formatted_offset()","activesupport::timezone#formatted_offset()","datetime#formatted_offset()","time#formatted_offset()","numeric#fortnight()","numeric#fortnights()","array#forty_two()","array#fourth()","activesupport::timewithzone#freeze()","activesupport::memoizable::instancemethods#freeze_with_memoizable()","array#from()","string#from()","activesupport::duration#from_now()","numeric#from_now()","hash::from_xml()","activesupport::testing::performance#full_profile_options()","activesupport::testing::performance#full_test_name()","activesupport::timewithzone#future?()","date#future?()","datetime#future?()","time#future?()","activesupport::multibyte::chars#g_length()","activesupport::multibyte::unicode#g_pack()","activesupport::multibyte::unicode#g_unpack()","activesupport::messageverifier#generate()","activesupport::dependencies::classcache#get()","activesupport::timewithzone#getgm()","activesupport::timewithzone#getlocal()","activesupport::timewithzone#getutc()","datetime#getutc()","numeric#gigabyte()","numeric#gigabytes()","activesupport::timewithzone#gmt?()","activesupport::timewithzone#gmt_offset()","activesupport::timewithzone#gmtime()","activesupport::timewithzone#gmtoff()","enumerable#group_by()","erb::util::h()","activesupport::rescuable#handler_for_rescue()","activesupport::hashwithindifferentaccess#has_key?()","activesupport::hashwithindifferentaccess#has_key?()","activesupport::timewithzone#hash()","numeric#hour()","numeric#hours()","erb::util::html_escape()","string#html_safe()","activesupport::safebuffer#html_safe?()","numeric#html_safe?()","object#html_safe?()","activesupport::timewithzone#httpdate()","activesupport::inflector::inflections#human()","activesupport::inflector#humanize()","string#humanize()","nilclass#id()","date#in()","datetime#in()","time#in()","object#in?()","activesupport::multibyte::unicode#in_char_class?()","array#in_groups()","array#in_groups_of()","activesupport::timewithzone#in_time_zone()","datetime#in_time_zone()","time#in_time_zone()","activesupport::hashwithindifferentaccess#include?()","activesupport::hashwithindifferentaccess#include?()","activesupport::multibyte::chars#include?()","test::unit::collector::objectspace#include?()","i18n::railtie::include_fallbacks_module()","range#include_with_range?()","activesupport::concern#included()","activesupport::memoizable::instancemethods::included()","activesupport::testing::isolation::included()","activesupport::cache::filestore#increment()","activesupport::cache::memorystore#increment()","activesupport::cache::nullstore#increment()","activesupport::cache::store#increment()","activesupport::multibyte::chars#index()","enumerable#index_by()","activesupport::inflector#inflections()","activesupport::inheritableoptions#inheritable_copy()","activesupport::descendantstracker#inherited()","i18n::railtie::init_fallbacks()","activesupport::orderedhash#initialize_copy()","activesupport::safebuffer#initialize_copy()","i18n::railtie::initialize_i18n()","string#inquiry()","activesupport::multibyte::chars#insert()","activesupport::orderedhash#inspect()","activesupport::timewithzone#inspect()","date#inspect()","datetime#inspect()","activesupport::inflector::inflections::instance()","module#instance_method_names()","object#instance_variable_names()","activesupport::cache::store::instrument()","activesupport::notifications::instrument()","activesupport::notifications::instrumenter#instrument()","activesupport::cache::store::instrument=()","activesupport::notifications::instrumenter()","activesupport::orderedhash#invert()","activesupport::inflector::inflections#irregular()","activesupport::timewithzone#is_a?()","loaderror#is_missing?()","loaderror#is_missing?()","string#is_utf8?()","activesupport::timewithzone#isdst()","activesupport::timewithzone#iso8601()","date#iso8601()","erb::util::j()","erb::util::json_escape()","activesupport::dependencies::classcache#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::cache::store#key_matcher()","activesupport::orderedhash#keys()","numeric#kilobyte()","numeric#kilobytes()","activesupport::timewithzone#kind_of?()","string#last()","activesupport::bufferedlogger#level()","activesupport::bufferedlogger#level=()","activesupport::multibyte::chars#limit()","activesupport::notifications::fanout#listeners_for()","activesupport::notifications::fanout#listening?()","activesupport::multibyte::chars#ljust()","activesupport::multibyte::unicode::unicodedatabase#load()","activesupport::load_all!()","activesupport::timezone#local()","module#local_constant_names()","module#local_constants()","datetime::local_offset()","time::local_time()","activesupport::timezone#local_to_utc()","activesupport::timewithzone#localtime()","activesupport::logsubscriber::log_subscribers()","activesupport::logsubscriber::testhelper::mocklogger#logged()","activesupport::logsubscriber::logger()","activesupport::cache::lookup_store()","activesupport::multibyte::chars#lstrip()","enumerable#many?()","activesupport::timewithzone#marshal_dump()","activesupport::timewithzone#marshal_load()","module#mattr_accessor()","module#mattr_reader()","module#mattr_writer()","string#mb_chars()","activesupport::testing::performance::metrics::cputime#measure()","activesupport::testing::performance::metrics::gcruns#measure()","activesupport::testing::performance::metrics::gctime#measure()","activesupport::testing::performance::metrics::memory#measure()","activesupport::testing::performance::metrics::objects#measure()","activesupport::testing::performance::metrics::processtime#measure()","activesupport::testing::performance::metrics::time#measure()","activesupport::testing::performance::metrics::usertime#measure()","activesupport::testing::performance::metrics::walltime#measure()","activesupport::testing::performance::metrics::base#measure_mode()","numeric#megabyte()","numeric#megabytes()","activesupport::hashwithindifferentaccess#member?()","activesupport::hashwithindifferentaccess#member?()","activesupport::memoizable#memoize()","activesupport::memoizable::instancemethods#memoize_all()","activesupport::memoizable::memoized_ivar_for()","activesupport::hashwithindifferentaccess#merge()","activesupport::hashwithindifferentaccess#merge()","activesupport::orderedhash#merge()","activesupport::hashwithindifferentaccess#merge!()","activesupport::hashwithindifferentaccess#merge!()","activesupport::orderedhash#merge!()","activesupport::logsubscriber::testhelper::mocklogger#method_missing()","activesupport::multibyte::chars#method_missing()","activesupport::orderedoptions#method_missing()","activesupport::stringinquirer#method_missing()","activesupport::taggedlogging#method_missing()","activesupport::testing::proxytestresult#method_missing()","activesupport::timewithzone#method_missing()","module#method_names()","activesupport::cache::strategy::localcache#middleware()","date#midnight()","datetime#midnight()","time#midnight()","time#minus_with_coercion()","time#minus_without_coercion()","time#minus_without_duration()","numeric#minute()","numeric#minutes()","nameerror#missing_name()","nameerror#missing_name?()","date#monday()","time#monday()","integer#month()","integer#months()","date#months_ago()","time#months_ago()","date#months_since()","time#months_since()","benchmark::ms()","integer#multiple_of?()","activesupport::cache::store#mute()","activesupport::testing::performance::metrics::base#name()","activesupport::timewithzone::name()","qualifiedconstutils::names()","activesupport::hashwithindifferentaccess#nested_under_indifferent_access()","activesupport::hashwithindifferentaccess#nested_under_indifferent_access()","activesupport::orderedhash#nested_under_indifferent_access()","hash#nested_under_indifferent_access()","activesupport::backtracecleaner::new()","activesupport::bufferedlogger::new()","activesupport::cache::entry::new()","activesupport::cache::filestore::new()","activesupport::cache::memcachestore::new()","activesupport::cache::memorystore::new()","activesupport::cache::nullstore::new()","activesupport::cache::store::new()","activesupport::cache::strategy::localcache::localstore::new()","activesupport::dependencies::classcache::new()","activesupport::dependencies::watchstack::new()","activesupport::fileupdatechecker::new()","activesupport::filewatcher::new()","activesupport::filewatcher::backend::new()","activesupport::gzip::stream::new()","activesupport::hashwithindifferentaccess::new()","activesupport::hashwithindifferentaccess::new()","activesupport::inflector::inflections::new()","activesupport::inheritableoptions::new()","activesupport::json::encoding::encoder::new()","activesupport::logsubscriber::testhelper::mocklogger::new()","activesupport::messageencryptor::new()","activesupport::messageverifier::new()","activesupport::multibyte::chars::new()","activesupport::multibyte::unicode::unicodedatabase::new()","activesupport::notifications::event::new()","activesupport::notifications::fanout::new()","activesupport::notifications::instrumenter::new()","activesupport::orderedhash::new()","activesupport::safebuffer::new()","activesupport::safebuffer::safeconcaterror::new()","activesupport::taggedlogging::new()","activesupport::testing::performance::benchmarker::new()","activesupport::testing::performance::metrics::base::new()","activesupport::testing::performance::metrics::cputime::new()","activesupport::testing::performance::performer::new()","activesupport::testing::performance::profiler::new()","activesupport::testing::proxytestresult::new()","activesupport::testing::remoteerror::new()","activesupport::timewithzone::new()","activesupport::timezone::new()","activesupport::timezone::new()","activesupport::dependencies::watchstack#new_constants()","activesupport::hashwithindifferentaccess::new_from_hash_copying_default()","activesupport::hashwithindifferentaccess::new_from_hash_copying_default()","date#next_month()","time#next_month()","date#next_week()","time#next_week()","date#next_year()","time#next_year()","activesupport::multibyte::chars#normalize()","activesupport::multibyte::unicode#normalize()","activesupport::timezone#now()","activesupport::xmlmini_libxmlsax::hashbuilder#on_cdata_block()","activesupport::xmlmini_libxmlsax::hashbuilder#on_characters()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_element()","activesupport::on_load()","activesupport::on_load_all()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_element()","activesupport::bufferedlogger#open_log()","activesupport::json::encoding::encoder#options_for()","activesupport::multibyte::chars#ord()","string#ord()","activesupport::inflector#ordinalize()","integer#ordinalize()","activesupport::safebuffer#original_concat()","activesupport::testing::performance::benchmarker#output_filename()","activesupport::testing::performance::performer#output_filename()","activesupport::testing::performance::profiler#output_filename()","range#overlaps?()","activesupport::inflector#parameterize()","string#parameterize()","module#parent()","module#parent_name()","activesupport::notifications::event#parent_of?()","module#parents()","activesupport::timezone#parse()","activesupport::xmlmini_libxmlsax#parse()","activesupport::xmlmini_nokogirisax#parse()","activesupport::json::parse_error()","uri::parser()","activesupport::timewithzone#past?()","date#past?()","datetime#past?()","time#past?()","loaderror#path()","loaderror#path()","activesupport::testing::pending#pending()","activesupport::timewithzone#period()","activesupport::timezone#period_for_local()","activesupport::timezone#period_for_utc()","numeric#petabyte()","numeric#petabytes()","activesupport::inflector::inflections#plural()","activesupport::inflector#pluralize()","string#pluralize()","float#precisionless_round()","object#presence()","object#present?()","date#prev_month()","time#prev_month()","date#prev_week()","time#prev_week()","date#prev_year()","time#prev_year()","activesupport::memoizable::instancemethods#prime_cache()","activesupport::testing::performance::metrics::base#profile()","activesupport::multibyte::proxy_class()","activesupport::multibyte::proxy_class=()","activesupport::cache::memorystore#prune()","activesupport::cache::memorystore#pruning?()","activesupport::notifications::publish()","activesupport::notifications::fanout#publish()","module#qualified_const_defined?()","module#qualified_const_get()","module#qualified_const_set()","kernel#quietly()","activesupport::basicobject#raise()","qualifiedconstutils::raise_if_absolute()","activesupport::cache::entry#raw_value()","activesupport::cache::store#read()","activesupport::cache::filestore#read_entry()","activesupport::cache::strategy::localcache::localstore#read_entry()","activesupport::cache::memcachestore#read_multi()","activesupport::cache::store#read_multi()","date#readable_inspect()","datetime#readable_inspect()","activesupport::testing::performance::benchmarker#record()","activesupport::testing::performance::profiler#record()","module#redefine_method()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_writer()","activesupport::hashwithindifferentaccess#regular_writer()","activesupport::orderedhash#reject()","activesupport::orderedhash#reject!()","i18n::railtie::reloader()","i18n::railtie::reloader_paths()","activesupport::backtracecleaner#remove_filters!()","module#remove_possible_method()","activesupport::backtracecleaner#remove_silencers!()","activesupport::xmlmini#rename_key()","activesupport::multibyte::unicode#reorder_characters()","activesupport::orderedhash#replace()","activesupport::testing::performance::performer#report()","activesupport::timezone::require_tzinfo()","activesupport::rescuable::classmethods#rescue_from()","activesupport::rescuable#rescue_with_handler()","activesupport::callbacks::classmethods#reset_callbacks()","activesupport::bufferedlogger#respond_to?()","activesupport::multibyte::chars#respond_to?()","activesupport::orderedoptions#respond_to?()","activesupport::timewithzone#respond_to?()","activesupport::multibyte::chars#reverse()","activesupport::hashwithindifferentaccess#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge()","hash#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge!()","activesupport::hashwithindifferentaccess#reverse_merge!()","hash#reverse_merge!()","hash#reverse_update()","activesupport::timewithzone#rfc2822()","date#rfc3339()","activesupport::timewithzone#rfc822()","activesupport::multibyte::chars#rindex()","activesupport::multibyte::chars#rjust()","float#round()","activesupport::multibyte::chars#rstrip()","activesupport::testing::isolation::minitest#run()","activesupport::testing::isolation::testunit#run()","activesupport::testing::performance::benchmarker#run()","activesupport::testing::performance::forclassictestunit#run()","activesupport::testing::performance::forminitest#run()","activesupport::testing::performance::profiler#run()","activesupport::testing::setupandteardown::forclassictestunit#run()","activesupport::testing::setupandteardown::forminitest#run()","activesupport::callbacks#run_callbacks()","activesupport::testing::performance#run_gc()","activesupport::testing::isolation::forking#run_in_isolation()","activesupport::testing::isolation::subprocess#run_in_isolation()","activesupport::run_load_hooks()","activesupport::testing::performance#run_profile()","activesupport::testing::performance::forclassictestunit#run_test()","activesupport::testing::performance::forminitest#run_test()","activesupport::testing::performance#run_warmup()","activesupport::safebuffer#safe_concat()","activesupport::inflector#safe_constantize()","string#safe_constantize()","activesupport::dependencies::classcache#safe_get()","array#sample()","array#second()","numeric#second()","numeric#seconds()","datetime#seconds_since_midnight()","time#seconds_since_midnight()","activesupport::timezone::seconds_to_utc_offset()","activesupport::callbacks::classmethods#set_callback()","activesupport::logsubscriber::testhelper#set_logger()","activesupport::logsubscriber::testhelper#setup()","activesupport::testing::setupandteardown::classmethods#setup()","activesupport::orderedhash#shift()","activesupport::benchmarkable#silence()","activesupport::bufferedlogger#silence()","activesupport::deprecation::silence()","activesupport::taggedlogging#silence()","kernel#silence()","activesupport::cache::store#silence!()","kernel#silence_stream()","kernel#silence_warnings()","activesupport::bufferedlogger::silencer()","activesupport::duration#since()","activesupport::timewithzone#since()","date#since()","datetime#since()","numeric#since()","time#since()","kernel#singleton_class()","activesupport::inflector::inflections#singular()","activesupport::inflector#singularize()","string#singularize()","activesupport::cache::entry#size()","activesupport::multibyte::chars#size()","activesupport::callbacks::classmethods#skip_callback()","activesupport::multibyte::chars#slice()","hash#slice()","hash#slice!()","activesupport::multibyte::chars#split()","array#split()","string#squish()","string#squish!()","activesupport::xmlmini_nokogirisax::hashbuilder#start_document()","activesupport::xmlmini_nokogirisax::hashbuilder#start_element()","activesupport::cache::memcachestore#stats()","range#step_with_blockless()","activesupport::dependencies::classcache#store()","activesupport::hashwithindifferentaccess#store()","activesupport::hashwithindifferentaccess#store()","activesupport::timewithzone#strftime()","base64::strict_encode64()","activesupport::hashwithindifferentaccess#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys()","hash#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys!()","activesupport::hashwithindifferentaccess#stringify_keys!()","hash#stringify_keys!()","activesupport::multibyte::chars#strip()","string#strip_heredoc()","activesupport::notifications::subscribe()","activesupport::notifications::fanout#subscribe()","activesupport::notifications::subscribed()","enumerable#sum()","date#sunday()","time#sunday()","class#superclass_delegating_accessor()","kernel#suppress()","activesupport::hashwithindifferentaccess#symbolize_keys()","activesupport::hashwithindifferentaccess#symbolize_keys()","hash#symbolize_keys()","hash#symbolize_keys!()","activesupport::orderedhash#sync_keys!()","module#synchronize()","activesupport::inflector#tableize()","string#tableize()","activesupport::taggedlogging#tagged()","activesupport::taggedlogging#tags_text()","activesupport::logsubscriber::testhelper#teardown()","activesupport::testing::setupandteardown::classmethods#teardown()","numeric#terabyte()","numeric#terabytes()","activesupport::testing::declarative#test()","array#third()","activesupport::multibyte::chars#tidy_bytes()","activesupport::multibyte::unicode#tidy_bytes()","activesupport::timewithzone#time()","activesupport::testing::performance::profiler#time_with_block()","time::time_with_datetime_fallback()","activesupport::multibyte::chars#titlecase()","string#titlecase()","activesupport::inflector#titleize()","activesupport::multibyte::chars#titleize()","string#titleize()","array#to()","string#to()","activesupport::orderedhash#to_a()","activesupport::timewithzone#to_a()","bigdecimal#to_d()","date#to_date()","datetime#to_date()","string#to_date()","time#to_date()","activesupport::timewithzone#to_datetime()","date#to_datetime()","datetime#to_datetime()","string#to_datetime()","time#to_datetime()","array#to_default_s()","date#to_default_s()","datetime#to_default_s()","range#to_default_s()","time#to_default_s()","activesupport::timewithzone#to_f()","datetime#to_f()","activesupport::timewithzone#to_formatted_s()","array#to_formatted_s()","bigdecimal#to_formatted_s()","date#to_formatted_s()","datetime#to_formatted_s()","range#to_formatted_s()","time#to_formatted_s()","activesupport::hashwithindifferentaccess#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","activesupport::orderedhash#to_hash()","activesupport::timewithzone#to_i()","datetime#to_i()","object#to_json()","hash#to_options()","activesupport::hashwithindifferentaccess#to_options!()","activesupport::hashwithindifferentaccess#to_options!()","hash#to_options!()","activesupport::safebuffer#to_param()","array#to_param()","falseclass#to_param()","hash#to_param()","nilclass#to_param()","object#to_param()","trueclass#to_param()","array#to_query()","hash#to_query()","object#to_query()","activesupport::safebuffer#to_s()","activesupport::timewithzone#to_s()","activesupport::timezone#to_s()","array#to_s()","bigdecimal#to_s()","date#to_s()","datetime#to_s()","range#to_s()","time#to_s()","array#to_sentence()","activesupport::xmlmini#to_tag()","activesupport::timewithzone#to_time()","date#to_time()","datetime#to_time()","string#to_time()","time#to_time()","date#to_time_in_current_zone()","array#to_xml()","hash#to_xml()","activesupport::orderedhash#to_yaml()","activesupport::safebuffer#to_yaml()","activesupport::timewithzone#to_yaml()","bigdecimal#to_yaml()","activesupport::orderedhash#to_yaml_type()","activesupport::timezone#today()","activesupport::timewithzone#today?()","date#today?()","time#today?()","date::tomorrow()","date#tomorrow()","time#tomorrow()","activesupport::inflector#transliterate()","activesupport::filewatcher#trigger()","activesupport::filewatcher::backend#trigger()","string#truncate()","nilclass#try()","object#try()","activesupport::timewithzone#tv_sec()","activesupport::multibyte::unicode#u_unpack()","activesupport::inflector::inflections#uncountable()","activesupport::inflector#underscore()","string#underscore()","object#unescape()","array#uniq_by()","array#uniq_by!()","activesupport::memoizable::instancemethods#unmemoize_all()","activesupport::notifications::unsubscribe()","activesupport::notifications::fanout#unsubscribe()","activesupport::duration#until()","numeric#until()","activesupport::multibyte::chars#upcase()","activesupport::hashwithindifferentaccess#update()","activesupport::hashwithindifferentaccess#update()","activesupport::fileupdatechecker#updated?()","activesupport::timezone::us_zones()","time::use_zone()","activesupport::timewithzone#usec()","activesupport::timewithzone#utc()","datetime#utc()","activesupport::timewithzone#utc?()","datetime#utc?()","activesupport::timewithzone#utc_offset()","activesupport::timezone#utc_offset()","datetime#utc_offset()","time::utc_time()","activesupport::timezone#utc_to_local()","i18n::railtie::validate_fallbacks()","activesupport::cache::entry#value()","activesupport::orderedhash#values()","activesupport::hashwithindifferentaccess#values_at()","activesupport::hashwithindifferentaccess#values_at()","activesupport::messageverifier#verify()","activesupport::logsubscriber::testhelper#wait()","activesupport::notifications::fanout#wait()","activesupport::multibyte::chars::wants?()","activesupport::deprecation::warn()","activesupport::filewatcher#watch()","activesupport::dependencies::watchstack#watch_namespaces()","activesupport::dependencies::watchstack#watching?()","numeric#week()","numeric#weeks()","date#weeks_ago()","time#weeks_ago()","activesupport::json::with_backend()","activesupport::xmlmini#with_backend()","activesupport::testing::performance::metrics::base#with_gc_stats()","activesupport::hashwithindifferentaccess#with_indifferent_access()","activesupport::hashwithindifferentaccess#with_indifferent_access()","hash#with_indifferent_access()","activesupport::cache::strategy::localcache#with_local_cache()","object#with_options()","activesupport::testing::performance::benchmarker#with_output_file()","kernel#with_warnings()","array::wrap()","activesupport::cache::store#write()","activesupport::cache::filestore#write_entry()","activesupport::cache::strategy::localcache::localstore#write_entry()","activesupport::timewithzone#xmlschema()","date#xmlschema()","datetime#xmlschema()","integer#year()","integer#years()","date#years_ago()","time#years_ago()","date#years_since()","time#years_since()","date::yesterday()","date#yesterday()","time#yesterday()","activesupport::timewithzone#zone()","time::zone()","time::zone=()","activesupport::timezone::zones_map()"],"info":[["ActiveSupport","","ActiveSupport.html","","<p>This class has dubious semantics and we only have it so that people can\nwrite <code>params[:key]</code> instead of …\n"],["ActiveSupport::Autoload","","ActiveSupport/Autoload.html","",""],["ActiveSupport::BacktraceCleaner","","ActiveSupport/BacktraceCleaner.html","","<p>Backtraces often include many lines that are not relevant for the context\nunder review. This makes it …\n"],["ActiveSupport::Base64","","ActiveSupport/Base64.html","",""],["ActiveSupport::BasicObject","","ActiveSupport/BasicObject.html","","<p>A class with no predefined methods that behaves similarly to Builder’s\nBlankSlate. Used for proxy classes. …\n"],["ActiveSupport::Benchmarkable","","ActiveSupport/Benchmarkable.html","",""],["ActiveSupport::BufferedLogger","","ActiveSupport/BufferedLogger.html","","<p>Inspired by the buffered logger idea by Ezra\n"],["ActiveSupport::BufferedLogger::Severity","","ActiveSupport/BufferedLogger/Severity.html","",""],["ActiveSupport::Cache","","ActiveSupport/Cache.html","","<p>See ActiveSupport::Cache::Store for documentation.\n"],["ActiveSupport::Cache::Entry","","ActiveSupport/Cache/Entry.html","","<p>Entry that is put into caches. It supports expiration time on entries and\ncan compress values to save …\n"],["ActiveSupport::Cache::FileStore","","ActiveSupport/Cache/FileStore.html","","<p>A cache store implementation which stores everything on the filesystem.\n<p>FileStore implements the Strategy::LocalCache …\n"],["ActiveSupport::Cache::MemCacheStore","","ActiveSupport/Cache/MemCacheStore.html","","<p>A cache store implementation which stores data in Memcached: memcached.org/\n<p>This is currently the most …\n"],["ActiveSupport::Cache::MemoryStore","","ActiveSupport/Cache/MemoryStore.html","","<p>A cache store implementation which stores everything into memory in the\nsame process. If you’re running …\n"],["ActiveSupport::Cache::NullStore","","ActiveSupport/Cache/NullStore.html","","<p>A cache store implementation which doesn’t actually store anything. Useful\nin development and test environments …\n"],["ActiveSupport::Cache::Store","","ActiveSupport/Cache/Store.html","","<p>An abstract cache store class. There are multiple cache store\nimplementations, each having its own additional …\n"],["ActiveSupport::Cache::Strategy","","ActiveSupport/Cache/Strategy.html","",""],["ActiveSupport::Cache::Strategy::LocalCache","","ActiveSupport/Cache/Strategy/LocalCache.html","","<p>Caches that implement LocalCache will be backed by an in-memory cache for\nthe duration of a block. Repeated …\n"],["ActiveSupport::Cache::Strategy::LocalCache::LocalStore","","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html","","<p>Simple memory backed cache. This cache is not thread safe and is intended\nonly for serving as a temporary …\n"],["ActiveSupport::Callbacks","","ActiveSupport/Callbacks.html","","<p>Callbacks are code hooks that are run at key points in an object’s\nlifecycle. The typical use case is …\n"],["ActiveSupport::Callbacks::ClassMethods","","ActiveSupport/Callbacks/ClassMethods.html","",""],["ActiveSupport::Concern","","ActiveSupport/Concern.html","","<p>A typical module looks like this:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">included</span>(<span class=\"ruby-identifier\">base</span>)\n    <span class=\"ruby-identifier\">base</span>.<span class=\"ruby-identifier\">extend</span> <span class=\"ruby-constant\">ClassMethods</span>\n    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveSupport::Configurable","","ActiveSupport/Configurable.html","","<p>Configurable provides a <code>config</code> method to store and retrieve\nconfiguration options as an <code>OrderedHash</code>. …\n"],["ActiveSupport::Configurable::ClassMethods","","ActiveSupport/Configurable/ClassMethods.html","",""],["ActiveSupport::Configurable::Configuration","","ActiveSupport/Configurable/Configuration.html","",""],["ActiveSupport::Dependencies","","ActiveSupport/Dependencies.html","",""],["ActiveSupport::Dependencies::ClassCache","","ActiveSupport/Dependencies/ClassCache.html","",""],["ActiveSupport::Dependencies::WatchStack","","ActiveSupport/Dependencies/WatchStack.html","","<p>The WatchStack keeps a stack of the modules being watched as files are\nloaded. If a file in the process …\n"],["ActiveSupport::Deprecation","","ActiveSupport/Deprecation.html","",""],["ActiveSupport::DescendantsTracker","","ActiveSupport/DescendantsTracker.html","","<p>This module provides an internal implementation to track descendants which\nis faster than iterating through …\n"],["ActiveSupport::Duration","","ActiveSupport/Duration.html","","<p>Provides accurate date and time measurements using Date#advance and\nTime#advance, respectively. It mainly …\n"],["ActiveSupport::FileUpdateChecker","","ActiveSupport/FileUpdateChecker.html","","<p>FileUpdateChecker specifies the API used by Rails to watch files and\ncontrol reloading. The API depends …\n"],["ActiveSupport::FileWatcher","","ActiveSupport/FileWatcher.html","",""],["ActiveSupport::FileWatcher::Backend","","ActiveSupport/FileWatcher/Backend.html","",""],["ActiveSupport::Gzip","","ActiveSupport/Gzip.html","","<p>A convenient wrapper for the zlib standard library that allows\ncompression/decompression of strings with …\n"],["ActiveSupport::Gzip::Stream","","ActiveSupport/Gzip/Stream.html","",""],["ActiveSupport::HashWithIndifferentAccess","","ActiveSupport/HashWithIndifferentAccess.html","",""],["ActiveSupport::Inflector","","ActiveSupport/Inflector.html","","<p>The Inflector transforms words from singular to plural, class names to\ntable names, modularized class …\n"],["ActiveSupport::Inflector::Inflections","","ActiveSupport/Inflector/Inflections.html","","<p>A singleton instance of this class is yielded by Inflector.inflections,\nwhich can then be used to specify …\n"],["ActiveSupport::InheritableOptions","","ActiveSupport/InheritableOptions.html","",""],["ActiveSupport::JSON","","ActiveSupport/JSON.html","",""],["ActiveSupport::JSON::Encoding","","ActiveSupport/JSON/Encoding.html","",""],["ActiveSupport::JSON::Encoding::CircularReferenceError","","ActiveSupport/JSON/Encoding/CircularReferenceError.html","",""],["ActiveSupport::JSON::Encoding::Encoder","","ActiveSupport/JSON/Encoding/Encoder.html","",""],["ActiveSupport::JSON::Variable","","ActiveSupport/JSON/Variable.html","","<p>A string that returns itself as its JSON-encoded form.\n"],["ActiveSupport::LogSubscriber","","ActiveSupport/LogSubscriber.html","","<p>ActiveSupport::LogSubscriber is an object set to consume\nActiveSupport::Notifications with the sole purpose …\n"],["ActiveSupport::LogSubscriber::TestHelper","","ActiveSupport/LogSubscriber/TestHelper.html","","<p>Provides some helpers to deal with testing log subscribers by setting up\nnotifications. Take for instance …\n"],["ActiveSupport::LogSubscriber::TestHelper::MockLogger","","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html","",""],["ActiveSupport::Memoizable","","ActiveSupport/Memoizable.html","",""],["ActiveSupport::Memoizable::InstanceMethods","","ActiveSupport/Memoizable/InstanceMethods.html","",""],["ActiveSupport::MessageEncryptor","","ActiveSupport/MessageEncryptor.html","","<p>MessageEncryptor is a simple way to encrypt values which get stored\nsomewhere you don’t trust.\n<p>The cipher …\n"],["ActiveSupport::MessageEncryptor::InvalidMessage","","ActiveSupport/MessageEncryptor/InvalidMessage.html","",""],["ActiveSupport::MessageVerifier","","ActiveSupport/MessageVerifier.html","","<p><code>MessageVerifier</code> makes it easy to generate and verify messages\nwhich are signed to prevent tampering. ...\n"],["ActiveSupport::MessageVerifier::InvalidSignature","","ActiveSupport/MessageVerifier/InvalidSignature.html","",""],["ActiveSupport::Multibyte","","ActiveSupport/Multibyte.html","",""],["ActiveSupport::Multibyte::Chars","","ActiveSupport/Multibyte/Chars.html","","<p>Chars enables you to work transparently with UTF-8 encoding in the Ruby\nString class without having extensive …\n"],["ActiveSupport::Multibyte::EncodingError","","ActiveSupport/Multibyte/EncodingError.html","","<p>Raised when a problem with the encoding was found.\n"],["ActiveSupport::Multibyte::Unicode","","ActiveSupport/Multibyte/Unicode.html","",""],["ActiveSupport::Multibyte::Unicode::Codepoint","","ActiveSupport/Multibyte/Unicode/Codepoint.html","","<p>Holds data about a codepoint in the Unicode database\n"],["ActiveSupport::Multibyte::Unicode::UnicodeDatabase","","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html","","<p>Holds static data from the Unicode database\n"],["ActiveSupport::Notifications","","ActiveSupport/Notifications.html","","<p>Notifications\n<p>+ActiveSupport::Notifications+ provides an instrumentation API for Ruby.\n<p>Instrumenters\n"],["ActiveSupport::Notifications::Event","","ActiveSupport/Notifications/Event.html","",""],["ActiveSupport::Notifications::Fanout","","ActiveSupport/Notifications/Fanout.html","","<p>This is a default queue implementation that ships with Notifications. It\njust pushes events to all registered …\n"],["ActiveSupport::Notifications::Instrumenter","","ActiveSupport/Notifications/Instrumenter.html","",""],["ActiveSupport::OrderedHash","","ActiveSupport/OrderedHash.html","","<p>The order of iteration over hashes in Ruby 1.8 is undefined. For example,\nyou do not know the order in …\n"],["ActiveSupport::OrderedOptions","","ActiveSupport/OrderedOptions.html","",""],["ActiveSupport::Railtie","","ActiveSupport/Railtie.html","",""],["ActiveSupport::Rescuable","","ActiveSupport/Rescuable.html","","<p>Rescuable module adds support for easier exception handling.\n"],["ActiveSupport::Rescuable::ClassMethods","","ActiveSupport/Rescuable/ClassMethods.html","",""],["ActiveSupport::SafeBuffer","","ActiveSupport/SafeBuffer.html","",""],["ActiveSupport::SafeBuffer::SafeConcatError","","ActiveSupport/SafeBuffer/SafeConcatError.html","",""],["ActiveSupport::StringInquirer","","ActiveSupport/StringInquirer.html","","<p>Wrapping a string in this class gives you a prettier way to test for\nequality. The value returned by …\n"],["ActiveSupport::TaggedLogging","","ActiveSupport/TaggedLogging.html","","<p>Wraps any standard Logger class to provide tagging capabilities. Examples:\n\n<pre>Logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT)) ...</pre>\n"],["ActiveSupport::TestCase","","ActiveSupport/TestCase.html","",""],["ActiveSupport::Testing","","ActiveSupport/Testing.html","",""],["ActiveSupport::Testing::Assertions","","ActiveSupport/Testing/Assertions.html","",""],["ActiveSupport::Testing::Declarative","","ActiveSupport/Testing/Declarative.html","",""],["ActiveSupport::Testing::Isolation","","ActiveSupport/Testing/Isolation.html","",""],["ActiveSupport::Testing::Isolation::Forking","","ActiveSupport/Testing/Isolation/Forking.html","",""],["ActiveSupport::Testing::Isolation::MiniTest","","ActiveSupport/Testing/Isolation/MiniTest.html","",""],["ActiveSupport::Testing::Isolation::Subprocess","","ActiveSupport/Testing/Isolation/Subprocess.html","",""],["ActiveSupport::Testing::Isolation::TestUnit","","ActiveSupport/Testing/Isolation/TestUnit.html","",""],["ActiveSupport::Testing::Pending","","ActiveSupport/Testing/Pending.html","",""],["ActiveSupport::Testing::Performance","","ActiveSupport/Testing/Performance.html","",""],["ActiveSupport::Testing::Performance::Benchmarker","","ActiveSupport/Testing/Performance/Benchmarker.html","",""],["ActiveSupport::Testing::Performance::ForClassicTestUnit","","ActiveSupport/Testing/Performance/ForClassicTestUnit.html","",""],["ActiveSupport::Testing::Performance::ForMiniTest","","ActiveSupport/Testing/Performance/ForMiniTest.html","",""],["ActiveSupport::Testing::Performance::Metrics","","ActiveSupport/Testing/Performance/Metrics.html","",""],["ActiveSupport::Testing::Performance::Metrics::Amount","","ActiveSupport/Testing/Performance/Metrics/Amount.html","",""],["ActiveSupport::Testing::Performance::Metrics::Base","","ActiveSupport/Testing/Performance/Metrics/Base.html","",""],["ActiveSupport::Testing::Performance::Metrics::CpuTime","","ActiveSupport/Testing/Performance/Metrics/CpuTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::DigitalInformationUnit","","ActiveSupport/Testing/Performance/Metrics/DigitalInformationUnit.html","",""],["ActiveSupport::Testing::Performance::Metrics::GcRuns","","ActiveSupport/Testing/Performance/Metrics/GcRuns.html","",""],["ActiveSupport::Testing::Performance::Metrics::GcTime","","ActiveSupport/Testing/Performance/Metrics/GcTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::Memory","","ActiveSupport/Testing/Performance/Metrics/Memory.html","",""],["ActiveSupport::Testing::Performance::Metrics::Objects","","ActiveSupport/Testing/Performance/Metrics/Objects.html","",""],["ActiveSupport::Testing::Performance::Metrics::ProcessTime","","ActiveSupport/Testing/Performance/Metrics/ProcessTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::Time","","ActiveSupport/Testing/Performance/Metrics/Time.html","",""],["ActiveSupport::Testing::Performance::Metrics::UserTime","","ActiveSupport/Testing/Performance/Metrics/UserTime.html","",""],["ActiveSupport::Testing::Performance::Metrics::WallTime","","ActiveSupport/Testing/Performance/Metrics/WallTime.html","",""],["ActiveSupport::Testing::Performance::Performer","","ActiveSupport/Testing/Performance/Performer.html","",""],["ActiveSupport::Testing::Performance::Profiler","","ActiveSupport/Testing/Performance/Profiler.html","","<p>overridden by each implementation\n"],["ActiveSupport::Testing::ProxyTestResult","","ActiveSupport/Testing/ProxyTestResult.html","",""],["ActiveSupport::Testing::RemoteError","","ActiveSupport/Testing/RemoteError.html","",""],["ActiveSupport::Testing::SetupAndTeardown","","ActiveSupport/Testing/SetupAndTeardown.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ClassMethods","","ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ForClassicTestUnit","","ActiveSupport/Testing/SetupAndTeardown/ForClassicTestUnit.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","","ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html","",""],["ActiveSupport::TimeWithZone","","ActiveSupport/TimeWithZone.html","","<p>A Time-like class that can represent a time in any time zone. Necessary\nbecause standard Ruby Time instances …\n"],["ActiveSupport::TimeZone","","ActiveSupport/TimeZone.html","",""],["ActiveSupport::XmlMini","","ActiveSupport/XmlMini.html","","<p>XmlMini\n<p>To use the much faster libxml parser:\n\n<pre>gem 'libxml-ruby', '=0.9.7'\nXmlMini.backend = 'LibXML'</pre>\n"],["ActiveSupport::XmlMini_LibXMLSAX","","ActiveSupport/XmlMini_LibXMLSAX.html","",""],["ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["ActiveSupport::XmlMini_NokogiriSAX","","ActiveSupport/XmlMini_NokogiriSAX.html","",""],["ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["Array","","Array.html","",""],["Base64","","Base64.html","","<p>The Base64 module isn’t available in earlier versions of Ruby 1.9.\n"],["Benchmark","","Benchmark.html","",""],["BigDecimal","","BigDecimal.html","",""],["Class","","Class.html","","<p>Extends the class object with class and instance accessors for class\nattributes, just like the native …\n"],["Date","","Date.html","",""],["DateTime","","DateTime.html","",""],["ERB","","ERB.html","",""],["ERB::Util","","ERB/Util.html","",""],["Enumerable","","Enumerable.html","",""],["FalseClass","","FalseClass.html","",""],["File","","File.html","",""],["Float","","Float.html","",""],["Hash","","Hash.html","",""],["I18n","","I18n.html","",""],["I18n::Railtie","","I18n/Railtie.html","",""],["IO","","IO.html","",""],["Integer","","Integer.html","",""],["Kernel","","Kernel.html","",""],["LoadError","","LoadError.html","",""],["Logger","","Logger.html","",""],["Logger::SimpleFormatter","","Logger/SimpleFormatter.html","","<p>Simple formatter which only displays the message.\n"],["Module","","Module.html","","<p>Extends the API for constants to be able to deal with qualified names.\nArguments are assumed to be relative …\n"],["NameError","","NameError.html","",""],["NilClass","","NilClass.html","","<p>Extensions to <code>nil</code> which allow for more helpful error messages\nfor people who are new to Rails.\n<p>NilClass#id …\n"],["Numeric","","Numeric.html","",""],["Object","","Object.html","",""],["Object::HashWithIndifferentAccess","","ActiveSupport/HashWithIndifferentAccess.html","",""],["Object::MissingSourceFile","","LoadError.html","",""],["Process","","Process.html","",""],["QualifiedConstUtils","","QualifiedConstUtils.html","",""],["Range","","Range.html","",""],["Regexp","","Regexp.html","",""],["String","","String.html","","<p>String inflections define new methods on the String class to transform\nnames for different purposes. …\n"],["Symbol","","Symbol.html","",""],["Test","","Test.html","",""],["Test::Unit","","Test/Unit.html","",""],["Test::Unit::Collector","","Test/Unit/Collector.html","",""],["Test::Unit::Collector::ObjectSpace","","Test/Unit/Collector/ObjectSpace.html","",""],["Time","","Time.html","",""],["TrueClass","","TrueClass.html","",""],["URI","","URI.html","",""],["+","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-2B","(other)","<p>Adds another Duration or a Numeric to this Duration. Numeric values are\ntreated as seconds.\n"],["+","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-2B","(other)","<p>Returns a new Chars object containing the <em>other</em> object\nconcatenated to the string.\n<p>Example:\n\n<pre>('Café'.mb_chars ...</pre>\n"],["+","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-2B","(other)",""],["+","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-2B","(other)",""],["-","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-2D","(other)","<p>Subtracts another Duration or a Numeric from this Duration. Numeric values\nare treated as seconds.\n"],["-","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-2D","(other)",""],["-","Time","Time.html#method-i-2D","(other)",""],["<<","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-3C-3C","(value)",""],["<=>","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-3C-3D-3E","(other)","<p>Returns -1, 0, or 1, depending on whether the Chars object is to be sorted\nbefore, equal or after the …\n"],["<=>","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-3C-3D-3E","(other)","<p>Use the time in UTC for comparisons.\n"],["<=>","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-3C-3D-3E","(zone)","<p>Compare this time zone to the parameter. The two are compared first on\ntheir offsets, and then by name. …\n"],["<=>","DateTime","DateTime.html#method-i-3C-3D-3E","(other)","<p>Layers additional behavior on DateTime#&lt;=&gt; so that Time and\nActiveSupport::TimeWithZone instances …\n"],["<=>","Time","Time.html#method-i-3C-3D-3E","(other)",""],["==","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-3D-3D","(other)","<p>Returns true if <code>other</code> is also a Duration instance with the\nsame <code>value</code>, or if <code>other == value</code>.\n"],["===","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-3D-3D-3D","(other)",""],["===","Time","Time.html#method-c-3D-3D-3D","(other)","<p>Overriding case equality method so that it returns true for\nActiveSupport::TimeWithZone instances\n"],["=~","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-3D-7E","(other)","<p>Like <code>String#=~</code> only it returns the character offset (in\ncodepoints) instead of the byte offset.\n<p>Example: …\n"],["=~","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-3D-7E","(re)","<p>Compare #name and TZInfo identifier to a supplied regexp, returning true if\na match is found.\n"],[">>","Date","Date.html#method-i-3E-3E","(n)","<p>Backported from 1.9. The one in 1.8 leads to incorrect next_month and\nfriends for dates where the calendar …\n"],["[]","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-5B-5D","(*args)",""],["[]","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-c-5B-5D","(*args)",""],["[]","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-5B-5D","(*args)",""],["[]","ActiveSupport::Testing::Performance::Metrics","ActiveSupport/Testing/Performance/Metrics.html#method-c-5B-5D","(name)",""],["[]","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-5B-5D","(arg)","<p>Locate a specific time zone object. If the argument is a string, it is\ninterpreted to mean the name of …\n"],["[]=","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:key] = &quot;value&quot;</pre>\n"],["[]=","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:key] = &quot;value&quot;</pre>\n"],["[]=","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-5B-5D-3D","(*args)","<p>Like <code>String#[]=</code>, except instead of byte offsets you specify\ncharacter offsets.\n<p>Example:\n\n<pre>s = &quot;Müller&quot;\ns.mb_chars[2] ...</pre>\n"],["[]=","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-5B-5D-3D","(key, value)",""],["__callback_runner_name","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-__callback_runner_name","(key, kind)",""],["__replay__","ActiveSupport::Testing::ProxyTestResult","ActiveSupport/Testing/ProxyTestResult.html#method-i-__replay__","(result)",""],["__reset_runner","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-__reset_runner","(symbol)",""],["_dasherize","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-_dasherize","(key)",""],["_dump","Time","Time.html#method-i-_dump","(*args)",""],["_dump_without_utc_flag","Time","Time.html#method-i-_dump_without_utc_flag","(*args)",""],["_dump_without_zone","Time","Time.html#method-i-_dump_without_zone","(*args)",""],["_get","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-_get","(key)",""],["_load","Time","Time.html#method-c-_load","(marshaled_time)",""],["_load_without_utc_flag","Time","Time.html#method-c-_load_without_utc_flag","(marshaled_time)",""],["_load_without_zone","Time","Time.html#method-c-_load_without_zone","(marshaled_time)",""],["_original_to_s","BigDecimal","BigDecimal.html#method-i-_original_to_s","(format = DEFAULT_STRING_FORMAT)",""],["_parse_file","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-_parse_file","(file, entity)",""],["_run_class_setup","ActiveSupport::Testing::Isolation","ActiveSupport/Testing/Isolation.html#method-i-_run_class_setup","()",""],["acronym","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-acronym","(word)","<p>Specifies a new acronym. An acronym must be specified as it will appear in\na camelized string.  An underscore …\n"],["acts_like?","Object","Object.html#method-i-acts_like-3F","(duck)","<p>A duck-type assistant method. For example, Active Support extends Date to\ndefine an acts_like_date? method, …\n"],["acts_like_date?","Date","Date.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_date?","DateTime","DateTime.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_string?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\nObject#acts_like?.\n"],["acts_like_string?","String","String.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\n<code>Object#acts_like?</code>.\n"],["acts_like_time?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-acts_like_time-3F","()","<p>So that <code>self</code> <code>acts_like?(:time)</code>.\n"],["acts_like_time?","DateTime","DateTime.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["acts_like_time?","Time","Time.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["add","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-add","(severity, message = nil, progname = nil, &block)",""],["add","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-i-add","(severity, message = nil, progname = nil, &block)",""],["add_error","ActiveSupport::Testing::ProxyTestResult","ActiveSupport/Testing/ProxyTestResult.html#method-i-add_error","(e)",""],["add_filter","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-add_filter","(&block)","<p>Adds a filter from the block provided. Each line in the backtrace will be\nmapped against this filter. …\n"],["add_silencer","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-add_silencer","(&block)","<p>Adds a silencer from the block provided. If the silencer returns true for a\ngiven line, it will be excluded …\n"],["add_whiner","NilClass","NilClass.html#method-c-add_whiner","(klass)",""],["advance","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-advance","(options)",""],["advance","Date","Date.html#method-i-advance","(options)","<p>Provides precise Date calculations for years, months, and days. The\n<code>options</code> parameter takes a hash with …\n"],["advance","DateTime","DateTime.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["advance","Time","Time.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["ago","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-ago","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the past as this Duration\nrepresents.\n"],["ago","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-ago","(other)",""],["ago","Date","Date.html#method-i-ago","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["ago","DateTime","DateTime.html#method-i-ago","(seconds)","<p>Returns a new DateTime representing the time a number of seconds ago Do not\nuse this method in combination …\n"],["ago","Numeric","Numeric.html#method-i-ago","(time = ::Time.current)","<p>Reads best without arguments:  10.minutes.ago\n"],["ago","Time","Time.html#method-i-ago","(seconds)","<p>Returns a new Time representing the time a number of seconds ago, this is\nbasically a wrapper around …\n"],["alias_attribute","Module","Module.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes, which includes getter, setter,\nand query methods.\n<p>Example: …\n"],["alias_method_chain","Module","Module.html#method-i-alias_method_chain","(target, feature)","<p>Encapsulates the common pattern of:\n\n<pre>alias_method :foo_without_feature, :foo\nalias_method :foo, :foo_with_feature</pre>\n"],["all","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-all","()","<p>Return an array of all TimeZone objects. There are multiple TimeZone\nobjects per time zone, in many cases, …\n"],["all_day","Time","Time.html#method-i-all_day","()","<p>Returns a Range representing the whole day of the current time.\n"],["all_month","Time","Time.html#method-i-all_month","()","<p>Returns a Range representing the whole month of the current time.\n"],["all_quarter","Time","Time.html#method-i-all_quarter","()","<p>Returns a Range representing the whole quarter of the current time.\n"],["all_week","Time","Time.html#method-i-all_week","(start_day = :monday)","<p>Returns a Range representing the whole week of the current time. Week\nstarts on start_day (default is …\n"],["all_year","Time","Time.html#method-i-all_year","()","<p>Returns a Range representing the whole year of the current time.\n"],["anonymous?","Module","Module.html#method-i-anonymous-3F","()","<p>A module may or may not have a name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>; <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">M</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n\n<span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">Module</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; &quot;&quot;</span>\n</pre>\n<p>A module …\n"],["append_features","ActiveSupport::Concern","ActiveSupport/Concern.html#method-i-append_features","(base)",""],["as_json","ActiveSupport::JSON::Encoding::Encoder","ActiveSupport/JSON/Encoding/Encoder.html#method-i-as_json","(value, use_options = true)","<p>like encode, but only calls as_json, without encoding to string\n"],["as_json","ActiveSupport::JSON::Variable","ActiveSupport/JSON/Variable.html#method-i-as_json","(options = nil)",""],["as_json","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-as_json","(options = nil)","<p>Coerces time to a string for JSON encoding. The default format is ISO 8601.\nYou can get %Y/%m/%d %H:%M:% …\n"],["as_json","BigDecimal","BigDecimal.html#method-i-as_json","(options = nil)","<p>A BigDecimal would be naturally represented as a JSON number. Most\nlibraries, however, parse non-integer …\n"],["as_json","FalseClass","FalseClass.html#method-i-as_json","(options = nil)",""],["as_json","NilClass","NilClass.html#method-i-as_json","(options = nil)",""],["as_json","Numeric","Numeric.html#method-i-as_json","(options = nil)",""],["as_json","Regexp","Regexp.html#method-i-as_json","(options = nil)",""],["as_json","String","String.html#method-i-as_json","(options = nil)",""],["as_json","Symbol","Symbol.html#method-i-as_json","(options = nil)",""],["as_json","TrueClass","TrueClass.html#method-i-as_json","(options = nil)",""],["assert_blank","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_blank","(object, message=nil)","<p>Test if an expression is blank. Passes if object.blank? is true.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_blank</span> [] <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["assert_difference","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_difference","(expression, difference = 1, message = nil, &block)","<p>Test numeric difference between the return value of an expression as a\nresult of what is evaluated in …\n"],["assert_no_difference","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_no_difference","(expression, message = nil, &block)","<p>Assertion that the numeric result of evaluating an expression is not\nchanged before and after invoking …\n"],["assert_present","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_present","(object, message=nil)","<p>Test if an expression is not blank. Passes if object.present? is true.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_present</span> {:<span class=\"ruby-identifier\">data</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'x'</span> } <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_valid_keys","Hash","Hash.html#method-i-assert_valid_keys","(*valid_keys)","<p>Validate all keys in a hash match *valid keys, raising ArgumentError on a\nmismatch. Note that keys are …\n"],["at","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-at","(secs)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from number of seconds …\n"],["at","String","String.html#method-i-at","(position)","<p>Returns the character at the <code>position</code> treating the string as\nan array (where 0 is the first character). …\n"],["at_beginning_of_day","Date","Date.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","DateTime","DateTime.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","Time","Time.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_month","Date","Date.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_month","Time","Time.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_quarter","Date","Date.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_quarter","Time","Time.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_week","Date","Date.html#method-i-at_beginning_of_week","(start_day = :monday)",""],["at_beginning_of_week","Time","Time.html#method-i-at_beginning_of_week","(start_day = :monday)",""],["at_beginning_of_year","Date","Date.html#method-i-at_beginning_of_year","()",""],["at_beginning_of_year","Time","Time.html#method-i-at_beginning_of_year","()",""],["at_end_of_month","Date","Date.html#method-i-at_end_of_month","()",""],["at_end_of_month","Time","Time.html#method-i-at_end_of_month","()",""],["at_end_of_quarter","Date","Date.html#method-i-at_end_of_quarter","()",""],["at_end_of_quarter","Time","Time.html#method-i-at_end_of_quarter","()",""],["at_end_of_week","Date","Date.html#method-i-at_end_of_week","(start_day = :monday)",""],["at_end_of_week","Time","Time.html#method-i-at_end_of_week","(start_day = :monday)",""],["at_end_of_year","Date","Date.html#method-i-at_end_of_year","()",""],["at_end_of_year","Time","Time.html#method-i-at_end_of_year","()",""],["at_midnight","Date","Date.html#method-i-at_midnight","()",""],["at_midnight","DateTime","DateTime.html#method-i-at_midnight","()",""],["at_midnight","Time","Time.html#method-i-at_midnight","()",""],["atomic_write","File","File.html#method-c-atomic_write","(file_name, temp_dir = Dir.tmpdir)","<p>Write to a file atomically. Useful for situations where you don’t want\nother processes or threads to …\n"],["attach_to","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-attach_to","(namespace, log_subscriber=new, notifier=ActiveSupport::Notifications)",""],["attr_internal","Module","Module.html#method-i-attr_internal","(*attrs)",""],["attr_internal_accessor","Module","Module.html#method-i-attr_internal_accessor","(*attrs)","<p>Declares an attribute reader and writer backed by an internally-named\ninstance variable.\n"],["attr_internal_reader","Module","Module.html#method-i-attr_internal_reader","(*attrs)","<p>Declares an attribute reader backed by an internally-named instance\nvariable.\n"],["attr_internal_writer","Module","Module.html#method-i-attr_internal_writer","(*attrs)","<p>Declares an attribute writer backed by an internally-named instance\nvariable.\n"],["auto_flushing=","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-auto_flushing-3D","(period)","<p>Set the auto-flush period. Set to true to flush after every log message, to\nan integer to flush every …\n"],["autoload","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoload","(const_name, path = @@at_path)",""],["autoload_at","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoload_at","(path)",""],["autoload_under","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoload_under","(path)",""],["autoloads","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoloads","()",""],["backend","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-backend","()",""],["backend=","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-backend-3D","(name)",""],["backend=","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-backend-3D","(name)",""],["beginning_of_day","Date","Date.html#method-i-beginning_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["beginning_of_day","DateTime","DateTime.html#method-i-beginning_of_day","()","<p>Returns a new DateTime representing the start of the day (0:00)\n"],["beginning_of_day","Time","Time.html#method-i-beginning_of_day","()","<p>Returns a new Time representing the start of the day (0:00)\n"],["beginning_of_month","Date","Date.html#method-i-beginning_of_month","()","<p>Returns a new ; DateTime objects will have time set to 0:00DateTime\nrepresenting the start of the month …\n"],["beginning_of_month","Time","Time.html#method-i-beginning_of_month","()","<p>Returns a new Time representing the start of the month (1st of the month,\n0:00)\n"],["beginning_of_quarter","Date","Date.html#method-i-beginning_of_quarter","()","<p>Returns a new Date/DateTime representing the start of the quarter (1st of\njanuary, april, july, october; …\n"],["beginning_of_quarter","Time","Time.html#method-i-beginning_of_quarter","()","<p>Returns  a new Time representing the start of the quarter (1st of january,\napril, july, october, 0:00) …\n"],["beginning_of_week","Date","Date.html#method-i-beginning_of_week","(start_day = :monday)","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the\nstart of this week. Week is assumed to start on <code>start_day</code> …\n"],["beginning_of_week","Time","Time.html#method-i-beginning_of_week","(start_day = :monday)","<p>Returns a new Time representing the “start” of this week, week starts on\nstart_day (default …\n"],["beginning_of_year","Date","Date.html#method-i-beginning_of_year","()","<p>Returns a new Date/DateTime representing the start of the year (1st of\njanuary; DateTime objects will …\n"],["beginning_of_year","Time","Time.html#method-i-beginning_of_year","()","<p>Returns a new Time representing the start of the year (1st of january,\n0:00)\n"],["behavior","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-behavior","()","<p>Returns the set behavior or if one isn’t set, defaults to\n<code>:stderr</code>\n"],["behavior=","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-behavior-3D","(behavior)","<p>Sets the behavior to the specified value. Can be a single value or an\narray.\n<p>Examples\n\n<pre>ActiveSupport::Deprecation.behavior ...</pre>\n"],["benchmark","ActiveSupport::Benchmarkable","ActiveSupport/Benchmarkable.html#method-i-benchmark","(message = \"Benchmarking\", options = {})","<p>Allows you to measure the execution time of a block in a template and\nrecords the result to the log. …\n"],["benchmark","ActiveSupport::Testing::Performance::Metrics::Base","ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-benchmark","()",""],["between?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-between-3F","(min, max)",""],["blank?","FalseClass","FalseClass.html#method-i-blank-3F","()","<p><code>false</code> is blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["blank?","NilClass","NilClass.html#method-i-blank-3F","()","<p><code>nil</code> is blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["blank?","Object","Object.html#method-i-blank-3F","()","<p>An object is blank if it’s false, empty, or a whitespace string. For\nexample, “”, “   …\n"],["blank?","String","String.html#method-i-blank-3F","()","<p>A string is blank if it’s empty or contains whitespaces only:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;&quot;</span>.<span class=\"ruby-identifier\">blank?</span>                 <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-string\">&quot;   ...\n</span></pre>\n"],["blank?","TrueClass","TrueClass.html#method-i-blank-3F","()","<p><code>true</code> is not blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n</pre>\n"],["breakpoint","Kernel","Kernel.html#method-i-breakpoint","()",""],["build_mem_cache","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-c-build_mem_cache","(*addresses)",""],["byte","Numeric","Numeric.html#method-i-byte","()",""],["bytes","Numeric","Numeric.html#method-i-bytes","()","<p>Enables the use of byte calculations and declarations, like 45.bytes +\n2.6.megabytes\n"],["call","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-call","(message, *args)",""],["call","Logger::SimpleFormatter","Logger/SimpleFormatter.html#method-i-call","(severity, timestamp, progname, msg)","<p>This method is invoked when a log event occurs\n"],["camelcase","String","String.html#method-i-camelcase","(first_letter = :upper)",""],["camelize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-camelize","(term, uppercase_first_letter = true)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to <code>camelize</code> is set to <code>:lower</code> …\n"],["camelize","String","String.html#method-i-camelize","(first_letter = :upper)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to camelize is set to <code>:lower</code> …\n"],["capitalize","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-capitalize","()","<p>Converts the first character to uppercase and the remainder to lowercase.\n<p>Example:\n\n<pre>'über'.mb_chars.capitalize.to_s ...</pre>\n"],["capture","Kernel","Kernel.html#method-i-capture","(stream)","<p>Captures the given stream and returns it:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">stream</span> = <span class=\"ruby-identifier\">capture</span>(:<span class=\"ruby-identifier\">stdout</span>) { <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-string\">&quot;Cool&quot;</span> }\n<span class=\"ruby-identifier\">stream</span> <span class=\"ruby-comment\"># =&gt; &quot;Cool\\n&quot;</span>\n</pre>\n"],["cattr_accessor","Class","Class.html#method-i-cattr_accessor","(*syms, &blk)",""],["cattr_reader","Class","Class.html#method-i-cattr_reader","(*syms)",""],["cattr_writer","Class","Class.html#method-i-cattr_writer","(*syms)",""],["cdata_block","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-cdata_block","(string)",""],["center","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-center","(integer, padstr=' ')","<p>Works just like <code>String#center</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.center(8).to_s ...</pre>\n"],["change","Date","Date.html#method-i-change","(options)","<p>Returns a new Date where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","DateTime","DateTime.html#method-i-change","(options)","<p>Returns a new DateTime where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","Time","Time.html#method-i-change","(options)","<p>Returns a new Time where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["characters","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-characters","(string)",""],["civil_from_format","DateTime","DateTime.html#method-c-civil_from_format","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0)",""],["class_attribute","Class","Class.html#method-i-class_attribute","(*attrs)","<p>Declare a class-level attribute whose value is inheritable by subclasses.\nSubclasses can change their …\n"],["class_eval","Kernel","Kernel.html#method-i-class_eval","(*args, &block)","<p>class_eval on an object acts like singleton_class.class_eval.\n"],["classify","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-classify","(table_name)","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["classify","String","String.html#method-i-classify","()","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["clean","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-clean","(backtrace, kind = :silent)","<p>Returns the backtrace after all filters and silencers have been run against\nit. Filters run first, then …\n"],["cleanup","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-cleanup","(options = nil)","<p>Cleanup the cache by removing expired entries.\n<p>Options are passed to the underlying cache implementation. …\n"],["clear","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-clear","(options = nil)","<p>Clear the entire cache on all memcached servers. This method should be used\nwith care when shared cache …\n"],["clear","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-clear","(options = nil)","<p>Clear the entire cache. Be careful with this method since it could affect\nother processes if shared cache …\n"],["clear","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-c-clear","()",""],["clear","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-clear","(scope = :all)","<p>Clears the loaded inflections within a given scope (default is\n<code>:all</code>). Give the scope as a symbol of the …\n"],["clear","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-clear","()",""],["clear!","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-clear-21","()",""],["clone_empty","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-clone_empty","()",""],["close","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-close","()",""],["close","ActiveSupport::Gzip::Stream","ActiveSupport/Gzip/Stream.html#method-i-close","()",""],["color","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-color","(text, color, bold=false)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to true, it also …\n"],["comparable_time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-comparable_time","()",""],["compare_with_coercion","Time","Time.html#method-i-compare_with_coercion","(other)","<p>Layers additional behavior on Time#&lt;=&gt; so that DateTime and\nActiveSupport::TimeWithZone instances …\n"],["compare_without_coercion","Time","Time.html#method-i-compare_without_coercion","(other)",""],["compile_methods!","ActiveSupport::Configurable::Configuration","ActiveSupport/Configurable/Configuration.html#method-i-compile_methods-21","()",""],["compile_methods!","ActiveSupport::Configurable::Configuration","ActiveSupport/Configurable/Configuration.html#method-c-compile_methods-21","(keys)","<p>compiles reader methods so we don’t have to go through method_missing\n"],["compose","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-compose","()","<p>Performs composition on all the characters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'é'</span>.<span class=\"ruby-identifier\">length</span>                       <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">'é'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">compose</span>.<span class=\"ruby-identifier\">to_s</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compose_codepoints","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-compose_codepoints","(codepoints)","<p>Compose decomposed characters to the composed form.\n"],["compress","ActiveSupport::Gzip","ActiveSupport/Gzip.html#method-c-compress","(source)","<p>Compresses a string using gzip.\n"],["compressed?","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-compressed-3F","()",""],["concat","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-concat","(value)",""],["config","ActiveSupport::Configurable","ActiveSupport/Configurable.html#method-i-config","()","<p>Reads and writes attributes from a configuration <code>OrderedHash</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'active_support/configurable'</span>\n\n<span class=\"ruby-keyword\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["config","ActiveSupport::Configurable::ClassMethods","ActiveSupport/Configurable/ClassMethods.html#method-i-config","()",""],["config_accessor","ActiveSupport::Configurable::ClassMethods","ActiveSupport/Configurable/ClassMethods.html#method-i-config_accessor","(*names)","<p>Allows you to add shortcut so that you don’t have to refer to attribute\nthrough config. Also look at …\n"],["configure","ActiveSupport::Configurable::ClassMethods","ActiveSupport/Configurable/ClassMethods.html#method-i-configure","()",""],["constantize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;Module&quot;</span>.<span class=\"ruby-identifier\">constantize</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["constantize","String","String.html#method-i-constantize","()","<p><code>constantize</code> tries to find a declared constant with the name\nspecified in the string. It raises a NameError ...\n"],["consumes?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-c-consumes-3F","(string)","<p>Returns <code>true</code> when the proxy class can handle the string.\nReturns <code>false</code> otherwise.\n"],["convert_key","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_value","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value)",""],["convert_value","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value)",""],["create","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-c-create","(raw_value, created_at, options = {})","<p>Create an entry with internal attributes set. This method is intended to be\nused by implementations that …\n"],["create","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-create","(name, utc_offset = nil, tzinfo = nil)",""],["create_path_and_open_file","ActiveSupport::Testing::Performance::Profiler","ActiveSupport/Testing/Performance/Profiler.html#method-i-create_path_and_open_file","(printer_name)",""],["current","Date","Date.html#method-c-current","()","<p>Returns Time.zone.today when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns Date.today …\n"],["current","DateTime","DateTime.html#method-c-current","()","<p>Returns <code>Time.zone.now.to_datetime</code> when <code>Time.zone</code>\nor <code>config.time_zone</code> are set, otherwise returns\n<code>Time.now</code> …\n"],["current","Time","Time.html#method-c-current","()","<p>Returns <code>Time.zone.now</code> when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns\n<code>Time.now</code>.\n"],["current_hash","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-current_hash","()",""],["current_hash","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-current_hash","()",""],["current_tags","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-i-current_tags","()",""],["daemon","Process","Process.html#method-c-daemon","(nochdir = nil, noclose = nil)",""],["dasherize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-dasherize","(underscored_word)","<p>Replaces underscores with dashes in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;puni_puni&quot;</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["dasherize","String","String.html#method-i-dasherize","()","<p>Replaces underscores with dashes in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;puni_puni&quot;</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["day","Numeric","Numeric.html#method-i-day","()",""],["days","Numeric","Numeric.html#method-i-days","()",""],["days_in_month","Time","Time.html#method-c-days_in_month","(month, year = now.year)","<p>Return the number of days in the given month. If no year is specified, it\nwill use the current year. …\n"],["days_to_week_start","Date","Date.html#method-i-days_to_week_start","(start_day = :monday)","<p>Returns number of days to start of this week. Week is assumed to start on\n<code>start_day</code>, default is <code>:monday</code> …\n"],["days_to_week_start","Time","Time.html#method-i-days_to_week_start","(start_day = :monday)","<p>Returns number of days to start of this week, week starts on start_day\n(default is :monday).\n"],["debugger","Kernel","Kernel.html#method-i-debugger","()","<p>Starts a debugging session if ruby-debug has been loaded (call rails server\n–debugger to do load it). …\n"],["decode","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-decode","(json, options ={})",""],["decode64","ActiveSupport::Base64","ActiveSupport/Base64.html#method-c-decode64","(value)",""],["decode64","Base64","Base64.html#method-c-decode64","(data)","<p>Decodes a base 64 encoded string to its original representation.\n\n<pre>ActiveSupport::Base64.decode64(&quot;T3JpZ2luYWwgdW5lbmNvZGVkIHN0cmluZw==&quot;) ...</pre>\n"],["decompose","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-decompose","()","<p>Performs canonical decomposition on all the characters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'é'</span>.<span class=\"ruby-identifier\">length</span>                         <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["decompose_codepoints","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-decompose_codepoints","(type, codepoints)","<p>Decompose composed characters to the decomposed form.\n"],["decompress","ActiveSupport::Gzip","ActiveSupport/Gzip.html#method-c-decompress","(source)","<p>Decompresses a gzipped string.\n"],["deconstantize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-deconstantize","(path)","<p>Removes the rightmost segment from the constant expression in the string:\n\n<pre>&quot;Net::HTTP&quot;.deconstantize   ...</pre>\n"],["deconstantize","String","String.html#method-i-deconstantize","()","<p>Removes the rightmost segment from the constant expression in the string.\n\n<pre>&quot;Net::HTTP&quot;.deconstantize   ...</pre>\n"],["decrement","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-decrement","(name, amount = 1, options = nil)",""],["decrement","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrement an integer value in the cache.\n"],["decrement","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-decrement","(name, amount = 1, options = nil)",""],["decrement","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],["decrypt","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-decrypt","(value)",""],["decrypt_and_verify","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-decrypt_and_verify","(value)","<p>Decrypt and verify a message. We need to verify the message in order to\navoid padding attacks. Reference: …\n"],["deep_dup","Hash","Hash.html#method-i-deep_dup","()","<p>Returns a deep copy of hash.\n"],["deep_merge","Hash","Hash.html#method-i-deep_merge","(other_hash)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively.\n"],["deep_merge!","Hash","Hash.html#method-i-deep_merge-21","(other_hash)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively. Modifies the receiver in place.\n"],["default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default_inspect","Date","Date.html#method-i-default_inspect","()",""],["default_inspect","DateTime","DateTime.html#method-i-default_inspect","()",""],["define_callbacks","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-define_callbacks","(*callbacks)","<p>Define sets of events in the object lifecycle that support callbacks.\n\n<pre>define_callbacks :validate\ndefine_callbacks ...</pre>\n"],["delegate","Module","Module.html#method-i-delegate","(*methods)","<p>Provides a delegate class method to easily expose contained objects’\nmethods as your own. Pass one or …\n"],["delete","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-delete","(name, options = nil)","<p>Deletes an entry in the cache. Returns <code>true</code> if an entry is\ndeleted.\n<p>Options are passed to the underlying …\n"],["delete","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes a specified key from the hash.\n"],["delete","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes a specified key from the hash.\n"],["delete","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-delete","(key)",""],["delete_entry","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-delete_entry","(key, options)",""],["delete_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-delete_entry","(key, options)",""],["delete_if","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-delete_if","()",""],["delete_matched","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-delete_matched","(matcher, options = nil)","<p>Delete all entries with keys matching the pattern.\n<p>Options are passed to the underlying cache implementation. …\n"],["demodulize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-demodulize","(path)","<p>Removes the module part from the expression in the string:\n\n<pre>&quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize ...</pre>\n"],["demodulize","String","String.html#method-i-demodulize","()","<p>Removes the module part from the constant expression in the string.\n\n<pre>&quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize ...</pre>\n"],["deprecate","Module","Module.html#method-i-deprecate","(*method_names)","<p>Declare that a method has been deprecated.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">deprecate</span> :<span class=\"ruby-identifier\">foo</span>\n<span class=\"ruby-identifier\">deprecate</span> :<span class=\"ruby-identifier\">bar</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'message'</span>\n<span class=\"ruby-identifier\">deprecate</span> :<span class=\"ruby-identifier\">foo</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deprecate_methods","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-deprecate_methods","(target_module, *method_names)","<p>Declare that a method has been deprecated.\n"],["deprecated_method_warning","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-deprecated_method_warning","(method_name, message = nil)",""],["descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-descendants","()",""],["descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-c-descendants","(klass)",""],["describe","ActiveSupport::Testing::Declarative","ActiveSupport/Testing/Declarative.html#method-c-describe","(text)",""],["diff","Hash","Hash.html#method-i-diff","(h2)","<p>Returns a hash that represents the difference between two hashes.\n<p>Examples:\n\n<pre class=\"ruby\">{<span class=\"ruby-value\">1</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">diff</span>(<span class=\"ruby-value\">1</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>)      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["direct_descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-c-direct_descendants","(klass)",""],["direct_descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-direct_descendants","()",""],["dirname","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-dirname","()","<p>Returns the directory in which the data files are stored\n"],["downcase","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-downcase","()","<p>Convert characters in the string to lowercase.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'VĚDA A VÝZKUM'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">downcase</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;věda ...</span>\n</pre>\n"],["dst?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-dst-3F","()",""],["dup","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns an exact copy of the hash.\n"],["dup","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns an exact copy of the hash.\n"],["duplicable?","Class","Class.html#method-i-duplicable-3F","()","<p>Classes are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-constant\">Class</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-comment\"># =&gt; #&lt;Class:0x10328fd80&gt;</span>\n<span class=\"ruby-identifier\">c</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; #&lt;Class:0x10328fd80&gt;</span>\n</pre>\n"],["duplicable?","FalseClass","FalseClass.html#method-i-duplicable-3F","()","<p><code>false</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't dup FalseClass</span>\n</pre>\n"],["duplicable?","Module","Module.html#method-i-duplicable-3F","()","<p>Modules are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">Module</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-comment\"># =&gt; #&lt;Module:0x10328b6e0&gt;</span>\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">dup</span>          <span class=\"ruby-comment\"># =&gt; #&lt;Module:0x10328b6e0&gt;</span>\n</pre>\n"],["duplicable?","NilClass","NilClass.html#method-i-duplicable-3F","()","<p><code>nil</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't dup NilClass</span>\n</pre>\n"],["duplicable?","Numeric","Numeric.html#method-i-duplicable-3F","()","<p>Numbers are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't dup Fixnum</span>\n</pre>\n"],["duplicable?","Object","Object.html#method-i-duplicable-3F","()","<p>Can you safely dup this object?\n<p>False for <code>nil</code>, <code>false</code>, <code>true</code>, symbols,\nnumbers, class and module objects; …\n"],["duplicable?","Symbol","Symbol.html#method-i-duplicable-3F","()","<p>Symbols are not duplicable:\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">my_symbol</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n:<span class=\"ruby-identifier\">my_symbol</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't ...</span>\n</pre>\n"],["duplicable?","TrueClass","TrueClass.html#method-i-duplicable-3F","()","<p><code>true</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can't dup TrueClass</span>\n</pre>\n"],["each","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-each","(&block)",""],["each","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-each","()",""],["each_key","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-each_key","()",""],["each_pair","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-each_pair","()",""],["each_value","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-each_value","()",""],["each_with_object","Enumerable","Enumerable.html#method-i-each_with_object","(memo)","<p>Iterates over a collection, passing the current element\n<strong>and</strong> the <code>memo</code> to the block. Handy for building\n…\n"],["eager_autoload","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-eager_autoload","()",""],["eager_autoload!","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-c-eager_autoload-21","()",""],["empty?","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-empty-3F","()",""],["enable_warnings","Kernel","Kernel.html#method-i-enable_warnings","()","<p>Sets $VERBOSE to true for the duration of the block and back to its\noriginal value afterwards.\n"],["encode","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-encode","(value, options = nil)","<p>Dumps object in JSON (JavaScript Object Notation). See www.json.org for\nmore info.\n"],["encode","ActiveSupport::JSON::Encoding::Encoder","ActiveSupport/JSON/Encoding/Encoder.html#method-i-encode","(value, use_options = true)",""],["encode64","ActiveSupport::Base64","ActiveSupport/Base64.html#method-c-encode64","(value)",""],["encode64","Base64","Base64.html#method-c-encode64","(data)","<p>Encodes a string to its base 64 representation. Each 60 characters of\noutput is separated by a newline …\n"],["encode64s","ActiveSupport::Base64","ActiveSupport/Base64.html#method-c-encode64s","(value)",""],["encode_json","ActiveSupport::JSON::Variable","ActiveSupport/JSON/Variable.html#method-i-encode_json","(encoder)",""],["encode_json","Hash","Hash.html#method-i-encode_json","(encoder)",""],["encode_json","Numeric","Numeric.html#method-i-encode_json","(encoder)",""],["encode_json","String","String.html#method-i-encode_json","(encoder)",""],["encode_with","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-encode_with","(coder)",""],["encode_with","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-encode_with","(coder)",""],["encode_with","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-encode_with","(coder)",""],["encode_with","BigDecimal","BigDecimal.html#method-i-encode_with","(coder)",""],["encoding_aware?","String","String.html#method-i-encoding_aware-3F","()",""],["encrypt","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-encrypt","(value)",""],["encrypt_and_sign","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-encrypt_and_sign","(value)","<p>Encrypt and sign a message. We need to sign the message in order to avoid\npadding attacks. Reference: …\n"],["end_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_document","()",""],["end_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_element","(name)",""],["end_of_day","Date","Date.html#method-i-end_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the end of the day (23:59:59) …\n"],["end_of_day","DateTime","DateTime.html#method-i-end_of_day","()","<p>Returns a new DateTime representing the end of the day (23:59:59)\n"],["end_of_day","Time","Time.html#method-i-end_of_day","()","<p>Returns a new Time representing the end of the day, 23:59:59.999999\n(.999999999 in ruby1.9)\n"],["end_of_month","Date","Date.html#method-i-end_of_month","()","<p>Returns a new Date/DateTime representing the end of the month (last day of\nthe month; DateTime objects …\n"],["end_of_month","Time","Time.html#method-i-end_of_month","()","<p>Returns a new Time representing the end of the month (end of the last day\nof the month)\n"],["end_of_quarter","Date","Date.html#method-i-end_of_quarter","()","<p>Returns a new Date/DateTime representing the end of the quarter (last day\nof march, june, september, …\n"],["end_of_quarter","Time","Time.html#method-i-end_of_quarter","()","<p>Returns a new Time representing the end of the quarter (end of the last day\nof march, june, september, …\n"],["end_of_week","Date","Date.html#method-i-end_of_week","(start_day = :monday)","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the end\nof this week. Week is assumed to start on <code>start_day</code> …\n"],["end_of_week","Time","Time.html#method-i-end_of_week","(start_day = :monday)","<p>Returns a new Time representing the end of this week, week starts on\nstart_day (default is :monday,  …\n"],["end_of_year","Date","Date.html#method-i-end_of_year","()","<p>Returns a new Time representing the end of the year (31st of december;\nDateTime objects will have time …\n"],["end_of_year","Time","Time.html#method-i-end_of_year","()","<p>Returns a new Time representing the end of the year (end of the 31st of\ndecember)\n"],["engine","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-engine","()",""],["engine=","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-engine-3D","(name)",""],["environment","ActiveSupport::Testing::Performance::Benchmarker","ActiveSupport/Testing/Performance/Benchmarker.html#method-i-environment","()",""],["eql?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-eql-3F","(other)",""],["eql?","Time","Time.html#method-i-eql-3F","(other)",""],["eql_with_coercion","Time","Time.html#method-i-eql_with_coercion","(other)","<p>Layers additional behavior on Time#eql? so that ActiveSupport::TimeWithZone\ninstances can be eql? to …\n"],["eql_without_coercion","Time","Time.html#method-i-eql_without_coercion","(other)",""],["error","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-error","(error_message)",""],["escape","ActiveSupport::JSON::Encoding::Encoder","ActiveSupport/JSON/Encoding/Encoder.html#method-i-escape","(string)",""],["exabyte","Numeric","Numeric.html#method-i-exabyte","()",""],["exabytes","Numeric","Numeric.html#method-i-exabytes","()",""],["except","Hash","Hash.html#method-i-except","(*keys)","<p>Return a hash that includes everything but the given keys. This is useful\nfor limiting a set of parameters …\n"],["except!","Hash","Hash.html#method-i-except-21","(*keys)","<p>Replaces the hash without the given keys.\n"],["exclude?","Enumerable","Enumerable.html#method-i-exclude-3F","(object)","<p>The negative of the <code>Enumerable#include?</code>. Returns true if the\ncollection does not include the object. …\n"],["exclude?","String","String.html#method-i-exclude-3F","(string)","<p>The inverse of <code>String#include?</code>. Returns true if the string\ndoes not include the other string.\n"],["execute","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-execute","()","<p>Executes the given block and updates the counter to latest timestamp.\n"],["execute_hook","ActiveSupport","ActiveSupport.html#method-c-execute_hook","(base, options, block)",""],["execute_if_updated","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-execute_if_updated","()","<p>Execute the block given if updated.\n"],["exist?","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-exist-3F","(name, options = nil)","<p>Return true if the cache contains an entry for the given key.\n<p>Options are passed to the underlying cache …\n"],["expand_cache_key","ActiveSupport::Cache","ActiveSupport/Cache.html#method-c-expand_cache_key","(key, namespace = nil)",""],["expired?","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-expired-3F","()","<p>Check if the entry is expired. The <code>expires_in</code> parameter can\noverride the value set when the entry was …\n"],["expires_at","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-expires_at","()","<p>Seconds since the epoch when the entry will expire.\n"],["expires_at=","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-expires_at-3D","(time)","<p>Set a new time when the entry will expire.\n"],["extended","ActiveSupport::Concern","ActiveSupport/Concern.html#method-c-extended","(base)",""],["extended","ActiveSupport::Memoizable","ActiveSupport/Memoizable.html#method-c-extended","(base)",""],["extended","ActiveSupport::Testing::Declarative","ActiveSupport/Testing/Declarative.html#method-c-extended","(klass)",""],["extract!","Hash","Hash.html#method-i-extract-21","(*keys)","<p>Removes and returns the key/value pairs matching the given keys.\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">a</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>, :<span class=\"ruby-identifier\">b</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>, :<span class=\"ruby-identifier\">c</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">3</span>, :<span class=\"ruby-identifier\">d</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">4</span>}.<span class=\"ruby-identifier\">extract!</span>(:<span class=\"ruby-identifier\">a</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["extract_options!","Array","Array.html#method-i-extract_options-21","()","<p>Extracts options from a set of arguments. Removes and returns the last\nelement in the array if it’s a …\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Always returns true, so that <code>Array#extract_options!</code> finds\nmembers of this class.\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Always returns true, so that <code>Array#extract_options!</code> finds\nmembers of this class.\n"],["extractable_options?","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-extractable_options-3F","()","<p>Returns true to make sure that this hash is extractable via\n<code>Array#extract_options!</code>\n"],["extractable_options?","Hash","Hash.html#method-i-extractable_options-3F","()","<p>By default, only instances of Hash itself are extractable. Subclasses of\nHash may implement this method …\n"],["fetch","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-fetch","(name, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Fetches the value for the specified key, same as doing hash\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Fetches the value for the specified key, same as doing hash\n"],["fifth","Array","Array.html#method-i-fifth","()","<p>Equal to <code>self[4]</code>.\n"],["filename","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-filename","()","<p>Returns the filename for the data file for this version\n"],["find_tzinfo","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-find_tzinfo","(name)",""],["find_zone","Time","Time.html#method-c-find_zone","(time_zone)",""],["find_zone!","Time","Time.html#method-c-find_zone-21","(time_zone)","<p>Returns a TimeZone instance or nil, or raises an ArgumentError for invalid\ntimezones.\n"],["first","String","String.html#method-i-first","(limit = 1)","<p>Returns the first character of the string or the first <code>limit</code>\ncharacters.\n<p>Examples:\n\n<pre>&quot;hello&quot;.first     # ...</pre>\n"],["flush","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-flush","()",""],["flush","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-flush","()",""],["flush","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-i-flush","()",""],["flush_all!","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-flush_all-21","()","<p>Flush all log_subscribers’ logger.\n"],["flush_cache","ActiveSupport::Memoizable::InstanceMethods","ActiveSupport/Memoizable/InstanceMethods.html#method-i-flush_cache","(*syms)",""],["flushable_loggers","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-flushable_loggers","()",""],["for_tag","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-c-for_tag","(tag)",""],["foreign_key","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-foreign_key","(class_name, separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["foreign_key","String","String.html#method-i-foreign_key","(separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["forking_env?","ActiveSupport::Testing::Isolation","ActiveSupport/Testing/Isolation.html#method-c-forking_env-3F","()",""],["format","ActiveSupport::Testing::Performance::Metrics::Amount","ActiveSupport/Testing/Performance/Metrics/Amount.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::DigitalInformationUnit","ActiveSupport/Testing/Performance/Metrics/DigitalInformationUnit.html#method-i-format","(measurement)",""],["format","ActiveSupport::Testing::Performance::Metrics::Time","ActiveSupport/Testing/Performance/Metrics/Time.html#method-i-format","(measurement)",""],["formatted_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)",""],["formatted_offset","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-formatted_offset","(colon=true, alternate_utc_string = nil)","<p>Returns the offset of this time zone as a formatted string, of the format\n“+HH:MM”.\n"],["formatted_offset","DateTime","DateTime.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns the <code>utc_offset</code> as an +HH:MM formatted string.\nExamples:\n\n<pre>datetime = DateTime.civil(2000, 1, 1, ...</pre>\n"],["formatted_offset","Time","Time.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns the UTC offset as an +HH:MM formatted string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">formatted_offset</span>         <span class=\"ruby-comment\"># =&gt; &quot;-06:00&quot; ...</span>\n</pre>\n"],["fortnight","Numeric","Numeric.html#method-i-fortnight","()",""],["fortnights","Numeric","Numeric.html#method-i-fortnights","()",""],["forty_two","Array","Array.html#method-i-forty_two","()","<p>Equal to <code>self[41]</code>. Also known as accessing “the reddit”.\n"],["fourth","Array","Array.html#method-i-fourth","()","<p>Equal to <code>self[3]</code>.\n"],["freeze","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-freeze","()",""],["freeze_with_memoizable","ActiveSupport::Memoizable::InstanceMethods","ActiveSupport/Memoizable/InstanceMethods.html#method-i-freeze_with_memoizable","()",""],["from","Array","Array.html#method-i-from","(position)","<p>Returns the tail of the array from <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">from</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; %w( a b c d )</span>\n<span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">from</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["from","String","String.html#method-i-from","(position)","<p>Returns the remaining of the string from the <code>position</code> treating\nthe string as an array (where 0 is the …\n"],["from_now","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-from_now","(time = ::Time.current)",""],["from_now","Numeric","Numeric.html#method-i-from_now","(time = ::Time.current)","<p>Reads best without arguments:  10.minutes.from_now\n"],["from_xml","Hash","Hash.html#method-c-from_xml","(xml)",""],["full_profile_options","ActiveSupport::Testing::Performance","ActiveSupport/Testing/Performance.html#method-i-full_profile_options","()",""],["full_test_name","ActiveSupport::Testing::Performance","ActiveSupport/Testing/Performance.html#method-i-full_test_name","()",""],["future?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-future-3F","()",""],["future?","Date","Date.html#method-i-future-3F","()","<p>Returns true if the Date object’s date lies in the future.\n"],["future?","DateTime","DateTime.html#method-i-future-3F","()","<p>Tells whether the DateTime object’s datetime lies in the future\n"],["future?","Time","Time.html#method-i-future-3F","()","<p>Tells whether the Time object’s time lies in the future\n"],["g_length","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-g_length","()","<p>Returns the number of grapheme clusters in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'क्षि'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">length</span>   <span class=\"ruby-comment\"># =&gt; 4</span>\n<span class=\"ruby-string\">'क्षि'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">g_length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["g_pack","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-g_pack","(unpacked)","<p>Reverse operation of g_unpack.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Unicode</span>.<span class=\"ruby-identifier\">g_pack</span>(<span class=\"ruby-constant\">Unicode</span>.<span class=\"ruby-identifier\">g_unpack</span>(<span class=\"ruby-string\">'क्षि'</span>)) <span class=\"ruby-comment\"># =&gt; 'क्षि'</span>\n</pre>\n"],["g_unpack","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-g_unpack","(string)","<p>Unpack the string at grapheme boundaries. Returns a list of character\nlists.\n<p>Example:\n\n<pre>Unicode.g_unpack('क्षि') ...</pre>\n"],["generate","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-generate","(value)",""],["get","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-get","(key)",""],["getgm","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-getgm","()",""],["getlocal","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-getlocal","()",""],["getutc","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-getutc","()",""],["getutc","DateTime","DateTime.html#method-i-getutc","()",""],["gigabyte","Numeric","Numeric.html#method-i-gigabyte","()",""],["gigabytes","Numeric","Numeric.html#method-i-gigabytes","()",""],["gmt?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmt-3F","()",""],["gmt_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmt_offset","()",""],["gmtime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmtime","()",""],["gmtoff","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmtoff","()",""],["group_by","Enumerable","Enumerable.html#method-i-group_by","()","<p>Collect an enumerable into sets, grouped by the result of a block. Useful,\nfor example, for grouping …\n"],["h","ERB::Util","ERB/Util.html#method-c-h","(s)",""],["handler_for_rescue","ActiveSupport::Rescuable","ActiveSupport/Rescuable.html#method-i-handler_for_rescue","(exception)",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["hash","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-hash","()",""],["hour","Numeric","Numeric.html#method-i-hour","()",""],["hours","Numeric","Numeric.html#method-i-hours","()",""],["html_escape","ERB::Util","ERB/Util.html#method-c-html_escape","(s)","<p>A utility method for escaping HTML tag characters. This method is also\naliased as <code>h</code>.\n<p>In your ERB templates, …\n"],["html_safe","String","String.html#method-i-html_safe","()",""],["html_safe?","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-html_safe-3F","()",""],["html_safe?","Numeric","Numeric.html#method-i-html_safe-3F","()",""],["html_safe?","Object","Object.html#method-i-html_safe-3F","()",""],["httpdate","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-httpdate","()",""],["human","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-human","(rule, replacement)","<p>Specifies a humanized form of a string by a regular expression rule or by a\nstring mapping. When using …\n"],["humanize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-humanize","(lower_case_and_underscored_word)","<p>Capitalizes the first word and turns underscores into spaces and strips a\ntrailing “_id”, if …\n"],["humanize","String","String.html#method-i-humanize","()","<p>Capitalizes the first word, turns underscores into spaces, and strips\n‘_id’. Like <code>titleize</code>, this is meant …\n"],["id","NilClass","NilClass.html#method-i-id","()","<p>Raises a RuntimeError when you attempt to call <code>id</code> on\n<code>nil</code>.\n"],["in","Date","Date.html#method-i-in","(seconds)",""],["in","DateTime","DateTime.html#method-i-in","(seconds)",""],["in","Time","Time.html#method-i-in","(seconds)",""],["in?","Object","Object.html#method-i-in-3F","(*args)","<p>Returns true if this object is included in the argument(s). Argument must\nbe any object which responds …\n"],["in_char_class?","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-in_char_class-3F","(codepoint, classes)","<p>Detect whether the codepoint is in a certain character class. Returns\n<code>true</code> when it’s in the specified …\n"],["in_groups","Array","Array.html#method-i-in_groups","(number, fill_with = nil)","<p>Splits or iterates over the array in <code>number</code> of groups, padding\nany remaining slots with <code>fill_with</code> unless …\n"],["in_groups_of","Array","Array.html#method-i-in_groups_of","(number, fill_with = nil)","<p>Splits or iterates over the array in groups of size <code>number</code>,\npadding any remaining slots with <code>fill_with</code> …\n"],["in_time_zone","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-in_time_zone","(new_zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>, or the specified\nzone.\n"],["in_time_zone","DateTime","DateTime.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">'Hawaii'</span>             <span class=\"ruby-comment\"># =&gt; 'Hawaii'</span>\n<span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">in_time_zone</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["in_time_zone","Time","Time.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">'Hawaii'</span>         <span class=\"ruby-comment\"># =&gt; 'Hawaii'</span>\n<span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">in_time_zone</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["include?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-include-3F","(other)","<p>Returns <code>true</code> if contained string contains <em>other</em>.\nReturns <code>false</code> otherwise.\n<p>Example:\n\n<pre>'Café'.mb_chars.include?('é') ...</pre>\n"],["include?","Test::Unit::Collector::ObjectSpace","Test/Unit/Collector/ObjectSpace.html#method-i-include-3F","(test)",""],["include_fallbacks_module","I18n::Railtie","I18n/Railtie.html#method-c-include_fallbacks_module","()",""],["include_with_range?","Range","Range.html#method-i-include_with_range-3F","(value)","<p>Extends the default Range#include? to support range comparisons.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["included","ActiveSupport::Concern","ActiveSupport/Concern.html#method-i-included","(base = nil, &block)",""],["included","ActiveSupport::Memoizable::InstanceMethods","ActiveSupport/Memoizable/InstanceMethods.html#method-c-included","(base)",""],["included","ActiveSupport::Testing::Isolation","ActiveSupport/Testing/Isolation.html#method-c-included","(base)",""],["increment","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-increment","(name, amount = 1, options = nil)",""],["increment","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n"],["increment","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-increment","(name, amount = 1, options = nil)",""],["increment","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],["index","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-index","(needle, offset=0)","<p>Returns the position <em>needle</em> in the string, counting in codepoints.\nReturns <code>nil</code> if <em>needle</em> isn’t found. …\n"],["index_by","Enumerable","Enumerable.html#method-i-index_by","()","<p>Convert an enumerable to a hash. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">people</span>.<span class=\"ruby-identifier\">index_by</span>(&amp;:<span class=\"ruby-identifier\">login</span>)\n  =<span class=\"ruby-operator\">&gt;</span> { <span class=\"ruby-string\">&quot;nextangle&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">&lt;</span><span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span><span class=\"ruby-operator\">&gt;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inflections","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-inflections","()","<p>Yields a singleton instance of Inflector::Inflections so you can specify\nadditional inflector rules. …\n"],["inheritable_copy","ActiveSupport::InheritableOptions","ActiveSupport/InheritableOptions.html#method-i-inheritable_copy","()",""],["inherited","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-inherited","(base)",""],["init_fallbacks","I18n::Railtie","I18n/Railtie.html#method-c-init_fallbacks","(fallbacks)",""],["initialize_copy","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-initialize_copy","(other)",""],["initialize_i18n","I18n::Railtie","I18n/Railtie.html#method-c-initialize_i18n","(app)","<p>Setup i18n configuration\n"],["inquiry","String","String.html#method-i-inquiry","()","<p>Wraps the current string in the <code>ActiveSupport::StringInquirer</code>\nclass, which gives you a prettier way to …\n"],["insert","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-insert","(offset, fragment)","<p>Inserts the passed string at specified codepoint offsets.\n<p>Example:\n\n<pre>'Café'.mb_chars.insert(4, ' périferôl').to_s ...</pre>\n"],["inspect","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-inspect","()",""],["inspect","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-inspect","()",""],["inspect","Date","Date.html#method-i-inspect","()",""],["inspect","DateTime","DateTime.html#method-i-inspect","()",""],["instance","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-c-instance","()",""],["instance_method_names","Module","Module.html#method-i-instance_method_names","(*args)",""],["instance_variable_names","Object","Object.html#method-i-instance_variable_names","()",""],["instrument","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-c-instrument","()",""],["instrument","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-instrument","(name, payload = {})",""],["instrument","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-i-instrument","(name, payload={})","<p>Instrument the given block by measuring the time taken to execute it and\npublish it. Notice that events …\n"],["instrument=","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-c-instrument-3D","(boolean)","<p>Set to true if cache stores should be instrumented. Default is false.\n"],["instrumenter","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-instrumenter","()",""],["invert","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-invert","()",""],["irregular","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-irregular","(singular, plural)","<p>Specifies a new irregular that applies to both pluralization and\nsingularization at the same time. This …\n"],["is_a?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-is_a-3F","(klass)","<p>Say we’re a Time to thwart type checking.\n"],["is_missing?","LoadError","LoadError.html#method-i-is_missing-3F","(location)",""],["is_missing?","LoadError","LoadError.html#method-i-is_missing-3F","(location)",""],["is_utf8?","String","String.html#method-i-is_utf8-3F","()",""],["isdst","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-isdst","()",""],["iso8601","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-iso8601","(fraction_digits = 0)",""],["iso8601","Date","Date.html#method-i-iso8601","()",""],["j","ERB::Util","ERB/Util.html#method-c-j","(s)",""],["json_escape","ERB::Util","ERB/Util.html#method-c-json_escape","(s)","<p>A utility method for escaping HTML entities in JSON strings using uXXXX\nJavaScript escape sequences for …\n"],["key?","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-key-3F","(key)",""],["key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[&quot;key&quot;] ...</pre>\n"],["key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[&quot;key&quot;] ...</pre>\n"],["key_matcher","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-key_matcher","(pattern, options)","<p>Add the namespace defined in the options to a pattern designed to match\nkeys. Implementations that support …\n"],["keys","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-keys","()",""],["kilobyte","Numeric","Numeric.html#method-i-kilobyte","()",""],["kilobytes","Numeric","Numeric.html#method-i-kilobytes","()",""],["kind_of?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-kind_of-3F","(klass)",""],["last","String","String.html#method-i-last","(limit = 1)","<p>Returns the last character of the string or the last <code>limit</code>\ncharacters.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">last</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["level","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-level","()",""],["level=","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-level-3D","(l)",""],["limit","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-limit","(limit)","<p>Limit the byte size of the string to a number of bytes without breaking\ncharacters. Usable when the storage …\n"],["listeners_for","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-listeners_for","(name)",""],["listening?","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-listening-3F","(name)",""],["ljust","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-ljust","(integer, padstr=' ')","<p>Works just like <code>String#ljust</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.rjust(8).to_s ...</pre>\n"],["load","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-load","()","<p>Loads the Unicode database and returns all the internal objects of\nUnicodeDatabase.\n"],["load_all!","ActiveSupport","ActiveSupport.html#method-c-load_all-21","()",""],["local","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-local","(*args)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from given values. …\n"],["local_constant_names","Module","Module.html#method-i-local_constant_names","()","<p>Returns the names of the constants defined locally rather than the\nconstants themselves. See <code>local_constants</code> …\n"],["local_constants","Module","Module.html#method-i-local_constants","()","<p>Returns the constants that have been defined locally by this object and not\nin an ancestor. This method …\n"],["local_offset","DateTime","DateTime.html#method-c-local_offset","()","<p>DateTimes aren’t aware of DST rules, so use a consistent non-DST offset\nwhen creating a DateTime with …\n"],["local_time","Time","Time.html#method-c-local_time","(*args)","<p>Wraps class method <code>time_with_datetime_fallback</code> with\n<code>utc_or_local</code> set to <code>:local</code>.\n"],["local_to_utc","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-local_to_utc","(time, dst=true)","<p>Adjust the given time to the simultaneous time in UTC. Returns a Time.utc()\ninstance.\n"],["localtime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-localtime","()","<p>Returns a <code>Time.local()</code> instance of the simultaneous time in\nyour system’s <code>ENV['TZ']</code> zone\n"],["log_subscribers","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-log_subscribers","()",""],["logged","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-logged","(level)",""],["logger","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-logger","()",""],["lookup_store","ActiveSupport::Cache","ActiveSupport/Cache.html#method-c-lookup_store","(*store_option)","<p>Creates a new CacheStore object according to the given options.\n<p>If no arguments are passed to this method, …\n"],["lstrip","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-lstrip","()","<p>Strips entire range of Unicode whitespace from the left of the string.\n"],["many?","Enumerable","Enumerable.html#method-i-many-3F","()","<p>Returns true if the enumerable has more than 1 element. Functionally\nequivalent to enum.to_a.size &gt; …\n"],["marshal_dump","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-marshal_dump","()",""],["marshal_load","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-marshal_load","(variables)",""],["mattr_accessor","Module","Module.html#method-i-mattr_accessor","(*syms)","<p>Extends the module object with module and instance accessors for class\nattributes, just like the native …\n"],["mattr_reader","Module","Module.html#method-i-mattr_reader","(*syms)",""],["mattr_writer","Module","Module.html#method-i-mattr_writer","(*syms)",""],["mb_chars","String","String.html#method-i-mb_chars","()","<p>Multibyte proxy\n<p><code>mb_chars</code> is a multibyte safe proxy for string methods.\n<p>In Ruby 1.8 and older it creates …\n"],["measure","ActiveSupport::Testing::Performance::Metrics::CpuTime","ActiveSupport/Testing/Performance/Metrics/CpuTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::GcRuns","ActiveSupport/Testing/Performance/Metrics/GcRuns.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::GcTime","ActiveSupport/Testing/Performance/Metrics/GcTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Memory","ActiveSupport/Testing/Performance/Metrics/Memory.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Objects","ActiveSupport/Testing/Performance/Metrics/Objects.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::ProcessTime","ActiveSupport/Testing/Performance/Metrics/ProcessTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::Time","ActiveSupport/Testing/Performance/Metrics/Time.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::UserTime","ActiveSupport/Testing/Performance/Metrics/UserTime.html#method-i-measure","()",""],["measure","ActiveSupport::Testing::Performance::Metrics::WallTime","ActiveSupport/Testing/Performance/Metrics/WallTime.html#method-i-measure","()",""],["measure_mode","ActiveSupport::Testing::Performance::Metrics::Base","ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-measure_mode","()",""],["megabyte","Numeric","Numeric.html#method-i-megabyte","()",""],["megabytes","Numeric","Numeric.html#method-i-megabytes","()",""],["member?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["member?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["memoize","ActiveSupport::Memoizable","ActiveSupport/Memoizable.html#method-i-memoize","(*symbols)",""],["memoize_all","ActiveSupport::Memoizable::InstanceMethods","ActiveSupport/Memoizable/InstanceMethods.html#method-i-memoize_all","()",""],["memoized_ivar_for","ActiveSupport::Memoizable","ActiveSupport/Memoizable.html#method-c-memoized_ivar_for","(symbol)",""],["merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(hash)","<p>Merges the instantized and the specified hashes together, giving precedence\nto the values from the second …\n"],["merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(hash)","<p>Merges the instantized and the specified hashes together, giving precedence\nto the values from the second …\n"],["merge","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-merge","(other_hash, &block)",""],["merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(other_hash)",""],["merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(other_hash)",""],["merge!","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-merge-21","(other_hash)",""],["method_missing","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-method_missing","(level, message)",""],["method_missing","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-method_missing","(method, *args, &block)","<p>Forward all undefined methods to the wrapped string.\n"],["method_missing","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::StringInquirer","ActiveSupport/StringInquirer.html#method-i-method_missing","(method_name, *arguments)",""],["method_missing","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-i-method_missing","(method, *args)",""],["method_missing","ActiveSupport::Testing::ProxyTestResult","ActiveSupport/Testing/ProxyTestResult.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-method_missing","(sym, *args, &block)","<p>Send the missing method to <code>time</code> instance, and wrap result in a\nnew TimeWithZone with the existing <code>time_zone</code> …\n"],["method_names","Module","Module.html#method-i-method_names","(*args)",""],["middleware","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-middleware","()","<p>Middleware class can be inserted as a Rack handler to be local cache for\nthe duration of request.\n"],["midnight","Date","Date.html#method-i-midnight","()",""],["midnight","DateTime","DateTime.html#method-i-midnight","()",""],["midnight","Time","Time.html#method-i-midnight","()",""],["minus_with_coercion","Time","Time.html#method-i-minus_with_coercion","(other)","<p>Time#- can also be used to determine the number of seconds between two Time\ninstances. We’re layering …\n"],["minus_without_coercion","Time","Time.html#method-i-minus_without_coercion","(other)",""],["minus_without_duration","Time","Time.html#method-i-minus_without_duration","(other)",""],["minute","Numeric","Numeric.html#method-i-minute","()",""],["minutes","Numeric","Numeric.html#method-i-minutes","()",""],["missing_name","NameError","NameError.html#method-i-missing_name","()","<p>Extract the name of the missing constant from the exception message.\n"],["missing_name?","NameError","NameError.html#method-i-missing_name-3F","(name)","<p>Was this exception raised because the given name was missing?\n"],["monday","Date","Date.html#method-i-monday","()","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the\nstart of this week. Week is assumed to start on a Monday …\n"],["monday","Time","Time.html#method-i-monday","()","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the\nstart of this week. Week is assumed to start on a Monday …\n"],["month","Integer","Integer.html#method-i-month","()",""],["months","Integer","Integer.html#method-i-months","()","<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],["months_ago","Date","Date.html#method-i-months_ago","(months)","<p>Returns a new Date/DateTime representing the time a number of specified\nmonths ago.\n"],["months_ago","Time","Time.html#method-i-months_ago","(months)","<p>Returns a new Time representing the time a number of specified months ago\n"],["months_since","Date","Date.html#method-i-months_since","(months)","<p>Returns a new Date/DateTime representing the time a number of specified\nmonths in the future.\n"],["months_since","Time","Time.html#method-i-months_since","(months)","<p>Returns a new Time representing the time a number of specified months in\nthe future\n"],["ms","Benchmark","Benchmark.html#method-c-ms","()",""],["multiple_of?","Integer","Integer.html#method-i-multiple_of-3F","(number)","<p>Check whether the integer is evenly divisible by the argument.\n"],["mute","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-mute","()","<p>Silence the logger within a block.\n"],["name","ActiveSupport::Testing::Performance::Metrics::Base","ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-name","()",""],["name","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-c-name","()",""],["names","QualifiedConstUtils","QualifiedConstUtils.html#method-c-names","(path)",""],["nested_under_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","Hash","Hash.html#method-i-nested_under_indifferent_access","()","<p>Called when object is nested under an object that receives\n#with_indifferent_access. This method will …\n"],["new","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-c-new","()",""],["new","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-c-new","(log, level = DEBUG)",""],["new","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-c-new","(value, options = {})","<p>Create a new cache entry for the specified value. Options supported are\n<code>:compress</code>, <code>:compress_threshold</code> …\n"],["new","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-c-new","(cache_path, options = nil)",""],["new","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-c-new","(*addresses)","<p>Creates a new MemCacheStore object, with the given memcached server\naddresses. Each address is either …\n"],["new","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-c-new","(options = nil)",""],["new","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-c-new","(options = nil)",""],["new","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-c-new","(options = nil)","<p>Create a new cache. The options will be passed to any write method calls\nexcept for :namespace which …\n"],["new","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-c-new","()",""],["new","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-c-new","()",""],["new","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-c-new","()","<p>@watching is a stack of lists of constants being watched. For instance, if\nparent.rb is autoloaded, the …\n"],["new","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-c-new","(files, dirs={}, &block)","<p>It accepts two parameters on initialization. The first is an array of files\nand the second is an optional …\n"],["new","ActiveSupport::FileWatcher","ActiveSupport/FileWatcher.html#method-c-new","()",""],["new","ActiveSupport::FileWatcher::Backend","ActiveSupport/FileWatcher/Backend.html#method-c-new","(path, watcher)",""],["new","ActiveSupport::Gzip::Stream","ActiveSupport/Gzip/Stream.html#method-c-new","(*)",""],["new","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-c-new","()",""],["new","ActiveSupport::InheritableOptions","ActiveSupport/InheritableOptions.html#method-c-new","(parent = nil)",""],["new","ActiveSupport::JSON::Encoding::Encoder","ActiveSupport/JSON/Encoding/Encoder.html#method-c-new","(options = nil)",""],["new","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-c-new","(level = DEBUG)",""],["new","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-c-new","(secret, options = {})",""],["new","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-c-new","(secret, options = {})",""],["new","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-c-new","(string)","<p>Creates a new Chars instance by wrapping <em>string</em>.\n"],["new","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-c-new","(name, start, ending, transaction_id, payload)",""],["new","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-c-new","(notifier)",""],["new","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-c-new","(*args, &block)","<p>In MRI the Hash class is core and written in C. In particular, methods are\nprogrammed with explicit  …\n"],["new","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-c-new","(*)",""],["new","ActiveSupport::SafeBuffer::SafeConcatError","ActiveSupport/SafeBuffer/SafeConcatError.html#method-c-new","()",""],["new","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-c-new","(logger)",""],["new","ActiveSupport::Testing::Performance::Benchmarker","ActiveSupport/Testing/Performance/Benchmarker.html#method-c-new","(*args)",""],["new","ActiveSupport::Testing::Performance::Metrics::Base","ActiveSupport/Testing/Performance/Metrics/Base.html#method-c-new","()",""],["new","ActiveSupport::Testing::Performance::Metrics::CpuTime","ActiveSupport/Testing/Performance/Metrics/CpuTime.html#method-c-new","(*args)",""],["new","ActiveSupport::Testing::Performance::Performer","ActiveSupport/Testing/Performance/Performer.html#method-c-new","(harness, metric)",""],["new","ActiveSupport::Testing::Performance::Profiler","ActiveSupport/Testing/Performance/Profiler.html#method-c-new","(*args)",""],["new","ActiveSupport::Testing::ProxyTestResult","ActiveSupport/Testing/ProxyTestResult.html#method-c-new","()",""],["new","ActiveSupport::Testing::RemoteError","ActiveSupport/Testing/RemoteError.html#method-c-new","(exception)",""],["new","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-c-new","(utc_time, time_zone, local_time = nil, period = nil)",""],["new","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-new","(name)","<p>Return a TimeZone instance with the given name, or <code>nil</code> if no\nsuch TimeZone instance exists. (This exists …\n"],["new","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-new","(name, utc_offset = nil, tzinfo = nil)","<p>Create a new TimeZone object with the given name and offset. The offset is\nthe number of seconds that …\n"],["new_constants","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-new_constants","()","<p>return a list of new constants found since the last call to\nwatch_namespaces\n"],["new_from_hash_copying_default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new_from_hash_copying_default","(hash)",""],["new_from_hash_copying_default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new_from_hash_copying_default","(hash)",""],["next_month","Date","Date.html#method-i-next_month","()","<p>Shorthand for months_since(1)\n"],["next_month","Time","Time.html#method-i-next_month","()","<p>Short-hand for months_since(1)\n"],["next_week","Date","Date.html#method-i-next_week","(day = :monday)","<p>Returns a new Date/DateTime representing the start of the given day in next\nweek (default is :monday). …\n"],["next_week","Time","Time.html#method-i-next_week","(day = :monday)","<p>Returns a new Time representing the start of the given day in next week\n(default is :monday).\n"],["next_year","Date","Date.html#method-i-next_year","()","<p>Shorthand for years_since(1)\n"],["next_year","Time","Time.html#method-i-next_year","()","<p>Short-hand for years_since(1)\n"],["normalize","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-normalize","(form = nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["normalize","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-normalize","(string, form=nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["now","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-now","()","<p>Returns an ActiveSupport::TimeWithZone instance representing the current\ntime in the time zone represented …\n"],["on_cdata_block","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_cdata_block","(string)",""],["on_characters","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_characters","(string)",""],["on_end_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_document","()",""],["on_end_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_element","(name)",""],["on_load","ActiveSupport","ActiveSupport.html#method-c-on_load","(name, options = {}, &block)",""],["on_load_all","ActiveSupport","ActiveSupport.html#method-c-on_load_all","(&hook)",""],["on_start_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_document","()",""],["on_start_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_element","(name, attrs = {})",""],["open_log","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-open_log","(log, mode)",""],["options_for","ActiveSupport::JSON::Encoding::Encoder","ActiveSupport/JSON/Encoding/Encoder.html#method-i-options_for","(value)",""],["ord","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-ord","()","<p>Returns the codepoint of the first character in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'こんにちは'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">ord</span> <span class=\"ruby-comment\"># =&gt; 12371</span>\n</pre>\n"],["ord","String","String.html#method-i-ord","()","<p>Returns the codepoint of the first character of the string, assuming a\nsingle-byte character encoding: …\n"],["ordinalize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-ordinalize","(number)","<p>Turns a number into an ordinal string used to denote the position in an\nordered sequence such as 1st, …\n"],["ordinalize","Integer","Integer.html#method-i-ordinalize","()","<p>Ordinalize turns a number into an ordinal string used to denote the\nposition in an ordered sequence such …\n"],["original_concat","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-original_concat","(value)",""],["output_filename","ActiveSupport::Testing::Performance::Benchmarker","ActiveSupport/Testing/Performance/Benchmarker.html#method-i-output_filename","()",""],["output_filename","ActiveSupport::Testing::Performance::Performer","ActiveSupport/Testing/Performance/Performer.html#method-i-output_filename","()",""],["output_filename","ActiveSupport::Testing::Performance::Profiler","ActiveSupport/Testing/Performance/Profiler.html#method-i-output_filename","(printer_class)",""],["overlaps?","Range","Range.html#method-i-overlaps-3F","(other)","<p>Compare two ranges and see if they overlap each other\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">4</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">6</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">7</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">9</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parameterize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-parameterize","(string, sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n‘pretty’ URL.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parameterize","String","String.html#method-i-parameterize","(sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n‘pretty’ URL.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parent","Module","Module.html#method-i-parent","()","<p>Returns the module which contains this one according to its name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>\n  <span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">N</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">X</span> = <span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parent_name","Module","Module.html#method-i-parent_name","()","<p>Returns the name of the module containing this one.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span>.<span class=\"ruby-identifier\">parent_name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n</pre>\n"],["parent_of?","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-parent_of-3F","(event)",""],["parents","Module","Module.html#method-i-parents","()","<p>Returns all the parents of this module according to its name, ordered from\nnested outwards. The receiver …\n"],["parse","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-parse","(str, now=now)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from parsed string. …\n"],["parse","ActiveSupport::XmlMini_LibXMLSAX","ActiveSupport/XmlMini_LibXMLSAX.html#method-i-parse","(data)",""],["parse","ActiveSupport::XmlMini_NokogiriSAX","ActiveSupport/XmlMini_NokogiriSAX.html#method-i-parse","(data)",""],["parse_error","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-parse_error","()",""],["parser","URI","URI.html#method-c-parser","()",""],["past?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-past-3F","()",""],["past?","Date","Date.html#method-i-past-3F","()","<p>Returns true if the Date object’s date lies in the past. Otherwise returns\nfalse.\n"],["past?","DateTime","DateTime.html#method-i-past-3F","()","<p>Tells whether the DateTime object’s datetime lies in the past\n"],["past?","Time","Time.html#method-i-past-3F","()","<p>Tells whether the Time object’s time lies in the past\n"],["path","LoadError","LoadError.html#method-i-path","()",""],["path","LoadError","LoadError.html#method-i-path","()",""],["pending","ActiveSupport::Testing::Pending","ActiveSupport/Testing/Pending.html#method-i-pending","(description = \"\", &block)",""],["period","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-period","()","<p>Returns the underlying TZInfo::TimezonePeriod.\n"],["period_for_local","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-period_for_local","(time, dst=true)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances\n"],["period_for_utc","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-period_for_utc","(time)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances\n"],["petabyte","Numeric","Numeric.html#method-i-petabyte","()",""],["petabytes","Numeric","Numeric.html#method-i-petabytes","()",""],["plural","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-plural","(rule, replacement)","<p>Specifies a new pluralization rule and its replacement. The rule can either\nbe a string or a regular …\n"],["pluralize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-pluralize","(word)","<p>Returns the plural form of the word in the string.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;post&quot;</span>.<span class=\"ruby-identifier\">pluralize</span>             <span class=\"ruby-comment\"># =&gt; &quot;posts&quot; ...</span>\n</pre>\n"],["pluralize","String","String.html#method-i-pluralize","(count = nil)","<p>Returns the plural form of the word in the string.\n<p>If the optional parameter <code>count</code> is specified, the singular …\n"],["precisionless_round","Float","Float.html#method-i-precisionless_round","(precision = nil)",""],["presence","Object","Object.html#method-i-presence","()","<p>Returns object if it’s <code>present?</code> otherwise returns\n<code>nil</code>. <code>object.presence</code> is equivalent to\n<code>object.present</code> …\n"],["present?","Object","Object.html#method-i-present-3F","()","<p>An object is present if it’s not <code>blank?</code>.\n"],["prev_month","Date","Date.html#method-i-prev_month","()","<p>Shorthand for months_ago(1)\n"],["prev_month","Time","Time.html#method-i-prev_month","()","<p>Short-hand for months_ago(1)\n"],["prev_week","Date","Date.html#method-i-prev_week","(day = :monday)","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the\ngiven <code>day</code> in the previous week. Default is\n<code>:monday</code>. <code>DateTime</code> …\n"],["prev_week","Time","Time.html#method-i-prev_week","(day = :monday)","<p>Returns a new Time representing the start of the given day in the previous\nweek (default is :monday). …\n"],["prev_year","Date","Date.html#method-i-prev_year","()","<p>Shorthand for years_ago(1)\n"],["prev_year","Time","Time.html#method-i-prev_year","()","<p>Short-hand for years_ago(1)\n"],["prime_cache","ActiveSupport::Memoizable::InstanceMethods","ActiveSupport/Memoizable/InstanceMethods.html#method-i-prime_cache","(*syms)",""],["profile","ActiveSupport::Testing::Performance::Metrics::Base","ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-profile","()",""],["proxy_class","ActiveSupport::Multibyte","ActiveSupport/Multibyte.html#method-c-proxy_class","()","<p>Returns the current proxy class\n"],["proxy_class=","ActiveSupport::Multibyte","ActiveSupport/Multibyte.html#method-c-proxy_class-3D","(klass)","<p>The proxy class returned when calling mb_chars. You can use this accessor\nto configure your own proxy …\n"],["prune","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-prune","(target_size, max_time = nil)","<p>To ensure entries fit within the specified memory prune the cache by\nremoving the least recently accessed …\n"],["pruning?","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-pruning-3F","()","<p>Returns true if the cache is currently being pruned.\n"],["publish","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-publish","(name, *args)",""],["publish","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-publish","(name, *args)",""],["qualified_const_defined?","Module","Module.html#method-i-qualified_const_defined-3F","(path)",""],["qualified_const_get","Module","Module.html#method-i-qualified_const_get","(path)",""],["qualified_const_set","Module","Module.html#method-i-qualified_const_set","(path, value)",""],["quietly","Kernel","Kernel.html#method-i-quietly","()","<p>Silences both STDOUT and STDERR, even for subprocesses.\n\n<pre>quietly { system 'bundle install' }</pre>\n"],["raise","ActiveSupport::BasicObject","ActiveSupport/BasicObject.html#method-i-raise","(*args)","<p>Let ActiveSupport::BasicObject at least raise exceptions.\n"],["raise_if_absolute","QualifiedConstUtils","QualifiedConstUtils.html#method-c-raise_if_absolute","(path)",""],["raw_value","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-raw_value","()","<p>Get the raw value. This value may be serialized and compressed.\n"],["read","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-read","(name, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["read_entry","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-read_entry","(key, options)",""],["read_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-read_entry","(key, options)",""],["read_multi","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-read_multi","(*names)","<p>Reads multiple values from the cache using a single call to the servers for\nall keys. Options can be …\n"],["read_multi","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-read_multi","(*names)","<p>Read multiple values at once from the cache. Options can be passed in the\nlast argument.\n<p>Some cache implementation …\n"],["readable_inspect","Date","Date.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005”\n"],["readable_inspect","DateTime","DateTime.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005 14:30:00 …\n"],["record","ActiveSupport::Testing::Performance::Benchmarker","ActiveSupport/Testing/Performance/Benchmarker.html#method-i-record","()",""],["record","ActiveSupport::Testing::Performance::Profiler","ActiveSupport/Testing/Performance/Profiler.html#method-i-record","()",""],["redefine_method","Module","Module.html#method-i-redefine_method","(method, &block)",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["reject","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-reject","(&block)",""],["reject!","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-reject-21","()",""],["reloader","I18n::Railtie","I18n/Railtie.html#method-c-reloader","()",""],["reloader_paths","I18n::Railtie","I18n/Railtie.html#method-c-reloader_paths","()",""],["remove_filters!","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-remove_filters-21","()",""],["remove_possible_method","Module","Module.html#method-i-remove_possible_method","(method)",""],["remove_silencers!","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-remove_silencers-21","()","<p>Will remove all silencers, but leave in the filters. This is useful if your\ncontext of debugging suddenly …\n"],["rename_key","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-rename_key","(key, options = {})",""],["reorder_characters","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-reorder_characters","(codepoints)","<p>Re-order codepoints so the string becomes canonical.\n"],["replace","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-replace","(other)","<p>When replacing with another hash, the initial order of our keys must come\nfrom the other hash -ordered …\n"],["report","ActiveSupport::Testing::Performance::Performer","ActiveSupport/Testing/Performance/Performer.html#method-i-report","()",""],["require_tzinfo","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-require_tzinfo","()",""],["rescue_from","ActiveSupport::Rescuable::ClassMethods","ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_from","(*klasses, &block)","<p>Rescue exceptions raised in controller actions.\n<p><code>rescue_from</code> receives a series of exception classes or ...\n"],["rescue_with_handler","ActiveSupport::Rescuable","ActiveSupport/Rescuable.html#method-i-rescue_with_handler","(exception)","<p>Tries to rescue the exception by looking up and calling a registered\nhandler.\n"],["reset_callbacks","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-reset_callbacks","(symbol)","<p>Remove all set callbacks for the given event.\n"],["respond_to?","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-respond_to-3F","(method, include_private=false)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method.\nPrivate methods are included in the search only if …\n"],["respond_to?","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-respond_to-3F","(name)",""],["respond_to?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-respond_to-3F","(sym, include_priv = false)","<p>Ensure proxy class responds to all methods that underlying time instance\nresponds to.\n"],["reverse","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-reverse","()","<p>Reverses all characters in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'Café'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">reverse</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; 'éfaC'</span>\n</pre>\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Performs the opposite of merge, with the keys and values from the first\nhash taking precedence over the …\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Performs the opposite of merge, with the keys and values from the first\nhash taking precedence over the …\n"],["reverse_merge","Hash","Hash.html#method-i-reverse_merge","(other_hash)","<p>Merges the caller into <code>other_hash</code>. For example,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">options</span> = <span class=\"ruby-identifier\">options</span>.<span class=\"ruby-identifier\">reverse_merge</span>(:<span class=\"ruby-identifier\">size</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">25</span>, :<span class=\"ruby-identifier\">velocity</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)",""],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)",""],["reverse_merge!","Hash","Hash.html#method-i-reverse_merge-21","(other_hash)","<p>Destructive <code>reverse_merge</code>.\n"],["reverse_update","Hash","Hash.html#method-i-reverse_update","(other_hash)",""],["rfc2822","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-rfc2822","()",""],["rfc3339","Date","Date.html#method-i-rfc3339","()",""],["rfc822","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-rfc822","()",""],["rindex","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-rindex","(needle, offset=nil)","<p>Returns the position <em>needle</em> in the string, counting in codepoints,\nsearching backward from <em>offset</em> or …\n"],["rjust","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-rjust","(integer, padstr=' ')","<p>Works just like <code>String#rjust</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.rjust(8).to_s ...</pre>\n"],["round","Float","Float.html#method-i-round","(precision = nil)","<p>Rounds the float with the specified precision.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">x</span> = <span class=\"ruby-value\">1.337</span>\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">round</span>    <span class=\"ruby-comment\"># =&gt; 1</span>\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">round</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># =&gt; 1.3</span>\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">round</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rstrip","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-rstrip","()","<p>Strips entire range of Unicode whitespace from the right of the string.\n"],["run","ActiveSupport::Testing::Isolation::MiniTest","ActiveSupport/Testing/Isolation/MiniTest.html#method-i-run","(runner)",""],["run","ActiveSupport::Testing::Isolation::TestUnit","ActiveSupport/Testing/Isolation/TestUnit.html#method-i-run","(result)",""],["run","ActiveSupport::Testing::Performance::Benchmarker","ActiveSupport/Testing/Performance/Benchmarker.html#method-i-run","()",""],["run","ActiveSupport::Testing::Performance::ForClassicTestUnit","ActiveSupport/Testing/Performance/ForClassicTestUnit.html#method-i-run","(result)",""],["run","ActiveSupport::Testing::Performance::ForMiniTest","ActiveSupport/Testing/Performance/ForMiniTest.html#method-i-run","(runner)",""],["run","ActiveSupport::Testing::Performance::Profiler","ActiveSupport/Testing/Performance/Profiler.html#method-i-run","()",""],["run","ActiveSupport::Testing::SetupAndTeardown::ForClassicTestUnit","ActiveSupport/Testing/SetupAndTeardown/ForClassicTestUnit.html#method-i-run","(result)","<p>This redefinition is unfortunate but test/unit shows us no alternative.\nDoubly unfortunate: hax to support …\n"],["run","ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html#method-i-run","(runner)",""],["run_callbacks","ActiveSupport::Callbacks","ActiveSupport/Callbacks.html#method-i-run_callbacks","(kind, *args, &block)","<p>Runs the callbacks for the given event.\n<p>Calls the before and around callbacks in the order they were set, …\n"],["run_gc","ActiveSupport::Testing::Performance","ActiveSupport/Testing/Performance.html#method-i-run_gc","()",""],["run_in_isolation","ActiveSupport::Testing::Isolation::Forking","ActiveSupport/Testing/Isolation/Forking.html#method-i-run_in_isolation","(&blk)",""],["run_in_isolation","ActiveSupport::Testing::Isolation::Subprocess","ActiveSupport/Testing/Isolation/Subprocess.html#method-i-run_in_isolation","(&blk)","<p>Crazy H4X to get this working in windows / jruby with no forking.\n"],["run_load_hooks","ActiveSupport","ActiveSupport.html#method-c-run_load_hooks","(name, base = Object)",""],["run_profile","ActiveSupport::Testing::Performance","ActiveSupport/Testing/Performance.html#method-i-run_profile","(metric)",""],["run_test","ActiveSupport::Testing::Performance::ForClassicTestUnit","ActiveSupport/Testing/Performance/ForClassicTestUnit.html#method-i-run_test","(metric, mode)",""],["run_test","ActiveSupport::Testing::Performance::ForMiniTest","ActiveSupport/Testing/Performance/ForMiniTest.html#method-i-run_test","(metric, mode)",""],["run_warmup","ActiveSupport::Testing::Performance","ActiveSupport/Testing/Performance.html#method-i-run_warmup","()",""],["safe_concat","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-safe_concat","(value)",""],["safe_constantize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-safe_constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string:\n\n<pre>&quot;Module&quot;.safe_constantize    ...</pre>\n"],["safe_constantize","String","String.html#method-i-safe_constantize","()","<p><code>safe_constantize</code> tries to find a declared constant with the\nname specified in the string. It returns ...\n"],["safe_get","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-safe_get","(key)",""],["sample","Array","Array.html#method-i-sample","(n=nil)","<p>Backport of Array#sample based on Marc-Andre Lafortune’s\ngithub.com/marcandre/backports/ Returns a random …\n"],["second","Array","Array.html#method-i-second","()","<p>Equal to <code>self[1]</code>.\n"],["second","Numeric","Numeric.html#method-i-second","()",""],["seconds","Numeric","Numeric.html#method-i-seconds","()","<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],["seconds_since_midnight","DateTime","DateTime.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: DateTime.now.seconds_since_midnight\n"],["seconds_since_midnight","Time","Time.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: Time.now.seconds_since_midnight\n"],["seconds_to_utc_offset","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-seconds_to_utc_offset","(seconds, colon = true)","<p>Assumes self represents an offset from UTC in seconds (as returned from\nTime#utc_offset) and turns this …\n"],["set_callback","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-set_callback","(name, *filter_list, &block)","<p>Install a callback for the given event.\n\n<pre>set_callback :save, :before, :before_meth\nset_callback :save, ...</pre>\n"],["set_logger","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-set_logger","(logger)","<p>Overwrite if you use another logger in your log subscriber:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">logger</span>\n  <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>.<span class=\"ruby-identifier\">logger</span> = <span class=\"ruby-ivar\">@logger</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["setup","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-setup","()",""],["setup","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-setup","(*args, &block)",""],["shift","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-shift","()",""],["silence","ActiveSupport::Benchmarkable","ActiveSupport/Benchmarkable.html#method-i-silence","()","<p>Silence the logger during the execution of the block.\n"],["silence","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-i-silence","(temporary_level = ERROR)","<p>Silences the logger for the duration of the block.\n"],["silence","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-silence","()","<p>Silence deprecation warnings within the block.\n"],["silence","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-i-silence","(temporary_level = Logger::ERROR, &block)",""],["silence","Kernel","Kernel.html#method-i-silence","(stream)",""],["silence!","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-silence-21","()","<p>Silence the logger.\n"],["silence_stream","Kernel","Kernel.html#method-i-silence_stream","(stream)","<p>Silences any stream for the duration of the block.\n\n<pre>silence_stream(STDOUT) do\n  puts 'This will never be ...</pre>\n"],["silence_warnings","Kernel","Kernel.html#method-i-silence_warnings","()","<p>Sets $VERBOSE to nil for the duration of the block and back to its original\nvalue afterwards.\n\n<pre>silence_warnings ...</pre>\n"],["silencer","ActiveSupport::BufferedLogger","ActiveSupport/BufferedLogger.html#method-c-silencer","","<p>Set to false to disable the silencer\n"],["since","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-since","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the future as this Duration\nrepresents.\n"],["since","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-since","(other)",""],["since","Date","Date.html#method-i-since","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["since","DateTime","DateTime.html#method-i-since","(seconds)","<p>Returns a new DateTime representing the time a number of seconds since the\ninstance time Do not use this …\n"],["since","Numeric","Numeric.html#method-i-since","(time = ::Time.current)","<p>Reads best with argument:  10.minutes.since(time)\n"],["since","Time","Time.html#method-i-since","(seconds)","<p>Returns a new Time representing the time a number of seconds since the\ninstance time\n"],["singleton_class","Kernel","Kernel.html#method-i-singleton_class","()","<p>Returns the object’s singleton class.\n"],["singular","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-singular","(rule, replacement)","<p>Specifies a new singularization rule and its replacement. The rule can\neither be a string or a regular …\n"],["singularize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-singularize","(word)","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n<p>Examples:\n\n<pre>&quot;posts&quot;.singularize ...</pre>\n"],["singularize","String","String.html#method-i-singularize","()","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n\n<pre>&quot;posts&quot;.singularize        ...</pre>\n"],["size","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-size","()","<p>Returns the size of the cached value. This could be less than value.size if\nthe data is compressed.\n"],["size","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-size","()","<p>Returns the number of codepoints in the string\n"],["skip_callback","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-skip_callback","(name, *filter_list, &block)","<p>Skip a previously set callback. Like <code>set_callback</code>,\n<code>:if</code> or <code>:unless</code> options may be passed in order to\ncontrol …\n"],["slice","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-slice","(*args)","<p>Implements Unicode-aware slice with codepoints. Slicing on one point\nreturns the codepoints for that …\n"],["slice","Hash","Hash.html#method-i-slice","(*keys)","<p>Slice a hash to include only the given keys. This is useful for limiting an\noptions hash to valid keys …\n"],["slice!","Hash","Hash.html#method-i-slice-21","(*keys)","<p>Replaces the hash with only the given keys. Returns a hash contained the\nremoved key/value pairs\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">a</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["split","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-split","(*args)","<p>Works just like <code>String#split</code>, with the exception that the\nitems in the resulting list are Chars instances …\n"],["split","Array","Array.html#method-i-split","(value = nil)","<p>Divides the array into one or more subarrays based on a delimiting\n<code>value</code> or the result of an optional …\n"],["squish","String","String.html#method-i-squish","()","<p>Returns the string, first removing all whitespace on both ends of the\nstring, and then changing remaining …\n"],["squish!","String","String.html#method-i-squish-21","()","<p>Performs a destructive squish. See String#squish.\n"],["start_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_document","()",""],["start_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_element","(name, attrs = [])",""],["stats","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-stats","()","<p>Get the statistics from the memcached servers.\n"],["step_with_blockless","Range","Range.html#method-i-step_with_blockless","(*args, &block)","<p>Return an array when step is called without a block.\n"],["store","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-store","(klass)",""],["store","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["store","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["strftime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-strftime","(format)","<p>Replaces <code>%Z</code> and <code>%z</code> directives with\n<code>zone</code> and <code>formatted_offset</code>, respectively, before\npassing to Time#strftime …\n"],["strict_encode64","Base64","Base64.html#method-c-strict_encode64","(value)","<p>Included in Ruby 1.9\n"],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","Hash","Hash.html#method-i-stringify_keys","()","<p>Return a new hash with all keys converted to strings.\n"],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","Hash","Hash.html#method-i-stringify_keys-21","()","<p>Destructively convert all keys to strings.\n"],["strip","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-strip","()","<p>Strips entire range of Unicode whitespace from the right and left of the\nstring.\n"],["strip_heredoc","String","String.html#method-i-strip_heredoc","()","<p>Strips indentation in heredocs.\n<p>For example in\n\n<pre>if options[:usage]\n  puts &lt;&lt;-USAGE.strip_heredoc\n    This ...</pre>\n"],["subscribe","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-subscribe","(*args, &block)",""],["subscribe","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-subscribe","(pattern = nil, block = Proc.new)",""],["subscribed","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-subscribed","(callback, *args, &block)",""],["sum","Enumerable","Enumerable.html#method-i-sum","(identity = 0, &block)","<p>Calculates a sum from the elements. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">p</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">price</span> * <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">tax_rate</span> }\n<span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span>(&amp;:<span class=\"ruby-identifier\">price</span>)\n</pre>\n"],["sunday","Date","Date.html#method-i-sunday","()","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the end\nof this week. Week is assumed to start on a Monday. …\n"],["sunday","Time","Time.html#method-i-sunday","()","<p>Returns a new <code>Date</code>/<code>DateTime</code> representing the end\nof this week. Week is assumed to start on a Monday. …\n"],["superclass_delegating_accessor","Class","Class.html#method-i-superclass_delegating_accessor","(name, options = {})",""],["suppress","Kernel","Kernel.html#method-i-suppress","(*exception_classes)","<p>Blocks and ignores any exception passed as argument if raised within the\nblock.\n\n<pre>suppress(ZeroDivisionError) ...</pre>\n"],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","Hash","Hash.html#method-i-symbolize_keys","()","<p>Return a new hash with all keys converted to symbols, as long as they\nrespond to <code>to_sym</code>.\n"],["symbolize_keys!","Hash","Hash.html#method-i-symbolize_keys-21","()","<p>Destructively convert all keys to symbols, as long as they respond to\n<code>to_sym</code>.\n"],["sync_keys!","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-sync_keys-21","()",""],["synchronize","Module","Module.html#method-i-synchronize","(*methods)","<p>Synchronize access around a method, delegating synchronization to a\nparticular mutex. A mutex (either …\n"],["tableize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-tableize","(class_name)","<p>Create the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tableize","String","String.html#method-i-tableize","()","<p>Creates the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tagged","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-i-tagged","(*new_tags)",""],["tags_text","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-i-tags_text","()",""],["teardown","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-teardown","()",""],["teardown","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-teardown","(*args, &block)",""],["terabyte","Numeric","Numeric.html#method-i-terabyte","()",""],["terabytes","Numeric","Numeric.html#method-i-terabytes","()",""],["test","ActiveSupport::Testing::Declarative","ActiveSupport/Testing/Declarative.html#method-i-test","(name, &block)","<p>test “verify something” do\n\n<pre>...</pre>\n<p>end\n"],["third","Array","Array.html#method-i-third","()","<p>Equal to <code>self[2]</code>.\n"],["tidy_bytes","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-tidy_bytes","(force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["tidy_bytes","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-tidy_bytes","(string, force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-time","()","<p>Returns a Time or DateTime instance that represents the time in\n<code>time_zone</code>.\n"],["time_with_block","ActiveSupport::Testing::Performance::Profiler","ActiveSupport/Testing/Performance/Profiler.html#method-i-time_with_block","()",""],["time_with_datetime_fallback","Time","Time.html#method-c-time_with_datetime_fallback","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0, usec=0)","<p>Returns a new Time if requested year can be accommodated by Ruby’s Time\nclass (i.e., if year is within …\n"],["titlecase","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-titlecase","()",""],["titlecase","String","String.html#method-i-titlecase","()",""],["titleize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-titleize","(word)","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["titleize","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-titleize","()","<p>Capitalizes the first letter of every word, when possible.\n<p>Example:\n\n<pre>&quot;ÉL QUE SE ENTERÓ&quot;.mb_chars.titleize ...</pre>\n"],["titleize","String","String.html#method-i-titleize","()","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["to","Array","Array.html#method-i-to","(position)","<p>Returns the beginning of the array up to <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; %w( a )</span>\n<span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to","String","String.html#method-i-to","(position)","<p>Returns the beginning of the string up to the <code>position</code>\ntreating the string as an array (where 0 is the …\n"],["to_a","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-to_a","()",""],["to_a","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_a","()",""],["to_d","BigDecimal","BigDecimal.html#method-i-to_d","()",""],["to_date","Date","Date.html#method-i-to_date","()","<p>A method to keep Time, Date and DateTime instances interchangeable on\nconversions. In this case, it simply …\n"],["to_date","DateTime","DateTime.html#method-i-to_date","()","<p>Converts self to a Ruby Date object; time portion is discarded.\n"],["to_date","String","String.html#method-i-to_date","()",""],["to_date","Time","Time.html#method-i-to_date","()","<p>Converts a Time object to a Date, dropping hour, minute, and second\nprecision.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">my_time</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_datetime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_datetime","()",""],["to_datetime","Date","Date.html#method-i-to_datetime","()","<p>Converts a Date instance to a DateTime, where the time is set to the\nbeginning of the day and UTC offset …\n"],["to_datetime","DateTime","DateTime.html#method-i-to_datetime","()","<p>To be able to keep Times, Dates and DateTimes interchangeable on\nconversions.\n"],["to_datetime","String","String.html#method-i-to_datetime","()",""],["to_datetime","Time","Time.html#method-i-to_datetime","()","<p>Converts a Time instance to a Ruby DateTime instance, preserving UTC\noffset.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">my_time</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>    <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_default_s","Array","Array.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Date","Date.html#method-i-to_default_s","(format = :default)",""],["to_default_s","DateTime","DateTime.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Range","Range.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Time","Time.html#method-i-to_default_s","(format = :default)",""],["to_f","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_f","()",""],["to_f","DateTime","DateTime.html#method-i-to_f","()","<p>Converts self to a floating-point number of seconds since the Unix epoch.\n"],["to_formatted_s","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","Array","Array.html#method-i-to_formatted_s","(format = :default)","<p>Converts a collection of elements into a formatted string by calling\n<code>to_s</code> on all elements and joining …\n"],["to_formatted_s","BigDecimal","BigDecimal.html#method-i-to_formatted_s","(format = DEFAULT_STRING_FORMAT)",""],["to_formatted_s","Date","Date.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See DATE_FORMATS for predefined formats.\n<p>This method is aliased to <code>to_s</code> …\n"],["to_formatted_s","DateTime","DateTime.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See Time::DATE_FORMATS for predefined\nformats.\n<p>This method is aliased to …\n"],["to_formatted_s","Range","Range.html#method-i-to_formatted_s","(format = :default)","<p>Gives a human readable format of the range.\n<p>Example\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">100</span>).<span class=\"ruby-identifier\">to_formatted_s</span> <span class=\"ruby-comment\"># =&gt; &quot;1..100&quot;</span>\n</pre>\n"],["to_formatted_s","Time","Time.html#method-i-to_formatted_s","(format = :default)","<p>Converts to a formatted string. See DATE_FORMATS for builtin formats.\n<p>This method is aliased to <code>to_s</code>. …\n"],["to_hash","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a Hash with String keys.\n"],["to_hash","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a Hash with String keys.\n"],["to_hash","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-to_hash","()",""],["to_i","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_i","()",""],["to_i","DateTime","DateTime.html#method-i-to_i","()","<p>Converts self to an integer number of seconds since the Unix epoch.\n"],["to_json","Object","Object.html#method-i-to_json","(options = nil)","<p>Dumps object in JSON (JavaScript Object Notation). See www.json.org for\nmore info.\n"],["to_options","Hash","Hash.html#method-i-to_options","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","Hash","Hash.html#method-i-to_options-21","()",""],["to_param","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-to_param","()",""],["to_param","Array","Array.html#method-i-to_param","()","<p>Calls <code>to_param</code> on all its elements and joins the result with\nslashes. This is used by <code>url_for</code> in Action …\n"],["to_param","FalseClass","FalseClass.html#method-i-to_param","()",""],["to_param","Hash","Hash.html#method-i-to_param","(namespace = nil)","<p>Returns a string representation of the receiver suitable for use as a URL\nquery string:\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'David'</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_param","NilClass","NilClass.html#method-i-to_param","()",""],["to_param","Object","Object.html#method-i-to_param","()","<p>Alias of <code>to_s</code>.\n"],["to_param","TrueClass","TrueClass.html#method-i-to_param","()",""],["to_query","Array","Array.html#method-i-to_query","(key)","<p>Converts an array into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_query","Hash","Hash.html#method-i-to_query","(namespace = nil)",""],["to_query","Object","Object.html#method-i-to_query","(key)","<p>Converts an object into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_s","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-to_s","()",""],["to_s","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_s","(format = :default)","<p><code>:db</code> format outputs time in UTC; all others output time in\nlocal. Uses TimeWithZone's <code>strftime</code>, so <code>%Z</code> ...\n"],["to_s","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-to_s","()","<p>Returns a textual representation of this time zone.\n"],["to_s","Array","Array.html#method-i-to_s","(format = :default)",""],["to_s","BigDecimal","BigDecimal.html#method-i-to_s","(format = DEFAULT_STRING_FORMAT)",""],["to_s","Date","Date.html#method-i-to_s","(format = :default)",""],["to_s","DateTime","DateTime.html#method-i-to_s","(format = :default)",""],["to_s","Range","Range.html#method-i-to_s","(format = :default)",""],["to_s","Time","Time.html#method-i-to_s","(format = :default)",""],["to_sentence","Array","Array.html#method-i-to_sentence","(options = {})","<p>Converts the array to a comma-separated sentence where the last element is\njoined by the connector word. …\n"],["to_tag","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-to_tag","(key, value, options)",""],["to_time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_time","()","<p>A TimeWithZone acts like a Time, so just return <code>self</code>.\n"],["to_time","Date","Date.html#method-i-to_time","(form = :local)","<p>Converts a Date instance to a Time, where the time is set to the beginning\nof the day. The timezone can …\n"],["to_time","DateTime","DateTime.html#method-i-to_time","()","<p>Attempts to convert self to a Ruby Time object; returns self if out of\nrange of Ruby Time class. If self …\n"],["to_time","String","String.html#method-i-to_time","(form = :utc)","<p>Form can be either :utc (default) or :local.\n"],["to_time","Time","Time.html#method-i-to_time","()","<p>A method to keep Time, Date and DateTime instances interchangeable on\nconversions. In this case, it simply …\n"],["to_time_in_current_zone","Date","Date.html#method-i-to_time_in_current_zone","()","<p>Converts Date to a TimeWithZone in the current zone if Time.zone or\nTime.zone_default is set, otherwise …\n"],["to_xml","Array","Array.html#method-i-to_xml","(options = {})","<p>Returns a string that represents the array in XML by invoking\n<code>to_xml</code> on each element. Active Record collections …\n"],["to_xml","Hash","Hash.html#method-i-to_xml","(options = {})","<p>Returns a string containing an XML representation of its receiver:\n\n<pre class=\"ruby\">{<span class=\"ruby-string\">&quot;foo&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-string\">&quot;bar&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">to_xml</span>\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_yaml","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-to_yaml","(opts = {})",""],["to_yaml","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-to_yaml","(*args)",""],["to_yaml","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_yaml","(options = {})",""],["to_yaml","BigDecimal","BigDecimal.html#method-i-to_yaml","(opts = {})","<p>This emits the number without any scientific notation. This is better than\nself.to_f.to_s since it doesn’t …\n"],["to_yaml_type","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-to_yaml_type","()",""],["today","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-today","()","<p>Return the current date in this time zone.\n"],["today?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-today-3F","()",""],["today?","Date","Date.html#method-i-today-3F","()","<p>Returns true if the Date object’s date is today.\n"],["today?","Time","Time.html#method-i-today-3F","()","<p>Tells whether the Time object’s time is today\n"],["tomorrow","Date","Date.html#method-c-tomorrow","()","<p>Returns a new Date representing the date 1 day after today (i.e. tomorrow’s\ndate).\n"],["tomorrow","Date","Date.html#method-i-tomorrow","()","<p>Convenience method which returns a new Date/DateTime representing the time\n1 day since the instance time …\n"],["tomorrow","Time","Time.html#method-i-tomorrow","()","<p>Convenience method which returns a new Time representing the time 1 day\nsince the instance time\n"],["transliterate","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-transliterate","(string, replacement = \"?\")","<p>Replaces non-ASCII characters with an ASCII approximation, or if none\nexists, a replacement character …\n"],["trigger","ActiveSupport::FileWatcher","ActiveSupport/FileWatcher.html#method-i-trigger","(files)",""],["trigger","ActiveSupport::FileWatcher::Backend","ActiveSupport/FileWatcher/Backend.html#method-i-trigger","(files)",""],["truncate","String","String.html#method-i-truncate","(length, options = {})","<p>Truncates a given <code>text</code> after a given <code>length</code> if\n<code>text</code> is longer than <code>length</code>:\n\n<pre>&quot;Once upon a time in a world ...</pre>\n"],["try","NilClass","NilClass.html#method-i-try","(*args)","<p>Calling <code>try</code> on <code>nil</code> always returns\n<code>nil</code>. It becomes specially helpful when navigating through\nassociations …\n"],["try","Object","Object.html#method-i-try","(*a, &b)","<p>Invokes the method identified by the symbol <code>method</code>, passing it\nany arguments and/or the block specified, …\n"],["tv_sec","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-tv_sec","()",""],["u_unpack","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-u_unpack","(string)","<p>Unpack the string at codepoints boundaries. Raises an EncodingError when\nthe encoding of the string isn’t …\n"],["uncountable","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-uncountable","(*words)","<p>Add uncountable words that shouldn’t be attempted inflected.\n<p>Examples:\n\n<pre>uncountable &quot;money&quot;\nuncountable ...</pre>\n"],["underscore","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-underscore","(camel_cased_word)","<p>Makes an underscored, lowercase form from the expression in the string.\n<p>Changes ‘::’ to ‘/’ to convert …\n"],["underscore","String","String.html#method-i-underscore","()","<p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form\nfrom the expression in the string.\n<p><code>underscore</code> ...\n"],["unescape","Object","Object.html#method-i-unescape","(str, escaped = /%[a-fA-F\\d]{2}/)",""],["uniq_by","Array","Array.html#method-i-uniq_by","()","<p>Returns an unique array based on the criteria given as a <code>Proc</code>.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>].<span class=\"ruby-identifier\">uniq_by</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">i</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">i</span>.<span class=\"ruby-identifier\">odd?</span> } <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["uniq_by!","Array","Array.html#method-i-uniq_by-21","()","<p>Same as uniq_by, but modifies self.\n"],["unmemoize_all","ActiveSupport::Memoizable::InstanceMethods","ActiveSupport/Memoizable/InstanceMethods.html#method-i-unmemoize_all","()",""],["unsubscribe","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-unsubscribe","(args)",""],["unsubscribe","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-unsubscribe","(subscriber)",""],["until","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-until","(time = ::Time.current)",""],["until","Numeric","Numeric.html#method-i-until","(time = ::Time.current)","<p>Reads best with argument:  10.minutes.until(time)\n"],["upcase","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-upcase","()","<p>Convert characters in the string to uppercase.\n<p>Example:\n\n<pre>'Laurent, où sont les tests ?'.mb_chars.upcase.to_s ...</pre>\n"],["update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the instantized hash with values from the second:\n\n<pre>hash_1 = HashWithIndifferentAccess.new\nhash_1[:key] ...</pre>\n"],["update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the instantized hash with values from the second:\n\n<pre>hash_1 = HashWithIndifferentAccess.new\nhash_1[:key] ...</pre>\n"],["updated?","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-updated-3F","()","<p>Check if any of the entries were updated. If so, the updated_at value is\ncached until the block is executed …\n"],["us_zones","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-us_zones","()","<p>A convenience method for returning a collection of TimeZone objects for\ntime zones in the USA.\n"],["use_zone","Time","Time.html#method-c-use_zone","(time_zone)","<p>Allows override of <code>Time.zone</code> locally inside supplied block;\nresets <code>Time.zone</code> to existing value when done. …\n"],["usec","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-usec","()",""],["utc","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-utc","()","<p>Returns a Time or DateTime instance that represents the time in UTC.\n"],["utc","DateTime","DateTime.html#method-i-utc","()","<p>Adjusts DateTime to UTC by adding its offset value; offset is set to 0\n<p>Example:\n\n<pre>DateTime.civil(2005, 2, ...</pre>\n"],["utc?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-utc-3F","()",""],["utc?","DateTime","DateTime.html#method-i-utc-3F","()","<p>Returns true if offset == 0\n"],["utc_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-utc_offset","()",""],["utc_offset","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-utc_offset","()",""],["utc_offset","DateTime","DateTime.html#method-i-utc_offset","()","<p>Returns the offset value in seconds\n"],["utc_time","Time","Time.html#method-c-utc_time","(*args)","<p>Wraps class method <code>time_with_datetime_fallback</code> with\n<code>utc_or_local</code> set to <code>:utc</code>.\n"],["utc_to_local","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-utc_to_local","(time)","<p>Adjust the given time to the simultaneous time in the time zone represented\nby <code>self</code>. Returns a Time.utc() …\n"],["validate_fallbacks","I18n::Railtie","I18n/Railtie.html#method-c-validate_fallbacks","(fallbacks)",""],["value","ActiveSupport::Cache::Entry","ActiveSupport/Cache/Entry.html#method-i-value","()","<p>Get the value stored in the cache.\n"],["values","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-values","()",""],["values_at","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:a] ...</pre>\n"],["values_at","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:a] ...</pre>\n"],["verify","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-verify","(signed_message)",""],["wait","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-wait","()","<p>Wait notifications to be published.\n"],["wait","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-wait","()","<p>This is a sync queue, so there is no waiting.\n"],["wants?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-c-wants-3F","(string)","<p>Returns <code>true</code> if the Chars class can and should act as a proxy\nfor the string <em>string</em>. Returns <code>false</code> otherwise. …\n"],["warn","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-warn","(message = nil, callstack = caller)","<p>Outputs a deprecation warning to the output configured by\n<code>ActiveSupport::Deprecation.behavior</code>\n\n<pre>ActiveSupport::Deprecation.warn(&quot;something ...</pre>\n"],["watch","ActiveSupport::FileWatcher","ActiveSupport/FileWatcher.html#method-i-watch","(pattern, &block)",""],["watch_namespaces","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-watch_namespaces","(namespaces)","<p>Add a set of modules to the watch stack, remembering the initial constants\n"],["watching?","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-watching-3F","()",""],["week","Numeric","Numeric.html#method-i-week","()",""],["weeks","Numeric","Numeric.html#method-i-weeks","()",""],["weeks_ago","Date","Date.html#method-i-weeks_ago","(weeks)","<p>Returns a new Date/DateTime representing the time a number of specified\nweeks ago.\n"],["weeks_ago","Time","Time.html#method-i-weeks_ago","(weeks)","<p>Returns a new Time representing the time a number of specified weeks ago.\n"],["with_backend","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-with_backend","(name)",""],["with_backend","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-with_backend","(name)",""],["with_gc_stats","ActiveSupport::Testing::Performance::Metrics::Base","ActiveSupport/Testing/Performance/Metrics/Base.html#method-i-with_gc_stats","()",""],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","Hash","Hash.html#method-i-with_indifferent_access","()","<p>Returns an <code>ActiveSupport::HashWithIndifferentAccess</code> out of its\nreceiver:\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">a</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>}.<span class=\"ruby-identifier\">with_indifferent_access</span>[<span class=\"ruby-string\">&quot;a&quot;</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["with_local_cache","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-with_local_cache","()","<p>Use a local cache for the duration of block.\n"],["with_options","Object","Object.html#method-i-with_options","(options)","<p>An elegant way to factor duplication out of options passed to a series of\nmethod calls. Each method called …\n"],["with_output_file","ActiveSupport::Testing::Performance::Benchmarker","ActiveSupport/Testing/Performance/Benchmarker.html#method-i-with_output_file","()",""],["with_warnings","Kernel","Kernel.html#method-i-with_warnings","(flag)","<p>Sets $VERBOSE for the duration of the block and back to its original value\nafterwards.\n"],["wrap","Array","Array.html#method-c-wrap","(object)","<p>Wraps its argument in an array unless it is already an array (or\narray-like).\n<p>Specifically:\n<p>If the argument …\n"],["write","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-write","(name, value, options = nil)","<p>Writes the value to the cache, with the key.\n<p>Options are passed to the underlying cache implementation. …\n"],["write_entry","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-write_entry","(key, entry, options)",""],["write_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-write_entry","(key, value, options)",""],["xmlschema","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-xmlschema","(fraction_digits = 0)",""],["xmlschema","Date","Date.html#method-i-xmlschema","()",""],["xmlschema","DateTime","DateTime.html#method-i-xmlschema","()","<p>Converts datetime to an appropriate format for use in XML.\n"],["year","Integer","Integer.html#method-i-year","()",""],["years","Integer","Integer.html#method-i-years","()",""],["years_ago","Date","Date.html#method-i-years_ago","(years)","<p>Returns a new Date/DateTime representing the time a number of specified\nyears ago.\n"],["years_ago","Time","Time.html#method-i-years_ago","(years)","<p>Returns a new Time representing the time a number of specified years ago\n"],["years_since","Date","Date.html#method-i-years_since","(years)","<p>Returns a new Date/DateTime representing the time a number of specified\nyears in the future.\n"],["years_since","Time","Time.html#method-i-years_since","(years)","<p>Returns a new Time representing the time a number of specified years in the\nfuture\n"],["yesterday","Date","Date.html#method-c-yesterday","()","<p>Returns a new Date representing the date 1 day ago (i.e. yesterday’s date).\n"],["yesterday","Date","Date.html#method-i-yesterday","()","<p>Convenience method which returns a new Date/DateTime representing the time\n1 day ago\n"],["yesterday","Time","Time.html#method-i-yesterday","()","<p>Convenience method which returns a new Time representing the time 1 day ago\n"],["zone","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-zone","()","<p>Time uses <code>zone</code> to display the time zone abbreviation, so we’re\nduck-typing it.\n"],["zone","Time","Time.html#method-c-zone","()","<p>Returns the TimeZone for the current request, if this has been set (via\nTime.zone=). If <code>Time.zone</code> has …\n"],["zone=","Time","Time.html#method-c-zone-3D","(time_zone)","<p>Sets <code>Time.zone</code> to a TimeZone object for the current\nrequest/thread.\n<p>This method accepts any of the following: …\n"],["zones_map","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-zones_map","()",""]]}}